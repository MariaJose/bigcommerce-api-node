/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v3/storefront/api-token': {
    /**
     * Creates a Storefront API token.
     *
     * **Required Scopes**
     * * `Manage` `Storefront API Tokens`
     */
    post: operations['createToken'];
    /** Revoke access for a Storefront API token. */
    delete: operations['revokeToken'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v3/storefront/api-token-customer-impersonation': {
    /**
     * Returns a Storefront API token that allows your application to impersonate customers when making GraphQL `POST` requests. For more information on how to use the returned token, see [customer impersonation tokens](/api-reference/cart-checkout/storefront-api-token/customer-impersonation-token/createtokenwithcustomerimpersonation).
     *
     * **Required Scopes**
     * * `Manage` `Storefront API Customer Impersonation Tokens`
     */
    post: operations['createTokenWithCustomerImpersonation'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
}

export interface definitions {
  TokenPostImpersonation: {
    /** @description Channel ID for requested token */
    channel_id: number;
    /**
     * Format: double
     * @description Unix timestamp (UTC time) defining when the token should expire.
     * @default 1620766652
     */
    expires_at: number;
  };
  TokenPostSimple: {
    /**
     * @description List of allowed domains for Cross-Origin Request Sharing. Currently only accepts a single element.
     * @example https://www.yourstorefront.com/
     */
    allowed_cors_origins?: string[];
  };
  Token_Full: {
    data?: definitions['Token_Base'];
    meta?: { [key: string]: unknown };
  };
  Token_Base: {
    /** @description JWT Token for accessing the Storefront API */
    token?: string;
  };
  ErrorResponse: definitions['BaseError'] & {
    errors?: definitions['DetailedErrors'];
  };
  /** @description Error payload for the BigCommerce API. */
  BaseError: {
    /** @description The HTTP status code. */
    status?: number;
    /** @description The error title describing the particular error. */
    title?: string;
    type?: string;
  };
  DetailedErrors: { [key: string]: string };
}

export interface responses {
  TokenResponse: {
    schema: definitions['Token_Full'];
  };
}

export interface operations {
  /**
   * Creates a Storefront API token.
   *
   * **Required Scopes**
   * * `Manage` `Storefront API Tokens`
   */
  createToken: {
    parameters: {
      path: {
        store_hash: string;
      };
      body: {
        body?: definitions['TokenPostSimple'] & definitions['TokenPostImpersonation'];
      };
    };
    responses: {
      200: responses['TokenResponse'];
      /** Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
      401: unknown;
      /** Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
      403: unknown;
      /** Invalid JSON request body - missing or invalid data. */
      422: unknown;
    };
  };
  /** Revoke access for a Storefront API token. */
  revokeToken: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        /** An existing JWT token that you want to revoke. */
        'Sf-Api-Token': string;
      };
    };
    responses: {
      /** A storefront API token revocation has been scheduled. */
      200: unknown;
      /** Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
      401: unknown;
      /** Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
      403: unknown;
      /** Invalid JWT Token provided or missing JWT token header */
      422: unknown;
    };
  };
  /**
   * Returns a Storefront API token that allows your application to impersonate customers when making GraphQL `POST` requests. For more information on how to use the returned token, see [customer impersonation tokens](/api-reference/cart-checkout/storefront-api-token/customer-impersonation-token/createtokenwithcustomerimpersonation).
   *
   * **Required Scopes**
   * * `Manage` `Storefront API Customer Impersonation Tokens`
   */
  createTokenWithCustomerImpersonation: {
    parameters: {
      path: {
        store_hash: string;
      };
      body: {
        body?: definitions['TokenPostImpersonation'];
      };
    };
    responses: {
      200: responses['TokenResponse'];
      /** Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
      401: unknown;
      /** Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
      403: unknown;
      /** Invalid JSON request body - missing or invalid data */
      422: unknown;
    };
  };
}

export interface external {}
