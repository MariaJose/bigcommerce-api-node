/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/checkouts/{checkoutId}': {
    /**
     * Returns a *Checkout*.
     *
     * The cart ID and checkout ID are the same.
     *
     *
     * <!-- theme: info -->
     * > #### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     */
    get: operations['CheckoutsByCheckoutIdGet'];
    /**
     * Updates *Checkout* customer messages.
     *
     * **Limits**
     *
     * * 2000 character limit
     *
     *
     * <!-- theme: info -->
     * > #### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     */
    put: operations['CheckoutsByCheckoutIdPut'];
    parameters: {
      path: {
        checkoutId: string;
      };
    };
  };
  '/checkouts/{checkoutId}/carts/{cartId}/items/{itemId}': {
    /**
     * Updates a *Checkout Line Item*. Updates an existing, single line item in the cart.
     *
     * If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the [Add Cart Line Items](/api-reference/storefront/carts/cart-items/addcartlineitem) endpoint.
     *
     *
     * <!-- theme: info -->
     * > #### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     */
    put: operations['CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdPut'];
    /**
     * Deletes a *Line Item* from the *Cart*.
     *
     *
     * <!-- theme: info -->
     * > #### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     */
    delete: operations['CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdDelete'];
  };
  '/checkouts/{checkoutId}/billing-address': {
    /**
     * Adds a billing address to an existing *Checkout*.
     *
     * **Required Fields**
     * * country_code
     *
     *
     * <!-- theme: info -->
     * > #### Note
     * > * The `email` property is only required if the customer is a guest shopper. Otherwise, it is set automatically.
     * > * Sending `email` property as a payload in POST request triggers the abandoned cart notification process.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    post: operations['CheckoutsBillingAddressByCheckoutIdPost'];
  };
  '/checkouts/{checkoutId}/billing-address/{addressId}': {
    /**
     * Updates an existing billing address on *Checkout*.
     *
     *
     * <!-- theme: info -->
     * > #### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     */
    put: operations['CheckoutsBillingAddressByCheckoutIdAndAddressIdPut'];
  };
  '/checkouts/{checkoutId}/consignments': {
    /**
     * Adds a new *Consignment* to *Checkout*.
     *
     * There are two steps to add a new shipping address and shipping options with line items.
     * 1. Add a new Consignment to Checkout.
     *   * Send a POST to Consignments with each shipping address and line items IDs. Each address can have its own line item IDs.
     *   * As part of the request URL make sure to add `include=consignments.availableShippingOptions` to return the available shipping options based on line items and shipping locations. This will return `availableShippingOptions` in the response.
     * 2. [Update the Consignment](/api-reference/storefront/checkouts/checkout-consignments/checkoutsconsignmentsbycheckoutidandconsignmentidput) with Shipping Options.
     *
     * **Required Query**
     * * consignments.availableShippingOptions
     *
     * **Required Fields**
     * * shipping_address (deprecated) or address
     * * line_items
     *
     * To learn more about creating a Checkout Consignment, see the [Carts and Checkouts Tutorial](/api-docs/storefront/tutorials/carts).
     *
     * <!-- theme: info -->
     * > #### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     */
    post: operations['CheckoutsConsignmentsByCheckoutIdPost'];
  };
  '/checkouts/{checkoutId}/consignments/{consignmentId}': {
    /**
     * Updates an existing consignment. Either the shipping address, one or more line item IDs, or the shipping option ID can be updated in a single call to this endpoint.
     *
     * There are two steps to add a new shipping address and shipping options with line items.
     * 1. Add a new Consignment to Checkout.
     * 2. Update the Consignment with Shipping Options.
     *   * Update each *Consignment* `shippingOptionId` (shipping address and line items) with the `availableShippingOption > id` from Step One.
     *
     * **Required Fields**
     * * shippingOptionId
     *
     * To learn more about creating a Checkout Consignment see [Checkout Consignment API](/api-docs/checkouts/checkout-consignment).
     *
     * <!-- theme: info -->
     * > #### Note
     * > * You cannot pass both an `address` and a `shippingOptionId` because the shipping option may not be available for the new address
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    put: operations['CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPut'];
    /**
     * Removes an existing *Consignment* from *Checkout*.
     *
     * <!-- theme: info -->
     * > #### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     */
    delete: operations['CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDelete'];
  };
  '/checkouts/{checkoutId}/gift-certificates': {
    /**
     * Adds a *Gift Certificate Code* to *Checkout*.
     *
     *
     * <!-- theme: info -->
     * > #### Note
     * > * *Gift Certificates* are treated as a payment methods.
     * > * You are not able to purchase a gift certificate with a gift certificate.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * The rate limit is 20/hour (only for unique gift-certificate codes).
     */
    post: operations['CheckoutsGiftCertificatesByCheckoutIdPost'];
  };
  '/checkouts/{checkoutId}/gift-certificates/{giftCertificateCode}': {
    /**
     * Deletes an existing *Gift Certificate*.
     *
     * This removes the *Gift Certificate* payment method.
     *
     * <!-- theme: info -->
     * > #### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     */
    delete: operations['CheckoutsGiftCertificatesByCheckoutIdAndGiftCertificateCodeDelete'];
  };
  '/checkouts/{checkoutId}/coupons': {
    /**
     * Adds a *Coupon Code* to *Checkout*.
     *
     * **Required Fields**
     * * couponCode
     *
     * <!-- theme: info -->
     * > #### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     */
    post: operations['CheckoutsCouponsByCheckoutIdPost'];
  };
  '/checkouts/{checkoutId}/coupons/{couponCode}': {
    /**
     * Deletes a *Coupon Code* from *Checkout*.
     *
     * <!-- theme: info -->
     * > #### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     */
    delete: operations['CheckoutsCouponsByCheckoutIdAndCouponCodeDelete'];
  };
  '/checkouts/{checkoutId}/store-credit': {
    /**
     * Applies any available store credit to a checkout. As on the storefront, all available store credit will be used (up to the value of the order) and no amount need be specified.
     *
     * <!-- theme: info -->
     * > #### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     */
    post: operations['CheckoutStoreCreditAdd'];
    /**
     * Removes store credit from a checkout.
     *
     * <!-- theme: info -->
     * > #### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     */
    delete: operations['CheckoutsStoreCreditRemove'];
    parameters: {
      path: {
        checkoutId: string;
      };
    };
  };
  '/checkouts/{checkoutId}/spam-protection': {
    /**
     * Verifies if checkout is created by human.
     *
     * <!-- theme: info -->
     * > #### Note
     * > The Send a Test Request feature is not currently supported for this endpoint.
     */
    post: operations['checkoutSpamProtection'];
  };
}

export interface definitions {
  /** SpamProtectionRequest */
  SpamProtectionRequest: {
    token?: string;
  };
  /** checkout_Full */
  checkout_Full: {
    /** Format: uuid */
    id?: string;
    cart?: definitions['checkoutCart'];
    billingAddress?: definitions['address_Base'];
    consignments?: definitions['consignment_Full'][];
    /** @description Coupons applied at checkout level. */
    coupons?: definitions['AppliedCoupon'][];
    /** @description "" */
    orderId?: string;
    /**
     * Format: float
     * @description Shipping cost before any discounts are applied.
     */
    shippingCostTotal?: number;
    /** @description Gift wrapping cost for all items, including or excluding tax. */
    giftWrappingCostTotal?: number;
    /**
     * Format: float
     * @description Handling cost for all consignments including or excluding tax.
     */
    handlingCostTotal?: number;
    /** Format: float */
    taxTotal?: number;
    taxes?: definitions['checkoutTax'][];
    /**
     * Format: float
     * @description Subtotal of the checkout before applying item level discounts. Tax inclusive based on the store settings.
     */
    subtotal?: number;
    /**
     * Format: float
     * @description The total payable amount, before applying any store credit or gift certificate.
     */
    grandTotal?: number;
    /** @description Applied gift certificate (as a payment method). */
    giftCertificates?: definitions['checkoutGiftCertificates'][];
    /** @description Time when the cart was created. */
    createdTime?: string;
    /** @description Time when the cart was last updated. */
    updatedTime?: string;
    /** @description Shopper's message provided as details for the order to be created from this cart */
    customerMessage?: string;
    /** @description `grandTotal` subtract the store-credit amount */
    outstandingBalance?: number;
    /** @description `true` value indicates StoreCredit has been applied. */
    isStoreCreditApplied?: boolean;
  };
  /** Applied Coupon */
  AppliedCoupon: {
    /** @description The coupon ID. */
    id?: string;
    /** @description the coupon code */
    code: string;
    /** @description The coupon title based on different types provided in control panel section. */
    displayName?: string;
    /**
     * @description |Type `int`|Type Name|
     * |-|-|
     * |`0`|`per_item_discount`|
     * |`1`|`percentage_discount`|
     * |`2`|`per_total_discount`|
     * |`3`|`shipping_discount`|
     * |`4`|`free_shipping`|
     * |`5`|`promotion`|
     */
    couponType?: 1 | 2 | 3 | 4 | 5;
    /**
     * Format: double
     * @description The discounted amount applied within a given context.
     */
    discountedAmount?: number;
  };
  /**
   * contactEntity
   * @description Model for sender and receiver objects.
   */
  contactEntity: {
    name?: string;
    email?: string;
  };
  /** address_Full */
  address_Full: definitions['address_Base'] & {
    id?: string;
    /** @description Indicates if we should add this address to the customer address book. */
    shouldSaveAddress?: boolean;
  };
  /** address_Base */
  address_Base: {
    firstName?: string;
    lastName?: string;
    email?: string;
    company?: string;
    address1?: string;
    address2?: string;
    city?: string;
    /** @description Represents state or province. */
    stateOrProvince?: string;
    stateOrProvinceCode?: string;
    /** @description ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
    countryCode: string;
    postalCode?: string;
    phone?: string;
    customFields?: definitions['customFields'][];
  };
  /**
   * customFields
   * @description When doing a PUT or POST to the `fieldValue` with a pick list, the input must be a number. The response will be a string.
   */
  customFields: {
    fieldId?: string;
    /** @description This can also be an array for fields that need to support list of values (e.g., a set of check boxes.). When doing a PUT or POST to the `fieldValue` with a pick list, the input must be a number. The response will be a string. */
    fieldValue?: string;
  };
  /**
   * consignment_Full
   * @description This allows us to have multiple shipping addresses. Where there is only one shipping address, this array will contain only one value, with all the items.
   */
  consignment_Full: {
    id?: string;
    shippingAddress?: { [key: string]: unknown };
    address?: definitions['address_Full'];
    /** @description This is available only when "include=consignments.availableShippingOptions" is presented in the URL. */
    availableShippingOptions?: definitions['consignmentAvailableShippingOptions'][];
    /** Selected Shipping Option */
    selectedShippingOption?: {
      /** @description Read-only */
      description?: string;
      id?: string;
      /** @description Specified the type of shipping option. Flat rate, UPS, etc., */
      type?: string;
      imageUrl?: string;
      /** Format: double */
      cost?: number;
      /** @description An estimate of the arrival time. */
      transitTime?: string;
      /** @description ReadOnly, Field used for Shipping Provider API. */
      additionalDescription?: string;
    };
    /** @description List of consignment discounts applied through coupons */
    couponDiscounts?: {
      /** @description Coupon code that applied this discount */
      code?: string;
      /** Format: double */
      amount?: number;
    }[];
    /** @description List of consignment discounts applied through cart level discounts */
    discounts?: {
      /** @description Discount rule ID that applied this discount */
      id?: string;
    }[];
    /**
     * Format: double
     * @description The shipping cost for this consignment.
     */
    shippingCost?: number;
    /**
     * Format: double
     * @description The handling cost of shipping for this consignment.
     */
    handlingCost?: number;
    lineItemIds?: string[];
  };
  /** consignmentAvailableShippingOptions */
  consignmentAvailableShippingOptions: definitions['consignmentShippingOption_Base'] & {
    /** @description Is this shipping method the recommended shipping option or not. */
    isRecommended?: boolean;
    additionalDescription?: string;
  };
  /** checkoutTax */
  checkoutTax: {
    /** @description Name of the tax. */
    name?: string;
    /** Format: double */
    amount?: number;
  };
  /** checkout_Put */
  checkout_Put: {
    customerMessage?: string;
  };
  /** checkouts_Resp */
  checkouts_Resp: {
    /** Checkout */
    data?: {
      /** Format: uuid */
      id?: string;
      /**
       * Cart
       * @description A cart contains a collection of items, prices, discounts, etc. It does not contain customer-related data.
       */
      cart?: {
        /**
         * Format: uuid
         * @description Cart ID, provided after creating a cart with a POST.
         */
        id?: string;
        /**
         * Format: int32
         * @description ID of the customer to which the cart belongs.
         */
        customer_id?: number;
        /** @description The cart's email. This is the same email that is used in the billing address */
        email?: string;
        /**
         * Currency
         * @description The currency which prices are displayed (the store default currency).
         */
        currency?: {
          /** @description The currency name. */
          name?: string;
          /** @description ISO-4217 currency code. (See: http://en.wikipedia.org/wiki/ISO_4217.) */
          code?: string;
          /** @description The currency symbol. */
          symbol?: string;
          /**
           * Format: double
           * @description Number of decimal places for the currency. For example, USD currency has two decimal places.
           */
          decimalPlaces?: number;
        };
        /** @description Boolean representing whether tax information is included. */
        istaxIncluded?: boolean;
        /**
         * Format: double
         * @description Cost of cart’s contents, before applying discounts.
         */
        baseAmount?: number;
        /**
         * Format: double
         * @description Discounted amount.
         */
        discountAmount?: number;
        /**
         * Format: double
         * @description Sum of line-items amounts, minus cart-level discounts and coupons. This amount includes taxes (where applicable).
         */
        cartAmount?: number;
        coupons?: {
          /** @description The coupon ID. */
          id?: string;
          /** @description the coupon code */
          code: string;
          /** @description The coupon title based on different types provided in control panel section */
          displayName?: string;
          /** @description Key name to identify the type of coupon. */
          couponType?: string;
          /**
           * Format: double
           * @description The discounted amount applied within a given context.
           */
          discountedAmount?: number;
        }[];
        discounts?: {
          /** @description The name provided by the merchant. */
          name?: string;
          /**
           * Format: double
           * @description The discounted amount applied within a given context.
           */
          discountedAmount?: number;
        }[];
        lineItems?: {
          physicalItems: {
            /** @description The line-item ID. */
            id?: string;
            /** @description The product is part of a bundle such as a product pick list, then the parentId or the main product id will populate. */
            parentId?: string;
            /**
             * Format: double
             * @description ID of the variant.
             */
            variantId?: number;
            /**
             * Format: double
             * @description ID of the product.
             */
            productId?: number;
            /** @description SKU of the variant. */
            sku?: string;
            /** @description The item's product name. */
            name?: string;
            /** @description The product URL. */
            url?: string;
            /**
             * Format: double
             * @description Quantity of this item.
             */
            quantity: number;
            /** @description Whether the item is taxable. */
            isTaxable?: boolean;
            /** @description URL of an image of this item, accessible on the internet. */
            imageUrl?: string;
            /** @description List of discounts applied to this item, as an array of AppliedDiscount objects. */
            discounts?: {
              /** @description The name provided by the merchant. */
              name?: string;
              /**
               * Format: double
               * @description The discounted amount applied within a given context.
               */
              discountedAmount?: number;
            }[];
            /**
             * Format: double
             * @description The total value of all discounts applied to this item (excluding coupon).
             */
            discountAmount?: number;
            /**
             * Format: double
             * @description The total value of all coupons applied to this item.
             */
            couponAmount?: number;
            /**
             * Format: double
             * @description Item’s list price, as quoted by the manufacturer/distributor.
             */
            listPrice?: number;
            /**
             * Format: double
             * @description Item's price after all discounts are applied. (The final price before tax calculation.)
             */
            salePrice?: number;
            /**
             * Format: double
             * @description Item's list price multiplied by the quantity.
             */
            extendedListPrice?: number;
            /**
             * Format: double
             * @description Item's sale price multiplied by the quantity.
             */
            extendedSalePrice?: number;
            /** @description the product type - physical or digital */
            type?: string;
            /** @description If the item was added automatically by a promotion such as a coupon or buy one, get one. */
            addedByPromotion?: boolean;
            /** @description Whether this item requires shipping to a physical address. */
            isShippingRequired?: boolean;
            isMutable?: boolean;
            /** Gift Wrapping */
            giftWrapping?: {
              name?: string;
              message?: string;
              /** Format: double */
              amount?: number;
            };
          }[];
          digitalItems: {
            /** @description The line-item ID. */
            id?: string;
            /** @description Bundled items will have their parent's item Id. */
            parentId?: string;
            /**
             * Format: double
             * @description ID of the variant.
             */
            variantId?: number;
            /**
             * Format: double
             * @description ID of the product.
             */
            productId?: number;
            /** @description SKU of the variant. */
            sku?: string;
            /** @description The item's product name. */
            name?: string;
            /** @description The product URL. */
            url?: string;
            /**
             * Format: double
             * @description Quantity of this item.
             */
            quantity: number;
            /** @description The item's brand. */
            brand?: string;
            /** @description Whether the item is taxable. */
            isTaxable?: boolean;
            /** @description URL of an image of this item, accessible on the internet. */
            imageUrl?: string;
            /** @description List of discounts applied to this item, as an array of AppliedDiscount objects. */
            discounts?: {
              /** @description The name provided by the merchant. */
              name?: string;
              /**
               * Format: double
               * @description The discounted amount applied within a given context.
               */
              discountedAmount?: number;
            }[];
            /**
             * Format: double
             * @description The total value of all discounts applied to this item (excluding coupon).
             */
            discountAmount?: number;
            /**
             * Format: double
             * @description The total value of all coupons applied to this item.
             */
            couponAmount?: number;
            /**
             * Format: double
             * @description Item’s list price, as quoted by the manufacturer/distributor.
             */
            listPrice?: number;
            /**
             * Format: double
             * @description Item's price after all discounts are applied. (The final price before tax calculation.)
             */
            salePrice?: number;
            /**
             * Format: double
             * @description Item's list price multiplied by the quantity.
             */
            extendedListPrice?: number;
            /**
             * Format: double
             * @description Item's sale price multiplied by the quantity.
             */
            extendedSalePrice?: number;
            /** @description the product type - physical or digital */
            type?: string;
            isMutable?: boolean;
            /** @description Whether this item requires shipping to a physical address. */
            isShippingRequired?: boolean;
            /** @description URLs to download all product files. */
            downloadFileUrls?: string[];
            /** @description The URL for the combined downloads page. */
            downloadPageUrl?: string;
            /** @description Combined download size, in human-readable style. E.g.: `30MB`. */
            downloadSize?: string;
          }[];
          giftCertificate?: {
            /** @description Gift certificate identifier */
            id?: string;
            /** @description Name of the purchased gift certificate e.g. $20 Gift Certificate */
            name?: string;
            /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
            theme: string;
            /**
             * Format: double
             * @description Value must be between $1.00 and $1,000.00.
             */
            amount: number;
            taxable?: boolean;
            /** Contact Entity */
            sender: {
              name?: string;
              email?: string;
            };
            /** Contact Entity */
            recipient: {
              name?: string;
              email?: string;
            };
            /** @description Limited to 200 characters. */
            message?: string;
            /** @description Explicitly specifying the gift certificate type */
            type?: string;
          }[];
          customItems?: {
            /** @description Id of the custom item */
            id?: string;
            /** @description Custom item sku */
            sku?: string;
            /** @description Item name */
            name?: string;
            quantity?: string;
            /** @description Price of the item. With or without tax depending on your stores set up. */
            listPrice?: string;
          }[];
        }[];
        /** @description Time when the cart was created. */
        createdTime?: string;
        /** @description Time when the cart was last updated. */
        updatedTime?: string;
      };
      /** Address Response */
      billingAddress?: {
        firstName?: string;
        lastName?: string;
        email?: string;
        company?: string;
        address1?: string;
        address2?: string;
        city?: string;
        /** @description Represents state or province. */
        stateOrProvince?: string;
        stateOrProvinceCode?: string;
        /** @description ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
        countryCode: string;
        postalCode?: string;
        phone?: string;
        customFields?: {
          fieldId?: string;
          /** @description This can also be an array for fields that need to support list of values (e.g., a set of check boxes.) */
          fieldValue?: string;
        }[];
      } & {
        id?: string;
      };
      /** @description This allows us to have multiple shipping addresses. Where there is only one shipping address, this array will contain only one value, with all the items. */
      consignments?: {
        id?: string;
        shippingAddress?: { [key: string]: unknown };
        /** Address Response */
        address?: {
          firstName?: string;
          lastName?: string;
          email?: string;
          company?: string;
          address1?: string;
          address2?: string;
          city?: string;
          /** @description Represents state or province. */
          stateOrProvince?: string;
          stateOrProvinceCode?: string;
          /** @description ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
          countryCode: string;
          postalCode?: string;
          phone?: string;
          customFields?: {
            fieldId?: string;
            /** @description This can also be an array for fields that need to support list of values (e.g., a set of check boxes.) */
            fieldValue?: string;
          }[];
        } & {
          id?: string;
        };
        /** @description This is available only when "include=consignments.availableShippingOptions" is presented in the URL. */
        availableShippingOptions?: ({
          /** @description Read-only */
          description?: string;
          id?: string;
          /** @description Specified the type of shipping option. Flat rate, UPS, etc., */
          type?: string;
          imageUrl?: string;
          /** Format: double */
          cost?: number;
          /** @description An estimate of the arrival time. */
          transitTime?: string;
        } & {
          /** @description Is this shipping method the recommended shipping option or not. */
          isRecommended?: boolean;
        })[];
        /** Selected Shipping Option */
        selectedShippingOption?: {
          /** @description Read-only */
          description?: string;
          id?: string;
          /** @description Specified the type of shipping option. Flat rate, UPS, etc., */
          type?: string;
          imageUrl?: string;
          /** Format: double */
          cost?: number;
          /** @description An estimate of the arrival time. */
          transitTime?: string;
        };
        /** @description List of consignment discounts applied through coupons */
        couponDiscounts?: {
          /** @description Coupon code that applied this discount */
          code?: string;
          /** Format: double */
          amount?: number;
        }[];
        /** @description List of consignment discounts applied through cart level discounts */
        discounts?: {
          /** @description Discount rule ID that applied this discount */
          id?: string;
        }[];
        /**
         * Format: double
         * @description The shipping cost for this consignment.
         */
        shippingCost?: number;
        /**
         * Format: double
         * @description The handling cost of shipping for this consignment.
         */
        handlingCost?: number;
        lineItemIds?: string[];
      }[];
      /** @description Coupons applied at checkout level. */
      coupons?: definitions['AppliedCoupon'][];
      orderId?: string;
      /**
       * Format: float
       * @description Shipping cost before any discounts are applied.
       */
      shippingCostTotal?: number;
      /** @description Gift wrapping for all items, including or excluding tax. */
      giftWrappingCostTotal?: number;
      /**
       * Format: float
       * @description Handling cost for all consignments including or excluding tax.
       */
      handlingCostTotal?: number;
      /** Format: float */
      taxTotal?: number;
      taxes?: {
        /**
         * @description Name of the tax charged. This is either the system default or the custom name created for the tax.
         * @example Texas Taxes
         */
        name?: string;
        /**
         * Format: float
         * @description Amount of the tax.
         * @example 1.12
         */
        amount?: number;
      }[];
      /**
       * Format: float
       * @description Subtotal of the checkout before applying item level discounts. Tax inclusive based on the store settings.
       */
      subtotal?: number;
      /**
       * Format: float
       * @description The total payable amount, before applying any store credit or gift certificate.
       */
      grandTotal?: number;
      /** @description Applied gift certificate (as a payment method). */
      giftCertificates?: {
        /** Format: double */
        balance?: number;
        code?: string;
        /** Format: date */
        purchaseDate?: string;
        /** Format: double */
        remaining?: number;
        /** Format: double */
        used?: number;
      }[];
      /** @description Time when the cart was created. */
      createdTime?: string;
      /** @description Time when the cart was last updated. */
      updatedTime?: string;
      /** @description Shopper's message provided as details for the order to be created from this cart */
      customerMessage?: string;
      /** @description `grandTotal` subtract the store-credit amount */
      outstandingBalance?: number;
      /** @description `true` value indicates StoreCredit has been applied. */
      isStoreCreditApplied?: boolean;
    };
  };
  /** cartLineItemPut */
  cartLineItemPut: {
    /** Format: double */
    quantity?: number;
    /** Format: double */
    productId?: number;
    /** Format: double */
    variantId?: number;
  };
  /** cartLineItemGiftCertificate_Put */
  cartLineItemGiftCertificate_Put: {
    /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
    theme: string;
    /** Format: double */
    amount: number;
    sender: definitions['contactEntity'];
    recipient: definitions['contactEntity'];
    /** @description Message shown to recipient, as provided by sender. */
    message?: string;
    /** Format: double */
    quantity: number;
  };
  /** Create Consignment Request */
  CreateConsignmentRequest: {
    shippingAddress?: { [key: string]: unknown };
    /** Address Properties */
    address?: {
      firstName?: string;
      lastName?: string;
      email?: string;
      company?: string;
      address1?: string;
      address2?: string;
      city?: string;
      /** @description Represents state or province. */
      stateOrProvince?: string;
      stateOrProvinceCode?: string;
      /** @description ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
      countryCode: string;
      postalCode?: string;
      phone?: string;
      customFields?: {
        fieldId?: string;
        fieldValue?: string;
      }[];
      /** @description Indicates if we should add this address to the customer address book. */
      shouldSaveAddress?: boolean;
    };
    lineItems?: {
      itemId: string;
      /** Format: int32 */
      quantity: number;
    }[];
  };
  /** Gift Certificate Request */
  GiftCertificateRequest: {
    giftCertificateCode?: string;
  };
  /** cart_Put */
  cart_Put: {
    lineItem?: definitions['cartLineItemPut'];
    giftCertificate?: definitions['cartLineItemGiftCertificate_Put'];
  };
  /**
   * Update Consignment Request
   * @description One or more of these three fields are mandatory. Shipping address and line items can be updated in one request. Shipping option ID has to be updated in a separate request, since changing the address or line items can invalidate the previously available shipping options.
   */
  NewUpdateConsignment: {
    shippingAddress?: { [key: string]: unknown };
    /** Address Properties */
    address?: {
      firstName?: string;
      lastName?: string;
      email?: string;
      company?: string;
      address1?: string;
      address2?: string;
      city?: string;
      /** @description Represents state or province. */
      stateOrProvince?: string;
      stateOrProvinceCode?: string;
      /** @description ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
      countryCode: string;
      postalCode?: string;
      phone?: string;
      customFields?: {
        fieldId?: string;
        fieldValue?: string;
      }[];
      /** @description Indicates if we should add this address to the customer address book. */
      shouldSaveAddress?: boolean;
    };
    lineItems?: {
      itemId: string;
      /** Format: int32 */
      quantity: number;
    }[];
    shippingOptionId?: string;
  };
  /**
   * checkoutCart
   * @description A cart contains a collection of items, prices, discounts, etc. It does not contain customer-related data.
   */
  checkoutCart: {
    /**
     * Format: uuid
     * @description Cart ID, provided after creating a cart with a POST.
     */
    id?: string;
    /**
     * Format: int32
     * @description ID of the customer to which the cart belongs.
     */
    customer_id?: number;
    /** @description The cart's email. This is the same email that is used in the billing address */
    email?: string;
    /**
     * Currency
     * @description The currency which prices are displayed (the store default currency).
     */
    currency?: {
      /** @description The currency name. */
      name?: string;
      /** @description ISO-4217 currency code. (See: http://en.wikipedia.org/wiki/ISO_4217.) */
      code?: string;
      /** @description The currency symbol. */
      symbol?: string;
      /**
       * Format: double
       * @description Number of decimal places for the currency. For example, USD currency has two decimal places.
       */
      decimalPlaces?: number;
    };
    /** @description Boolean representing whether tax information is included. */
    isTaxIncluded?: boolean;
    /**
     * Format: double
     * @description Cost of cart’s contents, before applying discounts.
     */
    baseAmount?: number;
    /**
     * Format: double
     * @description Discounted amount.
     */
    discountAmount?: number;
    /**
     * Format: double
     * @description Sum of line-items amounts, minus cart-level discounts and coupons. This amount includes taxes (where applicable).
     */
    cartAmount?: number;
    coupons?: {
      /** @description The coupon ID. */
      id?: string;
      /** @description the coupon code */
      code: string;
      /** @description The coupon title based on different types provided in control panel section */
      displayName?: string;
      /** @description Key name to identify the type of coupon. */
      couponType?: string;
      /**
       * Format: double
       * @description The discounted amount applied within a given context.
       */
      discountedAmount?: number;
    }[];
    discounts?: {
      /** @description The name provided by the merchant. */
      name?: string;
      /**
       * Format: double
       * @description The discounted amount applied within a given context.
       */
      discountedAmount?: number;
    }[];
    lineItems?: {
      physicalItems: {
        /** @description The line-item ID. */
        id?: string;
        /** @description The product is part of a bundle such as a product pick list, then the parentId or the main product id will populate. */
        parentId?: string;
        /**
         * Format: double
         * @description ID of the variant.
         */
        variantId?: number;
        /**
         * Format: double
         * @description ID of the product.
         */
        productId?: number;
        /** @description SKU of the variant. */
        sku?: string;
        /** @description The item's product name. */
        name?: string;
        /** @description The product URL. */
        url?: string;
        /**
         * Format: double
         * @description Quantity of this item.
         */
        quantity: number;
        /** @description Whether the item is taxable. */
        isTaxable?: boolean;
        /** @description URL of an image of this item, accessible on the internet. */
        imageUrl?: string;
        /** @description List of discounts applied to this item, as an array of AppliedDiscount objects. */
        discounts?: {
          /** @description The name provided by the merchant. */
          name?: string;
          /**
           * Format: double
           * @description The discounted amount applied within a given context.
           */
          discountedAmount?: number;
        }[];
        /**
         * Format: double
         * @description The total value of all discounts applied to this item (excluding coupon).
         */
        discountAmount?: number;
        /**
         * Format: double
         * @description The total value of all coupons applied to this item.
         */
        couponAmount?: number;
        /**
         * Format: double
         * @description Item’s list price, as quoted by the manufacturer/distributor.
         */
        listPrice?: number;
        /**
         * Format: double
         * @description Item's price after all discounts are applied. (The final price before tax calculation.)
         */
        salePrice?: number;
        /**
         * Format: double
         * @description Item's list price multiplied by the quantity.
         */
        extendedListPrice?: number;
        /**
         * Format: double
         * @description Item's sale price multiplied by the quantity.
         */
        extendedSalePrice?: number;
        /** @description Item's comparison price */
        comparisonPrice?: number;
        /** @description Item's comparison price multiplied by the quantity. */
        extendedComparisonPrice?: number;
        /** @description the product type - physical or digital */
        type?: string;
        /** @description If the item was added automatically by a promotion such as a coupon or buy one, get one. */
        addedByPromotion?: boolean;
        /** @description Whether this item requires shipping to a physical address. */
        isShippingRequired?: boolean;
        isMutable?: boolean;
        /** Gift Wrapping */
        giftWrapping?: {
          name?: string;
          message?: string;
          /** Format: double */
          amount?: number;
        };
      }[];
      digitalItems: {
        /** @description The line-item ID. */
        id?: string;
        /** @description Bundled items will have their parent's item Id. */
        parentId?: string;
        /**
         * Format: double
         * @description ID of the variant.
         */
        variantId?: number;
        /**
         * Format: double
         * @description ID of the product.
         */
        productId?: number;
        /** @description SKU of the variant. */
        sku?: string;
        /** @description The item's product name. */
        name?: string;
        /** @description The product URL. */
        url?: string;
        /**
         * Format: double
         * @description Quantity of this item.
         */
        quantity: number;
        /** @description Whether the item is taxable. */
        isTaxable?: boolean;
        /** @description URL of an image of this item, accessible on the internet. */
        imageUrl?: string;
        /** @description List of discounts applied to this item, as an array of AppliedDiscount objects. */
        discounts?: {
          /** @description The name provided by the merchant. */
          name?: string;
          /**
           * Format: double
           * @description The discounted amount applied within a given context.
           */
          discountedAmount?: number;
        }[];
        /**
         * Format: double
         * @description The total value of all discounts applied to this item (excluding coupon).
         */
        discountAmount?: number;
        /**
         * Format: double
         * @description The total value of all coupons applied to this item.
         */
        couponAmount?: number;
        /**
         * Format: double
         * @description Item’s list price, as quoted by the manufacturer/distributor.
         */
        listPrice?: number;
        /**
         * Format: double
         * @description Item's price after all discounts are applied. (The final price before tax calculation.)
         */
        salePrice?: number;
        /**
         * Format: double
         * @description Item's list price multiplied by the quantity.
         */
        extendedListPrice?: number;
        /**
         * Format: double
         * @description Item's sale price multiplied by the quantity.
         */
        extendedSalePrice?: number;
        /** @description the product type - physical or digital */
        type?: string;
        /** @description Whether this item requires shipping to a physical address. */
        isShippingRequired?: boolean;
        /** @description URLs to download all product files. */
        downloadFileUrls?: string[];
        /** @description The URL for the combined downloads page. */
        downloadPageUrl?: string;
        /** @description Combined download size, in human-readable style. E.g.: `30MB`. */
        downloadSize?: string;
      }[];
      giftCertificate?: {
        /** @description Gift certificate identifier */
        id?: string;
        /** @description Name of the purchased gift certificate e.g. $20 Gift Certificate */
        name?: string;
        /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
        theme: string;
        /**
         * Format: double
         * @description Value must be between $1.00 and $1,000.00.
         */
        amount: number;
        taxable?: boolean;
        /** Contact Entity */
        sender: {
          name?: string;
          email?: string;
        };
        /** Contact Entity */
        recipient: {
          name?: string;
          email?: string;
        };
        /** @description Limited to 200 characters. */
        message?: string;
        /** @description Explicitly specifying the gift certificate type */
        type?: string;
      }[];
      customItems?: {
        /** @description Id of the custom item */
        id?: string;
        /** @description Custom item sku */
        sku?: string;
        /** @description Item name */
        name?: string;
        quantity?: string;
        /** @description Price of the item. With or without tax depending on your stores set up. */
        listPrice?: string;
      }[];
    }[];
    /** @description Time when the cart was created. */
    createdTime?: string;
    /** @description Time when the cart was last updated. */
    updatedTime?: string;
  };
  /**
   * checkoutGiftCertificates
   * @description Applied gift certificate (as a payment method).
   */
  checkoutGiftCertificates: {
    /** Format: double */
    balance?: number;
    code?: string;
    /** Format: date */
    purchaseDate?: string;
    /** Format: double */
    remaining?: number;
    /** Format: double */
    used?: number;
  }[];
  /** consignmentShippingOption_Base */
  consignmentShippingOption_Base: {
    /** @description Read-only */
    description?: string;
    id?: string;
    /** @description Specified the type of shipping option. Flat rate, UPS, etc., */
    type?: string;
    imageUrl?: string;
    /** Format: double */
    cost?: number;
    /** @description An estimate of the arrival time. */
    transitTime?: string;
  };
}

export interface parameters {
  /** @default consignments.availableShippingOptions */
  include: string;
}

export interface responses {
  Checkout: {
    schema: definitions['checkout_Full'];
  };
}

export interface operations {
  /**
   * Returns a *Checkout*.
   *
   * The cart ID and checkout ID are the same.
   *
   *
   * <!-- theme: info -->
   * > #### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   */
  CheckoutsByCheckoutIdGet: {
    parameters: {
      path: {
        checkoutId: string;
      };
      query: {
        /**
         * * `cart.lineItems.physicalItems.options` - physical options
         * * `cart.lineItems.digitalItems.options` - digital options
         * * `cart.lineItems.physicalItems.categoryNames` - physical categories
         * * `cart.lineItems.digitalItems.categoryNames` - digital categories
         * * `cart.lineItems.customItems.categoryNames` - custom categories
         * * `customer` - customer
         * * `customer.customerGroup` - customer group
         * * `payments` - payments
         * * `promotions` - promotions
         * * `consignments.availableShippingOptions` - shipping options
         */
        include?:
          | 'cart.lineItems.physicalItems.options'
          | 'cart.lineItems.digitalItems.options'
          | 'cart.lineItems.physicalItems.categoryNames'
          | 'cart.lineItems.digitalItems.categoryNames'
          | 'cart.lineItems.customItems.categoryNames'
          | 'customer'
          | 'customer.customerGroup'
          | 'payments'
          | 'promotions'
          | 'consignments.availableShippingOptions';
      };
    };
    responses: {
      200: {
        schema: definitions['checkouts_Resp'];
      };
      /** When a problem arises, returns (for now) a generic response. */
      400: {
        schema: {
          errors?: {
            /** Format: int32 */
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          }[];
        };
      };
    };
  };
  /**
   * Updates *Checkout* customer messages.
   *
   * **Limits**
   *
   * * 2000 character limit
   *
   *
   * <!-- theme: info -->
   * > #### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   */
  CheckoutsByCheckoutIdPut: {
    parameters: {
      path: {
        checkoutId: string;
      };
      body: {
        body: definitions['checkout_Put'];
      };
    };
    responses: {
      200: {
        schema: definitions['checkouts_Resp'];
      };
    };
  };
  /**
   * Updates a *Checkout Line Item*. Updates an existing, single line item in the cart.
   *
   * If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the [Add Cart Line Items](/api-reference/storefront/carts/cart-items/addcartlineitem) endpoint.
   *
   *
   * <!-- theme: info -->
   * > #### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   */
  CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdPut: {
    parameters: {
      path: {
        checkoutId: string;
        cartId: string;
        itemId: string;
      };
      body: {
        body: definitions['cart_Put'];
      };
    };
    responses: {
      200: {
        schema: definitions['checkout_Full'];
      };
    };
  };
  /**
   * Deletes a *Line Item* from the *Cart*.
   *
   *
   * <!-- theme: info -->
   * > #### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   */
  CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdDelete: {
    parameters: {
      path: {
        checkoutId: string;
        cartId: string;
        itemId: string;
      };
    };
    responses: {
      /** NOTE: Discounted line items are re-evaluated on cart actions and may be automatically added back to your cart with a new line item ID to satisfy promotional requirements. */
      200: {
        schema: definitions['checkout_Full'];
      };
    };
  };
  /**
   * Adds a billing address to an existing *Checkout*.
   *
   * **Required Fields**
   * * country_code
   *
   *
   * <!-- theme: info -->
   * > #### Note
   * > * The `email` property is only required if the customer is a guest shopper. Otherwise, it is set automatically.
   * > * Sending `email` property as a payload in POST request triggers the abandoned cart notification process.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   */
  CheckoutsBillingAddressByCheckoutIdPost: {
    parameters: {
      path: {
        checkoutId: string;
      };
      body: {
        body: definitions['address_Base'];
      };
    };
    responses: {
      200: {
        schema: definitions['checkout_Full'];
      };
      /** The email trying to be set for the guest is associated with an account. The customer must sign-in. */
      403: unknown;
      /** Unable to determine if provided email is associated with an account. The customer must sign-in. */
      429: unknown;
    };
  };
  /**
   * Updates an existing billing address on *Checkout*.
   *
   *
   * <!-- theme: info -->
   * > #### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   */
  CheckoutsBillingAddressByCheckoutIdAndAddressIdPut: {
    parameters: {
      path: {
        checkoutId: string;
        addressId: number;
      };
      body: {
        body: definitions['address_Base'];
      };
    };
    responses: {
      200: {
        schema: definitions['checkout_Full'];
      };
      /** The email trying to be set for the guest is associated with an account. The customer must sign-in. */
      403: unknown;
      /** Unable to determine if provided email is associated with an account. The customer must sign-in. */
      429: unknown;
    };
  };
  /**
   * Adds a new *Consignment* to *Checkout*.
   *
   * There are two steps to add a new shipping address and shipping options with line items.
   * 1. Add a new Consignment to Checkout.
   *   * Send a POST to Consignments with each shipping address and line items IDs. Each address can have its own line item IDs.
   *   * As part of the request URL make sure to add `include=consignments.availableShippingOptions` to return the available shipping options based on line items and shipping locations. This will return `availableShippingOptions` in the response.
   * 2. [Update the Consignment](/api-reference/storefront/checkouts/checkout-consignments/checkoutsconsignmentsbycheckoutidandconsignmentidput) with Shipping Options.
   *
   * **Required Query**
   * * consignments.availableShippingOptions
   *
   * **Required Fields**
   * * shipping_address (deprecated) or address
   * * line_items
   *
   * To learn more about creating a Checkout Consignment, see the [Carts and Checkouts Tutorial](/api-docs/storefront/tutorials/carts).
   *
   * <!-- theme: info -->
   * > #### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   */
  CheckoutsConsignmentsByCheckoutIdPost: {
    parameters: {
      path: {
        checkoutId: string;
      };
      body: {
        body: definitions['CreateConsignmentRequest'][];
      };
      query: {
        include?: string;
      };
    };
    responses: {
      200: {
        schema: definitions['checkout_Full'];
      };
    };
  };
  /**
   * Updates an existing consignment. Either the shipping address, one or more line item IDs, or the shipping option ID can be updated in a single call to this endpoint.
   *
   * There are two steps to add a new shipping address and shipping options with line items.
   * 1. Add a new Consignment to Checkout.
   * 2. Update the Consignment with Shipping Options.
   *   * Update each *Consignment* `shippingOptionId` (shipping address and line items) with the `availableShippingOption > id` from Step One.
   *
   * **Required Fields**
   * * shippingOptionId
   *
   * To learn more about creating a Checkout Consignment see [Checkout Consignment API](/api-docs/checkouts/checkout-consignment).
   *
   * <!-- theme: info -->
   * > #### Note
   * > * You cannot pass both an `address` and a `shippingOptionId` because the shipping option may not be available for the new address
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   */
  CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPut: {
    parameters: {
      path: {
        checkoutId: string;
        consignmentId: string;
      };
      body: {
        body: definitions['NewUpdateConsignment'];
      };
      query: {
        include?: string;
      };
    };
    responses: {
      200: {
        schema: definitions['checkout_Full'];
      };
    };
  };
  /**
   * Removes an existing *Consignment* from *Checkout*.
   *
   * <!-- theme: info -->
   * > #### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   */
  CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDelete: {
    parameters: {
      path: {
        checkoutId: string;
        consignmentId: string;
      };
    };
    responses: {
      200: {
        schema: definitions['checkout_Full'];
      };
    };
  };
  /**
   * Adds a *Gift Certificate Code* to *Checkout*.
   *
   *
   * <!-- theme: info -->
   * > #### Note
   * > * *Gift Certificates* are treated as a payment methods.
   * > * You are not able to purchase a gift certificate with a gift certificate.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * The rate limit is 20/hour (only for unique gift-certificate codes).
   */
  CheckoutsGiftCertificatesByCheckoutIdPost: {
    parameters: {
      path: {
        checkoutId: string;
      };
      body: {
        body: definitions['GiftCertificateRequest'];
      };
    };
    responses: {
      200: {
        schema: definitions['checkout_Full'];
      };
      /** Gift certificate code not found */
      404: {
        schema: { [key: string]: unknown };
      };
    };
  };
  /**
   * Deletes an existing *Gift Certificate*.
   *
   * This removes the *Gift Certificate* payment method.
   *
   * <!-- theme: info -->
   * > #### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   */
  CheckoutsGiftCertificatesByCheckoutIdAndGiftCertificateCodeDelete: {
    parameters: {
      path: {
        checkoutId: string;
        giftCertificateCode: string;
      };
    };
    responses: {
      200: {
        schema: definitions['checkout_Full'];
      };
    };
  };
  /**
   * Adds a *Coupon Code* to *Checkout*.
   *
   * **Required Fields**
   * * couponCode
   *
   * <!-- theme: info -->
   * > #### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   */
  CheckoutsCouponsByCheckoutIdPost: {
    parameters: {
      path: {
        checkoutId: string;
      };
      body: {
        body: {
          couponCode?: string;
        };
      };
    };
    responses: {
      200: {
        schema: definitions['checkout_Full'];
      };
    };
  };
  /**
   * Deletes a *Coupon Code* from *Checkout*.
   *
   * <!-- theme: info -->
   * > #### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   */
  CheckoutsCouponsByCheckoutIdAndCouponCodeDelete: {
    parameters: {
      path: {
        checkoutId: string;
        couponCode: string;
      };
    };
    responses: {
      200: {
        schema: definitions['checkout_Full'];
      };
    };
  };
  /**
   * Applies any available store credit to a checkout. As on the storefront, all available store credit will be used (up to the value of the order) and no amount need be specified.
   *
   * <!-- theme: info -->
   * > #### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   */
  CheckoutStoreCreditAdd: {
    parameters: {
      path: {
        checkoutId: string;
      };
    };
    responses: {
      200: {
        schema: definitions['checkouts_Resp'];
      };
    };
  };
  /**
   * Removes store credit from a checkout.
   *
   * <!-- theme: info -->
   * > #### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   */
  CheckoutsStoreCreditRemove: {
    parameters: {
      path: {
        checkoutId: string;
      };
    };
    responses: {
      200: {
        schema: { [key: string]: unknown };
      };
    };
  };
  /**
   * Verifies if checkout is created by human.
   *
   * <!-- theme: info -->
   * > #### Note
   * > The Send a Test Request feature is not currently supported for this endpoint.
   */
  checkoutSpamProtection: {
    parameters: {
      path: {
        checkoutId: string;
      };
      body: {
        body: definitions['SpamProtectionRequest'];
      };
    };
    responses: {
      /** Returns Checkout Object. */
      200: {
        schema: definitions['checkout_Full'];
      };
    };
  };
}

export interface external {}
