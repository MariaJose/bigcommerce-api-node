/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v3/customers/subscribers': {
    /** Returns a list of *Subscribers*. Optional filter parameters can be passed in. */
    get: operations['getSubscribers'];
    /**
     * Creates a *Subscriber*.
     *
     * **Required Fields**
     * * email
     *
     * **Read Only Fields**
     * * id
     */
    post: operations['createSubscriber'];
    /** By default, it deletes all *Subscribers*. A filter should be added to avoid deleting all subscribers in a store. */
    delete: operations['deleteSubscribers'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v3/customers/subscribers/{subscriber_id}': {
    /** Returns a *Subscriber*. */
    get: operations['getSubscriberById'];
    /**
     * Updates a *Subscriber*.
     *
     * **Read Only Fields**
     * * id
     */
    put: operations['updateSubscriber'];
    /** Deletes a *Subscriber*. */
    delete: operations['deleteSubscriberById'];
    parameters: {
      path: {
        /** The ID of the `Subscriber` requested. */
        subscriber_id: number;
        store_hash: string;
      };
    };
  };
}

export interface definitions {
  /**
   * subscriber_Full
   * @description Full subscriber object returned in responses.
   */
  subscriber_Full: definitions['subscriber_Base'] & {
    /** @description The unique numeric ID of the subscriber; increments sequentially. */
    id?: number;
    /**
     * Format: date-time
     * @description The date on which the subscriber was modified.
     */
    date_modified?: string;
    /**
     * Format: date-time
     * @description The date of which the subscriber was created.
     */
    date_created?: string;
  };
  /**
   * subscriber_Base
   * @description Common Subscriber properties.
   */
  subscriber_Base: {
    /** @description The email of the subscriber. Must be unique. */
    email?: string;
    /** @description The first name of the subscriber. */
    first_name?: string;
    /** @description The last name of the subscriber. */
    last_name?: string;
    /** @description The source of the subscriber. Values are: `storefront`, `order`, or `custom`. */
    source?: string;
    /** @description The ID of the source order, if source was an order. */
    order_id?: number;
    /** @description The channel ID where the subscriber was created. */
    channel_id?: number;
  };
  Subscriber: {
    /** @description The unique numeric ID of the subscriber; increments sequentially. */
    id?: number;
    /** @description The email of the subscriber. Must be unique. */
    email?: string;
    /** @description The first name of the subscriber. */
    first_name?: string;
    /** @description The last name of the subscriber. */
    last_name?: string;
    /** @description The source of the subscriber. Values are: `storefront`, `order`, or `custom`. */
    source?: string;
    /** @description The ID of the source order, if source was an order. */
    order_id?: number;
  } & {
    /**
     * Format: date-time
     * @description The date on which the subscriber was modified.
     */
    date_modified?: string;
    /**
     * Format: date-time
     * @description The date of which the subscriber was created.
     */
    date_created?: string;
  };
  /**
   * subscriber_Post
   * @description The model for a POST to create a subscriber.
   */
  subscriber_Post: definitions['subscriber_Base'];
  /**
   * subscriber_Put
   * @description The model for a PUT to update a subscriber.
   */
  subscriber_Put: definitions['subscriber_Base'];
  /**
   * Collection Meta
   * @description Data about the response, including pagination and collection totals.
   */
  CollectionMeta: {
    /**
     * Pagination
     * @description Data about the response, including pagination and collection totals.
     */
    pagination?: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 36
       */
      total?: number;
      /**
       * @description Total number of items in the collection response.
       *
       * @example 36
       */
      count?: number;
      /**
       * @description The amount of items returned in the collection per page, controlled by the limit parameter.
       *
       * @example 50
       */
      per_page?: number;
      /**
       * @description The page you are currently on within the collection.
       *
       * @example 1
       */
      current_page?: number;
      /**
       * @description The total number of pages in the collection.
       *
       * @example 1
       */
      total_pages?: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /**
         * @description Link to the current page returned in the response.
         *
         * @example ?page=1&limit=50
         */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
  };
  /**
   * Pagination
   * @description Data about the response, including pagination and collection totals.
   */
  Pagination: {
    /**
     * @description Total number of items in the result set.
     *
     * @example 36
     */
    total?: number;
    /**
     * @description Total number of items in the collection response.
     *
     * @example 36
     */
    count?: number;
    /**
     * @description The amount of items returned in the collection per page, controlled by the limit parameter.
     *
     * @example 50
     */
    per_page?: number;
    /**
     * @description The page you are currently on within the collection.
     *
     * @example 1
     */
    current_page?: number;
    /**
     * @description The total number of pages in the collection.
     *
     * @example 1
     */
    total_pages?: number;
    /** @description Pagination links for the previous and next parts of the whole collection. */
    links?: {
      /** @description Link to the previous page returned in the response. */
      previous?: string;
      /**
       * @description Link to the current page returned in the response.
       *
       * @example ?page=1&limit=50
       */
      current?: string;
      /** @description Link to the next page returned in the response. */
      next?: string;
    };
  };
  /**
   * Meta
   * @description Empty meta object; may be used later.
   */
  Meta: { [key: string]: unknown };
  /** Error Response */
  ErrorResponse: {
    /** @description The HTTP status code. */
    status?: number;
    /** @description The error title describing the particular error. */
    title?: string;
    type?: string;
    instance?: string;
  } & {
    /** Detailed Errors */
    errors?: {
      additionalProperties?: string;
    };
  };
  /**
   * Base Error
   * @description Error payload for the BigCommerce API.
   */
  BaseError: {
    /** @description The HTTP status code. */
    status?: number;
    /** @description The error title describing the particular error. */
    title?: string;
    type?: string;
    instance?: string;
  };
  /**
   * Not Found
   * @description Error payload for the BigCommerce API.
   */
  NotFound: {
    /** @description 404 HTTP status code. */
    status?: number;
    /** @description The error title describing the particular error. */
    title?: string;
    type?: string;
    instance?: string;
  };
  /** Detailed Errors */
  DetailedErrors: {
    additionalProperties?: string;
  };
}

export interface parameters {
  /** @description Filter items by email. */
  FilterEmailParam: string;
  /** @description Filter items by first_name. */
  FilterFirstNameParam: string;
  /** @description Filter items by last_name. */
  FilterLastNameParam: string;
  /** @description Filter items by source. */
  FilterSourceParam: string;
  /** @description Filter items by order_id. */
  FilterOrderIdParam: number;
  /**
   * Format: date-time
   * @description Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15`
   */
  FilterDateModifiedParam: string;
  /**
   * Format: date-time
   * @description Filter items by date_created.
   */
  FilterDateCreatedParam: string;
  /** @description Specifies the page number in a limited (paginated) list of products. */
  PageParam: number;
  /** @description Controls the number of items per page in a limited (paginated) list of products. */
  LimitParam: number;
  /** @description Scripts field name to sort by. */
  ScriptsSortKeyParam: 'name' | 'description' | 'date_created' | 'date_modified';
  /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
  DirectionParam: 'asc' | 'desc';
  /** @description The ID of the `Subscriber` requested. */
  SubscriberIdParam: number;
  /** @default application/json */
  Accept: string;
  /** @default application/json */
  'Content-Type': string;
}

export interface responses {
  subrscriberCollection_Resp: {
    schema: {
      data?: definitions['subscriber_Full'][];
      meta?: definitions['CollectionMeta'];
    };
  };
  subscriber_Resp: {
    schema: {
      data?: definitions['subscriber_Full'];
      /**
       * Meta
       * @description Empty meta object; may be used later.
       */
      meta?: { [key: string]: unknown };
    };
  };
}

export interface operations {
  /** Returns a list of *Subscribers*. Optional filter parameters can be passed in. */
  getSubscribers: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** Filter items by email. */
        email?: string;
        /** Filter items by first_name. */
        first_name?: string;
        /** Filter items by last_name. */
        last_name?: string;
        /** Filter items by source. */
        source?: string;
        /** Filter items by order_id. */
        order_id?: number;
        /** Filter items by date_created. */
        date_created?: string;
        /** Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
        date_modified?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Filter items by id. */
        id?: number;
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      200: responses['subrscriberCollection_Resp'];
    };
  };
  /**
   * Creates a *Subscriber*.
   *
   * **Required Fields**
   * * email
   *
   * **Read Only Fields**
   * * id
   */
  createSubscriber: {
    parameters: {
      path: {
        store_hash: string;
      };
      body: {
        subscriber: definitions['subscriber_Post'];
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      200: responses['subscriber_Resp'];
      /** The `Subscriber` was in conflict with another subscriber. This is the result of duplicate unique values, such as email. */
      409: {
        schema: {
          /** @description The HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
        } & {
          /** Detailed Errors */
          errors?: {
            additionalProperties?: string;
          };
        };
      };
      /** The `Subscriber` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        schema: {
          /** @description The HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
        } & {
          /** Detailed Errors */
          errors?: {
            additionalProperties?: string;
          };
        };
      };
    };
  };
  /** By default, it deletes all *Subscribers*. A filter should be added to avoid deleting all subscribers in a store. */
  deleteSubscribers: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** Filter items by email. */
        email?: string;
        /** Filter items by first_name. */
        first_name?: string;
        /** Filter items by last_name. */
        last_name?: string;
        /** Filter items by source. */
        source?: string;
        /** Filter items by order_id. */
        order_id?: number;
        /** Filter items by date_created. */
        date_created?: string;
        /** Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
        date_modified?: string;
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a *Subscriber*. */
  getSubscriberById: {
    parameters: {
      path: {
        /** The ID of the `Subscriber` requested. */
        subscriber_id: number;
        store_hash: string;
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      200: responses['subscriber_Resp'];
      /** The resource was not found. */
      404: {
        schema: {
          /** @description 404 HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
        };
      };
    };
  };
  /**
   * Updates a *Subscriber*.
   *
   * **Read Only Fields**
   * * id
   */
  updateSubscriber: {
    parameters: {
      path: {
        /** The ID of the `Subscriber` requested. */
        subscriber_id: number;
        store_hash: string;
      };
      body: {
        subscriber: definitions['subscriber_Put'];
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      200: responses['subscriber_Resp'];
      /** The resource was not found. */
      404: {
        schema: {
          /** @description 404 HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
        };
      };
      /** The `Subscriber` was in conflict with another subscriber. This is the result of duplicate unique values, such as `email`. */
      409: {
        schema: {
          /** @description The HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
        } & {
          /** Detailed Errors */
          errors?: {
            additionalProperties?: string;
          };
        };
      };
      /** The `Subscriber` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        schema: {
          /** @description The HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
        } & {
          /** Detailed Errors */
          errors?: {
            additionalProperties?: string;
          };
        };
      };
    };
  };
  /** Deletes a *Subscriber*. */
  deleteSubscriberById: {
    parameters: {
      path: {
        /** The ID of the `Subscriber` requested. */
        subscriber_id: number;
        store_hash: string;
      };
      header: {
        'Content-Type'?: string;
        Accept?: string;
      };
    };
    responses: {
      204: never;
    };
  };
}

export interface external {}
