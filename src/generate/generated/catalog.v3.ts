/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v3/catalog/products': {
    /** Returns a list of **Products**. Optional filter parameters can be passed in. */
    get: operations['getProducts'];
    /**
     * Updates products in batches. Batches are limited to 10 products.
     *
     * **Required Fields**
     * * `id` - product `id` is required for batch updates to products.
     *
     * **Read-Only Fields**
     * - `id`
     * - `date_created`
     * - `date_modified`
     * - `calculated_price`
     * - `base_variant_id`
     */
    put: operations['updateProducts'];
    /**
     * Creates a *Product*. Only one product can be created at a time.
     *
     * **Required Fields:**
     * - `name`
     * - `type`
     * - `weight`
     * - `price`
     *
     * **Read-Only Fields**
     * - `id`
     * - `date_created`
     * - `date_modified`
     * - `calculated_price`
     * - `base_variant_id`
     *
     * **Limits**
     * - 250 characters product name length.
     *
     * **Usage Notes**
     * * `POST` requests to `/products` accepts a single `video` object; to send an array of video objects, see: `/products/{product_id}/videos`.
     */
    post: operations['createProduct'];
    /**
     * To delete *Product* objects, you must include a filter. This prevents inadvertently deleting all *Product* objects in a store.
     *
     * <!-- theme: info -->
     * > The maximum number of products you can delete at one time is 250.
     *
     * **Example**:
     * To delete products with the id's of 1,2 and 3, use `DELETE /v3/catalog/products?id:in=1,2,3`.
     */
    delete: operations['deleteProducts'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}': {
    /** Returns a single *Product*. Optional parameters can be passed in. */
    get: operations['getProductById'];
    /**
     * Updates a *Product*.
     *
     * **Read-Only Fields**
     * - id
     * - date_created
     * - date_modified
     * - calculated_price
     * - base_variant_id
     */
    put: operations['updateProduct'];
    /** Deletes a *Product*. */
    delete: operations['deleteProductById'];
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/images': {
    /** Returns a list of *Product Images*. Optional parameters can be passed in. */
    get: operations['getProductImages'];
    /**
     * Creates a *Product Image*.
     *
     *  **Required Fields**
     * - `image_file`, or
     * - `image_url`
     *
     * **Usage Notes**
     * - `image_url` - `255` character limit
     * - For file uploads, use the `multipart/form-data` media type
     * - Only one image at a time can be created
     * - Supported image file types are BMP, GIF, JPEG, PNG, WBMP, XBM, and WEBP.
     */
    post: operations['createProductImage'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/images/{image_id}': {
    /** Returns a single *Product Image*. Optional parameters can be passed in. */
    get: operations['getProductImageById'];
    /**
     * Updates a *Product Image*.
     *
     * **Usage Notes**
     * - `image_url` - `255` character limit
     * - For file uploads, send a POST request using the `multipart/form-data` media type
     */
    put: operations['updateProductImage'];
    /** Deletes a *Product Image*. */
    delete: operations['deleteProductImage'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** The ID of the `Image` that is being operated on. */
        image_id: components['parameters']['ImageIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/videos': {
    /** Returns a list of *Product Videos*. Optional parameters can be passed in. */
    get: operations['getProductVideos'];
    /**
     * Creates a *Product Video*.
     *
     * **Required Fields**
     * * video_id - Example: https://www.youtube.com/watch?v=`R12345677`
     *
     * **Read-Only Fields**
     * * id
     *
     * Publicly accessible URLs are valid parameters.
     * Videos must be loaded through YouTube at this time.
     */
    post: operations['createProductVideo'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/videos/{id}': {
    /** Returns a single *Product Video*. Optional parameters can be passed in. */
    get: operations['getProductVideoById'];
    /**
     * Updates a *Product Video.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     */
    put: operations['updateProductVideo'];
    /** Deletes a *Product Video*. */
    delete: operations['deleteProductVideo'];
    parameters: {
      path: {
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** The BigCommerce ID of the `Video` */
        id: components['parameters']['VideoIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/variants': {
    /** Returns a list of product *Variants*. Optional parameters can be passed in. */
    get: operations['getVariantsByProductId'];
    /**
     * Creates a *Product Variant*.
     *
     * **Required Fields**
     * * sku
     * * option_values
     *
     * **Read-Only Fields**
     * * id
     *
     * **Limits**
     * * 600 SKUs per product limit.
     * * 255 characters SKU length limit.
     *
     * Variants need to be created one at a time using this endpoint. To use a variant array and create products and variants in the same call use the [Create Products](/api-reference/catalog/catalog-api/products/createproduct) during the initial product creation.
     */
    post: operations['createVariant'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/variants/{variant_id}': {
    /** Returns a single product *Variant*. Optional parameters can be passed in. */
    get: operations['getVariantById'];
    /** Updates a product *Variant*. */
    put: operations['updateVariant'];
    /** Deletes a product *Variant*. */
    delete: operations['deleteVariantById'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: components['parameters']['VariantIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/variants/{variant_id}/metafields': {
    /** Returns a list of product variant *Metafields*. Optional parameters can be passed in. */
    get: operations['getVariantMetafieldsByProductIdAndVariantId'];
    /**
     * Creates a product variant *Metafield*.
     *
     * **Required Fields:**
     * * permission_set
     * * namespace
     * * key
     * * value
     *
     * **Read-Only Fields**
     * * id
     *
     * **Note:** The max number of metafields allowed on each product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    post: operations['createVariantMetafield'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: components['parameters']['VariantIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}': {
    /** Returns a single product variant *Metafield*. Optional parameters can be passed in. */
    get: operations['getVariantMetafieldByProductIdAndVariantId'];
    /**
     * Updates a product variant *Metafield*.
     *
     * **Required Fields:**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified by the app (API credentials) that created the metafield:
     * 	* namespace
     * 	* key
     * 	* permission_set
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
     */
    put: operations['updateVariantMetafield'];
    /** Deletes a product variant *Metafield*. */
    delete: operations['deleteVariantMetafieldById'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: components['parameters']['VariantIdParam'];
        /** The ID of the `Metafield`. */
        metafield_id: components['parameters']['MetafieldIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/variants/{variant_id}/image': {
    /**
     * Creates a *Variant Image*.
     *
     * The image will show on the storefront when the value is selected.
     *
     *  **Required Fields**
     * - image_file: Form posts. Files larger than 1 MB are not accepted
     * - image_url: Any publicly available URL
     */
    post: operations['createVariantImage'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: components['parameters']['VariantIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/options': {
    /** Returns a list of product *Variant Options*. Optional parameters can be passed in. */
    get: operations['getOptions'];
    /**
     * Creates a *Variant Option*.
     *
     * **Required Fields**
     * * display_name
     * * type
     * * option_values
     *
     * **Read-Only Fields**
     * * id
     *
     * **Limits**
     * * 255 characters option name length.
     *
     * **Notes**
     *
     * * Only one variant option at a time can be created; individual variant options will contain an array of multiple values.
     * * There are several examples listed below that create options, but the SKU’s are not updated and they are not a variant on the product. Variant SKUs must be created with a separate request.
     * * Variant options will show on the storefront as an option that can be selected by the customer. A request like this could be used to add new choices to a variant that has already been created.
     * * If more than one variant needs to be created use the [Create a Product](/api-reference/catalog/catalog-api/products/createproduct) endpoint.
     */
    post: operations['createOption'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/options/{option_id}': {
    /** Returns a single *Variant Option*. Optional parameters can be passed in. */
    get: operations['getOptionById'];
    /**
     * Updates a *Variant Option*.
     *
     * **Read-Only Fields**
     * * id
     */
    put: operations['updateOption'];
    /** Deletes a *Variant Option*. */
    delete: operations['deleteOptionById'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** The ID of the `Option`. */
        option_id: components['parameters']['OptionIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/options/{option_id}/values': {
    /** Returns a list of all *Variant Option Values*. Optional parameters can be passed in. */
    get: operations['getOptionValues'];
    /**
     * Creates a *Variant Option Value*.
     *
     * **Required Fields**
     * * label
     * * sort_order
     *
     * **Read-Only Fields**
     * * id
     *
     * **Limits**
     * * 250 option values per option limit.
     */
    post: operations['createOptionValue'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** The ID of the `Option`. */
        option_id: components['parameters']['OptionIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/options/{option_id}/values/{value_id}': {
    /** Returns a single *Variant Option Value*. Optional parameters can be passed in. */
    get: operations['getOptionValueById'];
    /**
     * Updates a *Variant Option Value*.
     *
     * **Read-Only Fields**
     * * id
     */
    put: operations['updateOptionValue'];
    /** Deletes a *Variant Option Value*. */
    delete: operations['deleteOptionValueById'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** The ID of the `Option`. */
        option_id: components['parameters']['OptionIdParam'];
        /** The ID of the `Modifier/Option Value`. */
        value_id: components['parameters']['ValueIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers': {
    /** Returns a list of all *Product Modifiers*. Optional parameters can be passed in. */
    get: operations['getModifiers'];
    /**
     * Creates a *Product Modifier*.
     *
     * **Required Fields**
     * * `required`
     * * `display_name`
     * * `type`
     *
     * **Read-Only Fields**
     * * `id`
     */
    post: operations['createModifier'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers/{modifier_id}': {
    /** Returns a single *Product Modifier*. Optional parameters can be passed in. */
    get: operations['getModifierById'];
    /** Updates a *Product Modifier*. */
    put: operations['updateModifier'];
    /** Deletes a *Product Modifier*. */
    delete: operations['deleteModifierById'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** The ID of the `Modifier`. */
        modifier_id: components['parameters']['ModifierIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values': {
    /** Returns a list of all product *Modifier Values*. Optional parameters can be passed in. */
    get: operations['getModifierValues'];
    /**
     * Creates a *Modifier Value*.
     *
     * **Required Fields**
     * * label
     * * sort_order
     *
     * **Read-Only Fields**
     * * id
     */
    post: operations['createModifierValue'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** The ID of the `Modifier`. */
        modifier_id: components['parameters']['ModifierIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}': {
    /** Returns a single *Modifier Value*. Optional parameters can be passed in. */
    get: operations['getModifierValueById'];
    /**
     * Updates a *Modifier Value*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     */
    put: operations['updateModifierValue'];
    /** Deletes a *Modifier Value*. */
    delete: operations['deleteModifierValueById'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** The ID of the `Modifier`. */
        modifier_id: components['parameters']['ModifierIdParam'];
        /** The ID of the `Modifier/Option Value`. */
        value_id: components['parameters']['ValueIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image': {
    /**
     * Creates a *Modifier Image*.
     *
     * The image will show on the storefront when the value is selected.
     *
     *  **Required Fields**
     * - image_file: Form posts are the only accepted upload option.
     */
    post: operations['createModifierImage'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** The ID of the `Modifier`. */
        modifier_id: components['parameters']['ModifierIdParam'];
        /** The ID of the `Modifier/Option Value`. */
        value_id: components['parameters']['ValueIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/complex-rules': {
    /** Returns a list of all product *Complex Rules*. Optional parameters may be passed in. */
    get: operations['getComplexRules'];
    /**
     * Creates a product *Complex Rule*.
     *
     * **Required Fields**
     * - modifier_id
     * - modifier_value_id
     * - modifier_value_id
     * - variant_id
     *
     * **Read-Only Fields**
     * - complex_rule_id
     * - conditions_id
     * - rule_id
     * - combination_id
     * - id
     */
    post: operations['createComplexRule'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/complex-rules/{complex_rule_id}': {
    /** Returns a single *Complex Rule*. Optional parameters can be passed in. */
    get: operations['getComplexRuleById'];
    /**
     * Updates a *Complex Rule*.
     *
     * **Required Fields**:
     * - none
     *
     * **Read-Only Fields**:
     * - complex_rule_id
     * - conditions_id
     * - rule_id
     * - combination_id
     * - id
     */
    put: operations['updateComplexRule'];
    /** Deletes a product *Complex Rule*. */
    delete: operations['deleteComplexRuleById'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** The ID of the `ComplexRule`. */
        complex_rule_id: components['parameters']['ComplexRuleIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/custom-fields': {
    /** Returns a list of product *Custom Fields*. Optional parameters can be passed in. */
    get: operations['getCustomFields'];
    /**
     * Creates a *Custom Field*.
     *
     * **Required Fields:**
     * - name
     * - value
     *
     * **Read-Only:**
     * - id
     *
     * **Limits**
     * - 200 custom fields per product limit.
     * - 255 characters per custom field limit.
     */
    post: operations['createCustomField'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/custom-fields/{custom_field_id}': {
    /** Returns a single *Custom Field*. Optional parameters can be passed in. */
    get: operations['getCustomFieldById'];
    /**
     * Updates a *Custom Field*.
     *
     * **Required Fields**
     * - none
     *
     * **Read-Only**
     * - id
     */
    put: operations['updateCustomField'];
    /** Deletes a product *Custom Field*. */
    delete: operations['deleteCustomFieldById'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** The ID of the `CustomField`. */
        custom_field_id: components['parameters']['CustomFieldIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/bulk-pricing-rules': {
    /** Returns a list of *Bulk Pricing Rules*. Optional parameters can be passed in. */
    get: operations['getBulkPricingRules'];
    /**
     * Creates a *Bulk Pricing Rule*.
     *
     * **Required Fields**
     * - quantity_min
     * - quantity_max
     * - type
     * - amount
     *
     * **Read-Only Fields**
     * - id
     *
     * **Limits**
     * - 50 bulk pricing rule per product limit.
     */
    post: operations['createBulkPricingRule'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}': {
    /** Returns a single *Bulk Pricing Rule*. Optional parameters can be passed in. */
    get: operations['getBulkPricingRuleById'];
    /**
     * Updates a *Bulk Pricing Rule*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * - id
     */
    put: operations['updateBulkPricingRule'];
    /** Deletes a *Bulk Pricing Rule*. */
    delete: operations['deleteBulkPricingRuleById'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** The ID of the `BulkPricingRule`. */
        bulk_pricing_rule_id: components['parameters']['BulkPricingRuleIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/metafields': {
    /** Returns a list of *Product Metafields*. Optional parameters can be passed in. */
    get: operations['getProductMetafieldsByProductId'];
    /**
     * Creates a *Product Metafield*.
     *
     * **Required Fields:**
     * * permission_set
     * * namespace
     * * key
     * * value
     *
     * **Read-Only Fields**
     * * id
     *
     * **Note:** The max number of metafields allowed on each product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    post: operations['createProductMetafield'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/metafields/{metafield_id}': {
    /** Returns a single *Product Metafield*. Optional parameters can be passed in. */
    get: operations['getProductMetafieldByProductId'];
    /**
     * Updates a *Product Metafield*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified using the API account that created the metafield:
     * 	* `namespace`
     * 	* `key`
     * 	* `permission_set`
     * 	* `value`
     *
     * **Usage Notes**
     * * Attempting to modify the `namespace`, `key`, `permission_set`, or `value` field using an API account different from the one used to create those metafields will result in a `403` error message.
     */
    put: operations['updateProductMetafield'];
    /** Deletes a *Product Metafield*. */
    delete: operations['deleteProductMetafieldById'];
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** The ID of the `Metafield`. */
        metafield_id: components['parameters']['MetafieldIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/reviews': {
    /** Returns a list of all *Product Reviews*. Optional parameters can be passed in. */
    get: operations['getProductReviews'];
    /**
     * Creates a *Product Review*.
     *
     * **Required Fields**
     * - title
     * - date_reviewed
     *
     * **Read-Only Fields**
     * * id
     */
    post: operations['createProductReview'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/{product_id}/reviews/{review_id}': {
    /** Returns a single *Product Review*. Optional parameters maybe passed in. */
    get: operations['getProductReviewById'];
    /**
     * Updates a *Product Review*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     */
    put: operations['updateProductReview'];
    /** Deletes a *Product Review*. */
    delete: operations['deleteProductReview'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Product` to which the resource belongs. */
        product_id: components['parameters']['ProductIdParam'];
        /** The ID of the `review` that is being operated on. */
        review_id: components['parameters']['ReviewIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/categories': {
    /** Returns a list of *Categories*. Optional filter parameters can be passed in. */
    get: operations['getCategories'];
    /**
     * Creates a *Category*.
     *
     * Use this endpoint when an API only works with categories of a default BigCommerce storefront (`channel_id=1`).
     *
     * Use the [Create Categories](/api-reference/store-management/catalog/categories-batch/createcategories) endpoint when an API works with categories across different category trees that belong to different storefront channels.
     *
     * **Required Fields**:
     * - `parent_id`:
     * 	- To create a child category, set the `parent_id` to the parent category.
     * 	- To create a top level category, set the `parent_id` to `0`.
     * - `name`
     *
     * **Read-Only Fields**:
     * - `id`
     *
     * **Limits**:
     * - 16,000 categories per store limit.
     * - 1,000 categories per product limit.
     * - 50 characters category name length.
     * - 8 levels of category depth limit.
     * - 65,642 characters category description length limit.
     */
    post: operations['createCategory'];
    /**
     * Deletes *Category* objects. At least one filter parameter is required to perform the `DELETE` operation.
     *
     * **Usage Notes**
     *
     * - Sending a `DELETE`request without specifying a filter parameter will result in a `422` error.
     * - Sending a `DELETE` request for a category that contains products will result in a `422` error. Move products to a new category by sending a `PUT` request to the `/catalog/products/{product_id}` endpoint before deleting a category.
     */
    delete: operations['deleteCategories'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/categories/{category_id}': {
    /** Returns a single *Category*. Optional parameters can be passed in. */
    get: operations['getCategoryById'];
    /**
     * Updates a *Category*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * - id
     */
    put: operations['updateCategory'];
    /** Deletes a *Category*. */
    delete: operations['deleteCategoryById'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Category` to which the resource belongs. */
        category_id: components['parameters']['CategoryIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/categories/{category_id}/metafields': {
    /** Returns a list of *Metafields* on a *Category*. Optional filter parameters can be passed in. */
    get: operations['getCategoryMetafieldsByCategoryId'];
    /**
     * Creates a *Category Metafield*.
     *
     * **Required Fields:**
     * - permission_set
     * - namespace
     * - key
     * - value
     *
     * **Read-Only Fields**
     * - id
     *
     * **Note:** The max number of metafields allowed on each product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    post: operations['createCategoryMetafield'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Category` to which the resource belongs. */
        category_id: components['parameters']['CategoryIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/categories/{category_id}/metafields/{metafield_id}': {
    /** Returns a single *Category Metafield*. Optional parameters can be passed in. */
    get: operations['getCategoryMetafieldByCategoryId'];
    /**
     * Updates a *Category Metafield*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified by the app (API credentials) that created the metafield:
     * 	* namespace
     * 	* key
     * 	* permission_set
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
     */
    put: operations['updateCategoryMetafield'];
    /** Deletes a *Category Metafield*. */
    delete: operations['deleteCategoryMetafieldById'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Category` to which the resource belongs. */
        category_id: components['parameters']['CategoryIdParam'];
        /** The ID of the `Metafield`. */
        metafield_id: components['parameters']['MetafieldIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/categories/{category_id}/image': {
    /**
     * Create a *Category Image*.
     *
     *  **Required Fields**
     * - image_file: Form posts are the only accepted upload option.
     *
     * Only one image at a time can be created.
     * Limit image size to 1MB.
     * To update a *Category Image*, use the [PUT Categories](/api-reference/catalog/catalog-api/category/updatecategory) and an `image_url`.
     */
    post: operations['createCategoryImage'];
    /** Deletes a *Cateogory Image*. */
    delete: operations['deleteCategoryImage'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Category` to which the resource belongs. */
        category_id: components['parameters']['CategoryIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/brands': {
    /** Returns a list of *Brands*. Optional filter parameters can be passed in. */
    get: operations['getBrands'];
    /**
     * Creates a *Brand*.
     *
     * **Required Fields**
     * - name
     *
     * **Read-Only Fields**
     * - id
     *
     * **Limits**
     * - 30,000 brands per store limit
     */
    post: operations['createBrand'];
    /** By default, it deletes all *Brand* objects. A filter should be added to avoid deleting all *Brand* objects in a store. */
    delete: operations['deleteBrands'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/brands/{brand_id}': {
    /** Returns a single *Brand*. Optional filter parameters can be passed in. */
    get: operations['getBrandById'];
    /**
     * Updates a *Brand*.
     *
     * **Required Fields**
     * - None
     *
     * **Read-Only Fields**
     * - id
     *
     * To update a *Brand Image*, send a request with an `image_url`.
     */
    put: operations['updateBrand'];
    /** Deletes a *Brand*. */
    delete: operations['deleteBrandById'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Brand` to which the resource belongs. */
        brand_id: components['parameters']['BrandIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/brands/{brand_id}/metafields': {
    /** Returns a list of *Brand Metafields*. Optional filter parameters can be passed in. */
    get: operations['getBrandMetafieldsByBrandId'];
    /**
     * Creates a *Brand Metafield*.
     *
     * **Required Fields**
     * - permission_set
     * - namespace
     * - key
     * - value
     *
     * **Read-Only Fields**
     * - id
     *
     * **Note:** The max number of metafields allowed on each product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    post: operations['createBrandMetafield'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Brand` to which the resource belongs. */
        brand_id: components['parameters']['BrandIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/brands/{brand_id}/metafields/{metafield_id}': {
    /** Returns a *Brand Metafield*. Optional filter parameters can be passed in. */
    get: operations['getBrandMetafieldByBrandId'];
    /**
     * Updates a *Brand Metafield*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified by the app (API credentials) that created the metafield:
     * 	* namespace
     * 	* key
     * 	* permission_set
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
     * * The max number of metafields allowed on each product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    put: operations['updateBrandMetafield'];
    /** Deletes a *Brand Metafield*. */
    delete: operations['deleteBrandMetafieldById'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Brand` to which the resource belongs. */
        brand_id: components['parameters']['BrandIdParam'];
        /** The ID of the `Metafield`. */
        metafield_id: components['parameters']['MetafieldIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/brands/{brand_id}/image': {
    /**
     * Creates a *Brand Image*.
     *
     * **Required Fields**
     * - image_file: Form posts are the only accepted upload option.
     *
     * **Read-Only Fields**
     * - id
     *
     * Only one image at a time can be created. To update a *Brand Image*, use the [PUT Brands](/api-reference/catalog/catalog-api/brands/updatebrand) and an `image_url`.
     */
    post: operations['createBrandImage'];
    /** Deletes a *Brand Image*. */
    delete: operations['deleteBrandImage'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Brand` to which the resource belongs. */
        brand_id: components['parameters']['BrandIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/variants': {
    /** Returns a list of all variants in your catalog. Optional parameters can be passed in. */
    get: operations['getVariants'];
    /** Updates a batch of `variant` objects. At the time of writing, the limit is 50 variants. This limit is subject to change. */
    put: operations['updateVariantsBatch'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/summary': {
    /**
     * Returns a lightweight inventory summary from the BigCommerce Catalog.
     *
     * The inventory summary includes:
     * * "inventory_count"
     * * "variant_count"
     * * "inventory_value"
     * * "highest_variant_price"
     * * "average_variant_price"
     * * "lowest_variant_price"
     * * "oldest_variant_date"
     * * "newest_variant_date"
     * * "primary_category_id"
     * * "primary_category_name"
     */
    get: operations['getCatalogSummary'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/categories/{category_id}/products/sort-order': {
    /**
     * Returns a list of products and their sort order for a specific category.
     *
     * **Usage Notes**
     * * Data pairs are displayed in ascending order based on products' `sort_order` values.
     * * `null` values are allowed for products without specified `sort_order` values.
     * * Products with `sort_order` value of `null` will be displayed after products with valid numerical values.
     * * The priorities for determining product sort order on a storefront are the following:
     *   - Priority 1: Manually specified sort order on Category Level (API).
     *   - Priority 2: Manually specified sort order on Product (Global) Level (UI/API).
     *   - Priority 3: Default sorting by Product ID (newly added products go first) (UI/API).
     */
    get: operations['getsortorders'];
    /** Updates sort order of products within a specific category. */
    put: operations['updatesortorder'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        /** The ID of the `Category` to which the resource belongs. */
        category_id: components['parameters']['CategoryIdParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/trees/categories': {
    /**
     * Returns a list of categories.
     *
     * To get a specific category in a tree, provide a category id.
     */
    get: operations['getAllCategories'];
    /**
     * Updates existing categories.
     *
     *  To update a specific category in a tree, provide a category id.
     */
    put: operations['updateCategories'];
    /**
     * Creates new categories.
     *
     *  `tree_id` or `parent_id` are required to create a category.
     */
    post: operations['createCategories'];
    /**
     * Deletes categories.
     *
     * To delete a specific category in a tree, provide a category id.
     */
    delete: operations['deleteTreeCategories'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/trees': {
    /** Returns a list of *Category Trees*. */
    get: operations['GetCategoryTrees'];
    /**
     * Upserts *Category Trees*.
     *
     * If a tree object contains an ID, it is processed as an update operation using that ID. If no ID is provided, a new tree is created.
     *
     * **Usage Notes**
     * * `channel_id` is required to create a *Category Tree*.
     */
    put: operations['UpsertCategoryTrees'];
    /** Deletes *Category Trees*. A filter must be supplied with the endpoint. */
    delete: operations['DeleteCategoryTrees'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/trees/{tree_id}/categories': {
    /** Returns a *Category Tree*. */
    get: operations['GetCategoryTreeByTreeId'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        tree_id: string;
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/channel-assignments': {
    /** Returns a list of products channel assignments. */
    get: operations['GetProductsChannelAssignments'];
    /** Creates products channel assignments. */
    put: operations['CreateProductsChannelAssignments'];
    /** Delete products channel assignments. A filter must be supplied. */
    delete: operations['DeleteProductsChannelAssignments'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
    };
  };
  '/stores/{store_hash}/v3/catalog/products/category-assignments': {
    /** Returns a list of products category assignments. */
    get: operations['GetProductsCategoryAssignments'];
    /** Creates products category assignments. */
    put: operations['CreateProductsCategoryAssignments'];
    /** Deletes products category assignments. A filter must be supplied. */
    delete: operations['DeleteProductsCategoryAssignments'];
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
    };
  };
}

export interface components {
  schemas: {
    /**
     * Format: binary
     * @description An image file. Supported MIME types include GIF, JPEG, and PNG.
     */
    formData_ImageFileParam: string;
    /**
     * productModifier_Base
     * @description Common Modifier properties.
     */
    productModifier_Base: {
      /** @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
      type:
        | 'date'
        | 'checkbox'
        | 'file'
        | 'text'
        | 'multi_line_text'
        | 'numbers_only_text'
        | 'radio_buttons'
        | 'rectangles'
        | 'dropdown'
        | 'product_list'
        | 'product_list_with_images'
        | 'swatch';
      /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
      required: boolean;
      /** @description The order the modifiers display on the product detail page. */
      sort_order?: number;
      config?: components['schemas']['config_Full'];
      /** @description The name of the option shown on the storefront. */
      display_name?: string;
    };
    /**
     * productModifier_Full
     * @description Product Modifier
     */
    productModifier_Full: components['schemas']['productModifier_Base'] & {
      /**
       * @description The unique numeric ID of the modifier; increments sequentially.
       *
       * @example 12
       */
      id?: number;
      /**
       * @description The unique numeric ID of the product to which the option belongs.
       *
       * @example 77
       */
      product_id?: number;
      /**
       * @description The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
       *
       * @example Add-a-$5-Donation1535039590-191
       */
      name?: string;
      option_values?: components['schemas']['productModifierOptionValue_Full'][];
    };
    /**
     * productModifier_Post
     * @description The model for a POST to create a modifier on a product.
     */
    productModifier_Post: {
      /** @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
      type:
        | 'date'
        | 'checkbox'
        | 'file'
        | 'text'
        | 'multi_line_text'
        | 'numbers_only_text'
        | 'radio_buttons'
        | 'rectangles'
        | 'dropdown'
        | 'product_list'
        | 'product_list_with_images'
        | 'swatch';
      /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
      required: boolean;
      /** @description The order the modifiers display on the product detail page. */
      sort_order?: number;
      /**
       * Option Config
       * @description The values for option config can vary based on the Modifier created.
       */
      config?: {
        /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
        default_value?: string;
        /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
        checked_by_default?: boolean;
        /** @description (checkbox) Label displayed for the checkbox option. */
        checkbox_label?: string;
        /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
        date_limited?: boolean;
        /**
         * @description (date) The type of limit that is allowed to be entered on a date option.
         *
         * @example range
         */
        date_limit_mode?: 'earliest' | 'range' | 'latest';
        /**
         * Format: date
         * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         */
        date_earliest_value?: string;
        /**
         * Format: date
         * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         */
        date_latest_value?: string;
        /**
         * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
         *
         * @example specific
         */
        file_types_mode?: 'specific' | 'all';
        /**
         * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
         *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
         *   `other` - Allows file types defined in the `file_types_other` array.
         */
        file_types_supported?: string[];
        /** @description (file) A list of other file types allowed with the file upload option. */
        file_types_other?: string[];
        /**
         * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
         *
         * @example 5
         */
        file_max_size?: number;
        /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
        text_characters_limited?: boolean;
        /**
         * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
         *
         * @example 1
         */
        text_min_length?: number;
        /**
         * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
         *
         * @example 55
         */
        text_max_length?: number;
        /**
         * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
         *
         * @example true
         */
        text_lines_limited?: boolean;
        /**
         * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
         *
         * @example 4
         */
        text_max_lines?: number;
        /**
         * @description (numbers_only_text) Flag to limit the value of a number option.
         *
         * @example true
         */
        number_limited?: boolean;
        /**
         * @description (numbers_only_text) The type of limit on values entered for a number option.
         *
         * @example lowest
         */
        number_limit_mode?: 'lowest' | 'highest' | 'range';
        /**
         * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
         *
         * @example 100
         */
        number_lowest_value?: number;
        /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
        number_highest_value?: number;
        /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
        number_integers_only?: boolean;
        /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
        product_list_adjusts_inventory?: boolean;
        /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
        product_list_adjusts_pricing?: boolean;
        /**
         * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
         *
         * @example weight
         */
        product_list_shipping_calc?: 'none' | 'weight' | 'package';
      };
      option_values?: (({
        /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
        is_default?: boolean;
        /**
         * @description The text display identifying the value on the storefront. Required in a /POST.
         *
         * @example Green
         */
        label: string;
        /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
        sort_order: number;
        /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
        value_data?: { [key: string]: unknown };
      } & {
        adjusters?: {
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          price?: {
            /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            adjuster?: 'relative' | 'percentage';
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          weight?: {
            /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            adjuster?: 'relative' | 'percentage';
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          /**
           * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
           *
           * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
           */
          image_url?: string;
          purchasing_disabled?: {
            /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
            status?: boolean;
            /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
            message?: string;
          };
        };
      }) & {
        /** @description The unique numeric ID of the value; increments sequentially. */
        id?: number;
      })[];
    } & {
      /**
       * @description The name of the option shown on the storefront.
       *
       * @example Donation
       */
      display_name: string;
    };
    /**
     * productModifier_Put
     * @description The model for a PUT to update a modifier on a product.
     */
    productModifier_Put: {
      /** @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
      type:
        | 'date'
        | 'checkbox'
        | 'file'
        | 'text'
        | 'multi_line_text'
        | 'numbers_only_text'
        | 'radio_buttons'
        | 'rectangles'
        | 'dropdown'
        | 'product_list'
        | 'product_list_with_images'
        | 'swatch';
      /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
      required: boolean;
      /** @description The order the modifiers display on the product detail page. */
      sort_order?: number;
      /**
       * Option Config
       * @description The values for option config can vary based on the Modifier created.
       */
      config?: {
        /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
        default_value?: string;
        /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
        checked_by_default?: boolean;
        /** @description (checkbox) Label displayed for the checkbox option. */
        checkbox_label?: string;
        /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
        date_limited?: boolean;
        /**
         * @description (date) The type of limit that is allowed to be entered on a date option.
         *
         * @example range
         */
        date_limit_mode?: 'earliest' | 'range' | 'latest';
        /**
         * Format: date
         * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         */
        date_earliest_value?: string;
        /**
         * Format: date
         * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         */
        date_latest_value?: string;
        /**
         * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
         *
         * @example specific
         */
        file_types_mode?: 'specific' | 'all';
        /**
         * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
         *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
         *   `other` - Allows file types defined in the `file_types_other` array.
         */
        file_types_supported?: string[];
        /** @description (file) A list of other file types allowed with the file upload option. */
        file_types_other?: string[];
        /**
         * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
         *
         * @example 5
         */
        file_max_size?: number;
        /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
        text_characters_limited?: boolean;
        /**
         * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
         *
         * @example 1
         */
        text_min_length?: number;
        /**
         * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
         *
         * @example 55
         */
        text_max_length?: number;
        /**
         * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
         *
         * @example true
         */
        text_lines_limited?: boolean;
        /**
         * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
         *
         * @example 4
         */
        text_max_lines?: number;
        /**
         * @description (numbers_only_text) Flag to limit the value of a number option.
         *
         * @example true
         */
        number_limited?: boolean;
        /**
         * @description (numbers_only_text) The type of limit on values entered for a number option.
         *
         * @example lowest
         */
        number_limit_mode?: 'lowest' | 'highest' | 'range';
        /**
         * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
         *
         * @example 100
         */
        number_lowest_value?: number;
        /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
        number_highest_value?: number;
        /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
        number_integers_only?: boolean;
        /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
        product_list_adjusts_inventory?: boolean;
        /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
        product_list_adjusts_pricing?: boolean;
        /**
         * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
         *
         * @example weight
         */
        product_list_shipping_calc?: 'none' | 'weight' | 'package';
      };
      option_values?: (({
        /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
        is_default?: boolean;
        /**
         * @description The text display identifying the value on the storefront. Required in a /POST.
         *
         * @example Green
         */
        label: string;
        /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
        sort_order: number;
        /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
        value_data?: { [key: string]: unknown };
      } & {
        adjusters?: {
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          price?: {
            /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            adjuster?: 'relative' | 'percentage';
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          weight?: {
            /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            adjuster?: 'relative' | 'percentage';
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          /**
           * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
           *
           * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
           */
          image_url?: string;
          purchasing_disabled?: {
            /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
            status?: boolean;
            /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
            message?: string;
          };
        };
      }) & {
        /** @description The unique numeric ID of the value; increments sequentially. */
        id?: number;
      })[];
    };
    /**
     * productModifierOptionValue_Base
     * @description Common Product Modifer `option_value` properties.
     */
    productModifierOptionValue_Base: {
      /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
      is_default?: boolean;
      /**
       * @description The text display identifying the value on the storefront. Required in a /POST.
       *
       * @example Green
       */
      label: string;
      /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
      sort_order: number;
      /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`. */
      value_data?: { [key: string]: unknown } | null;
      adjusters?: components['schemas']['adjusters_Full'];
    };
    /**
     * productModifierOptionValue_Full
     * @description Product Modifer `option_value`.
     */
    productModifierOptionValue_Full: components['schemas']['productModifierOptionValue_Base'] & {
      /** @description The unique numeric ID of the value; increments sequentially. */
      id?: number;
      option_id?: number;
    };
    /**
     * productModifierOptionValue_Post
     * @description The model for a POST to create a modifier value on a product.
     */
    productModifierOptionValue_Post: {
      /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
      is_default?: boolean;
      /**
       * @description The text display identifying the value on the storefront. Required in a /POST.
       *
       * @example Green
       */
      label: string;
      /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
      sort_order: number;
      /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
      value_data?: { [key: string]: unknown };
    } & {
      adjusters?: {
        /**
         * Adjuster
         * @description Adjuster for Complex Rules.
         */
        price?: {
          /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          adjuster?: ('relative' | 'percentage') | null;
          /**
           * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
           *
           * @example 5
           */
          adjuster_value?: number;
        };
        /**
         * Adjuster
         * @description Adjuster for Complex Rules.
         */
        weight?: {
          /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          adjuster?: ('relative' | 'percentage') | null;
          /**
           * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
           *
           * @example 5
           */
          adjuster_value?: number;
        };
        /**
         * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
         *
         * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
         */
        image_url?: string;
        purchasing_disabled?: {
          /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
          status?: boolean;
          /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
          message?: string;
        };
      };
    };
    /**
     * productModifierOptionValue_Put
     * @description The model for a PUT to update a modifier value on a product.
     */
    productModifierOptionValue_Put: ({
      /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
      is_default?: boolean;
      /**
       * @description The text display identifying the value on the storefront. Required in a /POST.
       *
       * @example Green
       */
      label: string;
      /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
      sort_order: number;
      /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
      value_data?: { [key: string]: unknown };
    } & {
      adjusters?: {
        /**
         * Adjuster
         * @description Adjuster for Complex Rules.
         */
        price?: {
          /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          adjuster?: ('relative' | 'percentage') | null;
          /**
           * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
           *
           * @example 5
           */
          adjuster_value?: number;
        };
        /**
         * Adjuster
         * @description Adjuster for Complex Rules.
         */
        weight?: {
          /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
          adjuster?: ('relative' | 'percentage') | null;
          /**
           * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
           *
           * @example 5
           */
          adjuster_value?: number;
        };
        /**
         * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
         *
         * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
         */
        image_url?: string;
        purchasing_disabled?: {
          /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
          status?: boolean;
          /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
          message?: string;
        };
      };
    }) & {
      /** @description The unique numeric ID of the value; increments sequentially. */
      id?: number;
    };
    /** resp_productionOption */
    resp_productionOption: {
      data?: components['schemas']['productOption_Full'];
      /**
       * Meta
       * @description Empty meta object; may be used later.
       */
      meta?: {
        null?: string;
      };
    };
    /**
     * productOption_Base
     * @description Common Option properties.
     */
    productOption_Base: {
      /**
       * @description The unique numerical ID of the option, increments sequentially.
       *
       * @example 55
       */
      id?: number | null;
      /**
       * @description The unique numerical ID of the product to which the option belongs.
       *
       * @example 4
       */
      product_id?: number;
      /**
       * @description The name of the option shown on the storefront.
       *
       * @example Add-a-$5-Donation1535042499-187
       */
      display_name?: string;
      /** @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
      type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
      config?: components['schemas']['productOptionConfig_Full'];
      /**
       * @description Order in which the option is displayed on the storefront.
       * @example 1
       */
      sort_order?: number;
      option_values?: components['schemas']['productOptionOptionValue_Full'];
    };
    /** productOption_Full */
    productOption_Full: components['schemas']['productOption_Base'] & {
      /**
       * @description The unique option name, auto-generated from the display name, a timestamp, and the product ID.
       *
       * @example Add-a-$5-Donation1535042499-187
       */
      name?: string;
    };
    /**
     * productOption_Post
     * @description The model for a POST to create options on a product.
     */
    productOption_Post: {
      /**
       * @description The unique numerical ID of the option, increments sequentially.
       *
       * @example 55
       */
      id?: number | null;
      /**
       * @description The unique numerical ID of the product to which the option belongs.
       *
       * @example 4
       */
      product_id?: number;
      /**
       * @description The name of the option shown on the storefront.
       *
       * @example Add-a-$5-Donation1535042499-187
       */
      display_name?: string;
      /** @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
      type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
      /**
       * Option Config
       * @description The values for option config can vary based on the Modifier created.
       */
      config?: {
        /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
        default_value?: string;
        /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
        checked_by_default?: boolean;
        /** @description (checkbox) Label displayed for the checkbox option. */
        checkbox_label?: string;
        /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
        date_limited?: boolean;
        /**
         * @description (date) The type of limit that is allowed to be entered on a date option.
         *
         * @example range
         */
        date_limit_mode?: 'earliest' | 'range' | 'latest';
        /**
         * Format: date
         * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         */
        date_earliest_value?: string;
        /**
         * Format: date
         * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         */
        date_latest_value?: string;
        /**
         * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
         *
         * @example specific
         */
        file_types_mode?: 'specific' | 'all';
        /**
         * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
         *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
         *   `other` - Allows file types defined in the `file_types_other` array.
         */
        file_types_supported?: string[];
        /** @description (file) A list of other file types allowed with the file upload option. */
        file_types_other?: string[];
        /**
         * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
         *
         * @example 5
         */
        file_max_size?: number;
        /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
        text_characters_limited?: boolean;
        /**
         * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
         *
         * @example 1
         */
        text_min_length?: number;
        /**
         * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
         *
         * @example 55
         */
        text_max_length?: number;
        /**
         * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
         *
         * @example true
         */
        text_lines_limited?: boolean;
        /**
         * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
         *
         * @example 4
         */
        text_max_lines?: number;
        /**
         * @description (numbers_only_text) Flag to limit the value of a number option.
         *
         * @example true
         */
        number_limited?: boolean;
        /**
         * @description (numbers_only_text) The type of limit on values entered for a number option.
         *
         * @example lowest
         */
        number_limit_mode?: 'lowest' | 'highest' | 'range';
        /**
         * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
         *
         * @example 100
         */
        number_lowest_value?: number;
        /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
        number_highest_value?: number;
        /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
        number_integers_only?: boolean;
        /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
        product_list_adjusts_inventory?: boolean;
        /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
        product_list_adjusts_pricing?: boolean;
        /**
         * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
         *
         * @example weight
         */
        product_list_shipping_calc?: 'none' | 'weight' | 'package';
      };
      /**
       * @description Order in which the option is displayed on the storefront.
       * @example 1
       */
      sort_order?: number;
      option_values?: ({
        /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
        is_default?: boolean;
        /**
         * @description The text display identifying the value on the storefront. Required in a /POST.
         *
         * @example Green
         */
        label: string;
        /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
        sort_order: number;
        /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
        value_data?: { [key: string]: unknown };
      } & {
        /** @description The unique numeric ID of the value; increments sequentially. */
        id?: number;
      })[];
      /** @description Publicly available image url */
      image_url?: string;
    };
    /**
     * productOption_Put
     * @description The model for a PUT to update options on a product.
     */
    productOption_Put: {
      /**
       * @description The unique numerical ID of the option, increments sequentially.
       *
       * @example 55
       */
      id?: number | null;
      /**
       * @description The unique numerical ID of the product to which the option belongs.
       *
       * @example 4
       */
      product_id?: number;
      /**
       * @description The name of the option shown on the storefront.
       *
       * @example Add-a-$5-Donation1535042499-187
       */
      display_name?: string;
      /** @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
      type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
      /**
       * Option Config
       * @description The values for option config can vary based on the Modifier created.
       */
      config?: {
        /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
        default_value?: string;
        /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
        checked_by_default?: boolean;
        /** @description (checkbox) Label displayed for the checkbox option. */
        checkbox_label?: string;
        /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
        date_limited?: boolean;
        /**
         * @description (date) The type of limit that is allowed to be entered on a date option.
         *
         * @example range
         */
        date_limit_mode?: 'earliest' | 'range' | 'latest';
        /**
         * Format: date
         * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         */
        date_earliest_value?: string;
        /**
         * Format: date
         * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         */
        date_latest_value?: string;
        /**
         * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
         *
         * @example specific
         */
        file_types_mode?: 'specific' | 'all';
        /**
         * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
         *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
         *   `other` - Allows file types defined in the `file_types_other` array.
         */
        file_types_supported?: string[];
        /** @description (file) A list of other file types allowed with the file upload option. */
        file_types_other?: string[];
        /**
         * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
         *
         * @example 5
         */
        file_max_size?: number;
        /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
        text_characters_limited?: boolean;
        /**
         * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
         *
         * @example 1
         */
        text_min_length?: number;
        /**
         * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
         *
         * @example 55
         */
        text_max_length?: number;
        /**
         * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
         *
         * @example true
         */
        text_lines_limited?: boolean;
        /**
         * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
         *
         * @example 4
         */
        text_max_lines?: number;
        /**
         * @description (numbers_only_text) Flag to limit the value of a number option.
         *
         * @example true
         */
        number_limited?: boolean;
        /**
         * @description (numbers_only_text) The type of limit on values entered for a number option.
         *
         * @example lowest
         */
        number_limit_mode?: 'lowest' | 'highest' | 'range';
        /**
         * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
         *
         * @example 100
         */
        number_lowest_value?: number;
        /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
        number_highest_value?: number;
        /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
        number_integers_only?: boolean;
        /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
        product_list_adjusts_inventory?: boolean;
        /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
        product_list_adjusts_pricing?: boolean;
        /**
         * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
         *
         * @example weight
         */
        product_list_shipping_calc?: 'none' | 'weight' | 'package';
      };
      /**
       * @description Order in which the option is displayed on the storefront.
       * @example 1
       */
      sort_order?: number;
      option_values?: ({
        /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
        is_default?: boolean;
        /**
         * @description The text display identifying the value on the storefront. Required in a /POST.
         *
         * @example Green
         */
        label: string;
        /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
        sort_order: number;
        /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
        value_data?: { [key: string]: unknown };
      } & {
        /** @description The unique numeric ID of the value; increments sequentially. */
        id?: number;
      })[];
      /** @description Publicly available image url */
      image_url?: string;
    };
    /**
     * categoriesTree_Resp
     * @description Returns the categories tree, a nested lineage of the categories with parent->child relationship. The Category objects returned are simplified versions of the category objects returned in the rest of this API.
     */
    categoriesTree_Resp: {
      data?: components['schemas']['categoriesTreeNode_Full'][];
      meta?: components['schemas']['metaEmpty_Full'];
    };
    /**
     * categoriesTreeNode_Full
     * @description Used to reflect parent <> child category relationships. Used by Category Tree.
     */
    categoriesTreeNode_Full: {
      /**
       * @description The unique numeric ID of the category; increments sequentially.
       *
       * @example 26
       */
      id?: number;
      /**
       * @description The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
       *
       * @example 25
       */
      parent_id?: number;
      /**
       * @description The name displayed for the category. Name is unique with respect to the category's siblings.
       *
       * @example Bath
       */
      name?: string;
      /**
       * @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
       *
       * @example true
       */
      is_visible?: boolean;
      /**
       * @description The custom URL for the category on the storefront.
       *
       * @example /towels/bath-towels/
       */
      url?: string;
    };
    /**
     * category_Full
     * @description Common Category object properties.
     */
    category_Full: {
      /**
       * @description Unique ID of the *Category*. Increments sequentially.
       * Read-Only.
       */
      id?: number;
      /**
       * @description The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
       * Required in a POST if creating a child category.
       * @example 2
       */
      parent_id: number;
      /**
       * @description The name displayed for the category. Name is unique with respect to the category's siblings.
       * Required in a POST.
       * @example Bath
       */
      name: string;
      /**
       * @description The product description, which can include HTML formatting.
       *
       * @example <p>We offer a wide variety of products perfect for relaxing</p>
       */
      description?: string;
      /**
       * @description Number of views the category has on the storefront.
       *
       * @example 1050
       */
      views?: number;
      /**
       * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
       *
       * @example 3
       */
      sort_order?: number;
      /**
       * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
       *
       * @example Bath
       */
      page_title?: string;
      /** @description A comma-separated list of keywords that can be used to locate the category when searching the store. */
      search_keywords?: string;
      /** @description Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
      meta_keywords?: string[];
      /** @description Custom meta description for the category page. If not defined, the store's default meta description will be used. */
      meta_description?: string;
      /**
       * @description A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied.
       *
       * @example category.html
       */
      layout_file?: string;
      /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
      is_visible?: boolean;
      /** @description Determines how the products are sorted on category page load. */
      default_product_sort?:
        | 'use_store_settings'
        | 'featured'
        | 'newest'
        | 'best_selling'
        | 'alpha_asc'
        | 'alpha_desc'
        | 'avg_customer_review'
        | 'price_asc'
        | 'price_desc';
      /**
       * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field.
       *
       * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
       */
      image_url?: string;
      custom_url?: components['schemas']['customUrl_Full'];
    };
    /**
     * brand_Full
     * @description Common Brand properties.
     */
    brand_Full: {
      /** @description Unique ID of the *Brand*. Read-Only. */
      id?: number;
      /**
       * @description The name of the brand. Must be unique.
       * Required in POST.
       * @example Common Good
       */
      name: string;
      /**
       * @description The title shown in the browser while viewing the brand.
       *
       * @example Common Good
       */
      page_title?: string;
      /** @description Comma-separated list of meta keywords to include in the HTML. */
      meta_keywords?: string[];
      /**
       * @description A meta description to include.
       *
       * @example Common Good is a modern brand.
       */
      meta_description?: string;
      /**
       * @description A comma-separated list of keywords that can be used to locate this brand.
       *
       * @example kitchen, laundry, cart, storage
       */
      search_keywords?: string;
      /**
       * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
       *
       * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
       */
      image_url?: string;
      custom_url?: components['schemas']['customUrl_Full'];
    };
    /**
     * productVariant_Base
     * @description Common Variant properties.
     */
    productVariant_Base: {
      /**
       * Format: double
       * @description The cost price of the variant. Not affected by Price List prices.
       */
      cost_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
       */
      price?: number | null;
      /**
       * Format: double
       * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
       */
      sale_price?: number | null;
      /**
       * Format: double
       * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
       */
      retail_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
       */
      weight?: number | null;
      /**
       * Format: double
       * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.
       */
      width?: number | null;
      /**
       * Format: double
       * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.
       */
      height?: number | null;
      /**
       * Format: double
       * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.
       */
      depth?: number | null;
      /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
      is_free_shipping?: boolean;
      /**
       * Format: double
       * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
       */
      fixed_cost_shipping_price?: number | null;
      /** @description If `true`, this variant will not be purchasable on the storefront. */
      purchasing_disabled?: boolean;
      /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
      purchasing_disabled_message?: string;
      /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
      upc?: string | null;
      /** @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. */
      inventory_level?: number | null;
      /** @description When the variant hits this inventory level, it is considered low stock. */
      inventory_warning_level?: number | null;
      /** @description Identifies where in a warehouse the variant is located. */
      bin_picking_number?: string | null;
      /** @description The Manufacturer Part Number (MPN) for the variant. */
      mpn?: string;
      /** @example 012345678905 */
      gtin?: string;
    };
    /** productVariant_Full */
    productVariant_Full: components['schemas']['productVariant_Base'] & {
      id?: number;
      product_id?: number;
      sku?: string;
      /** @description Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
      sku_id?: number | null;
      /** @description Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
      option_values?: components['schemas']['productVariantOptionValue_Full'][];
      /**
       * Format: double
       * @description The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.
       */
      calculated_price?: number;
      calculated_weight?: number;
    };
    /**
     * productVariant_Post
     * @description The model for a POST to create variants on a product.
     */
    productVariant_Post: {
      /**
       * Format: double
       * @description The cost price of the variant. Not affected by Price List prices.
       */
      cost_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
       */
      price?: number | null;
      /**
       * Format: double
       * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
       */
      sale_price?: number | null;
      /**
       * Format: double
       * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
       */
      retail_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
       */
      weight?: number | null;
      /**
       * Format: double
       * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.
       */
      width?: number | null;
      /**
       * Format: double
       * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.
       */
      height?: number | null;
      /**
       * Format: double
       * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.
       */
      depth?: number | null;
      /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
      is_free_shipping?: boolean;
      /**
       * Format: double
       * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
       */
      fixed_cost_shipping_price?: number | null;
      /** @description If `true`, this variant will not be purchasable on the storefront. */
      purchasing_disabled?: boolean;
      /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
      purchasing_disabled_message?: string;
      /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
      upc?: string | null;
      /** @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. */
      inventory_level?: number | null;
      /** @description When the variant hits this inventory level, it is considered low stock. */
      inventory_warning_level?: number | null;
      /** @description Identifies where in a warehouse the variant is located. */
      bin_picking_number?: string | null;
      /** @description Publicly available image url */
      image_url?: string;
      /**
       * @description Global Trade Item Number
       * @example 012345678905
       */
      gtin?: string;
      /**
       * @description Manufacturer Part Number
       * @example HV-HM02
       */
      mpn?: string;
    } & {
      product_id?: number;
      sku?: string;
      /** @description Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
      option_values?: components['schemas']['productVariantOptionValue_Full'][];
    };
    /** variantCollection_Put */
    variantCollection_Put: components['schemas']['productVariant_Full'][];
    /**
     * variant_Put
     * @description The model for a PUT to update variants on a product.
     */
    variant_Put: {
      /**
       * Format: double
       * @description The cost price of the variant. Not affected by Price List prices.
       */
      cost_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
       */
      price?: number | null;
      /**
       * Format: double
       * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
       */
      sale_price?: number | null;
      /**
       * Format: double
       * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
       */
      retail_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
       */
      weight?: number | null;
      /**
       * Format: double
       * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.
       */
      width?: number | null;
      /**
       * Format: double
       * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.
       */
      height?: number | null;
      /**
       * Format: double
       * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.
       */
      depth?: number | null;
      /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
      is_free_shipping?: boolean;
      /**
       * Format: double
       * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
       */
      fixed_cost_shipping_price?: number | null;
      /** @description If `true`, this variant will not be purchasable on the storefront. */
      purchasing_disabled?: boolean;
      /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
      purchasing_disabled_message?: string;
      /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
      upc?: string | null;
      /** @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. */
      inventory_level?: number | null;
      /** @description When the variant hits this inventory level, it is considered low stock. */
      inventory_warning_level?: number | null;
      /** @description Identifies where in a warehouse the variant is located. */
      bin_picking_number?: string | null;
    } & {
      id?: number;
    };
    /**
     * productVariant_Post_Product
     * @description The model for a POST to create variants on a product.
     */
    productVariant_Post_Product: components['schemas']['productVariant_Base'] & {
      sku?: string;
      option_values?: {
        /**
         * @description The name of the option.
         *
         * @example Color
         */
        option_display_name?: string;
        /**
         * @description The label of the option value.
         *
         * @example Beige
         */
        label?: string;
      }[];
    };
    /**
     * productVariant_Put_Product
     * @description The model for a PUT to update variants on a product.
     */
    productVariant_Put_Product: {
      /**
       * Format: double
       * @description The cost price of the variant. Not affected by Price List prices.
       */
      cost_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
       */
      price?: number | null;
      /**
       * Format: double
       * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
       */
      sale_price?: number | null;
      /**
       * Format: double
       * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
       */
      retail_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
       */
      weight?: number | null;
      /**
       * Format: double
       * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.
       */
      width?: number | null;
      /**
       * Format: double
       * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.
       */
      height?: number | null;
      /**
       * Format: double
       * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.
       */
      depth?: number | null;
      /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
      is_free_shipping?: boolean;
      /**
       * Format: double
       * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
       */
      fixed_cost_shipping_price?: number | null;
      /** @description If `true`, this variant will not be purchasable on the storefront. */
      purchasing_disabled?: boolean;
      /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
      purchasing_disabled_message?: string;
      /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
      upc?: string | null;
      /** @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. */
      inventory_level?: number | null;
      /** @description When the variant hits this inventory level, it is considered low stock. */
      inventory_warning_level?: number | null;
      /** @description Identifies where in a warehouse the variant is located. */
      bin_picking_number?: string | null;
      product_id?: number;
      sku?: string;
    };
    /** productVariantOptionValue_Full */
    productVariantOptionValue_Full: {
      /**
       * @description The name of the option.
       *
       * @example Color
       */
      option_display_name?: string;
      /**
       * @description The label of the option value.
       *
       * @example Beige
       */
      label?: string;
    } & components['schemas']['productVariantOptionValue_Base'];
    /**
     * productOptionValue_Post_Product
     * @description The model for a POST to create option values on a product.
     */
    productOptionValue_Post_Product: {
      /**
       * @description The name of the option.
       *
       * @example Color
       */
      option_display_name?: string;
      /**
       * @description The label of the option value.
       *
       * @example Beige
       */
      label?: string;
    };
    /**
     * productVariantOptionValue_Base
     * @description Common Product Variant Option properties.
     */
    productVariantOptionValue_Base: {
      /**
       * @description `option_value` ID.
       * @example 146
       */
      id?: number;
      /**
       * @description `option` ID.
       * @example 151
       */
      option_id?: number;
    };
    /**
     * productVariantOptionValue_Post
     * @description The model for a POST to create option values on a variant.
     */
    productVariantOptionValue_Post: {
      id?: number;
      option_id?: number;
    };
    /** resp_productOptionValue */
    resp_productOptionValue: {
      data?: components['schemas']['productOptionOptionValue_Full'];
      /**
       * Meta
       * @description Empty meta object; may be used later.
       */
      meta?: {
        null?: string;
      };
    };
    /**
     * productOptionOptionValue_Base
     * @description Common Product Option `option_value` properties.
     */
    productOptionOptionValue_Base: {
      /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
      is_default?: boolean;
      /**
       * @description The text display identifying the value on the storefront. Required in a /POST.
       *
       * @example Green
       */
      label: string;
      /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
      sort_order: number;
      /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`. */
      value_data?: { [key: string]: unknown } | null;
    };
    /**
     * productOptionOptionValue_Full
     * @description Product Option `option_value`.
     */
    productOptionOptionValue_Full: components['schemas']['productOptionOptionValue_Base'] & {
      /** @description The unique numeric ID of the value; increments sequentially. */
      id?: number;
    };
    /**
     * productOptionValue_Post
     * @description The model for a POST to create option values on a product.
     */
    productOptionValue_Post: {
      /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
      is_default?: boolean;
      /**
       * @description The text display identifying the value on the storefront. Required in a /POST.
       *
       * @example Green
       */
      label: string;
      /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
      sort_order: number;
      /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
      value_data?: { [key: string]: unknown };
    };
    /**
     * productOptionValue_Put
     * @description The model for a PUT to update option values on a product.
     */
    productOptionValue_Put: {
      /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
      is_default?: boolean;
      /**
       * @description The text display identifying the value on the storefront. Required in a /POST.
       *
       * @example Green
       */
      label: string;
      /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
      sort_order: number;
      /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
      value_data?: { [key: string]: unknown };
    } & {
      /** @description The unique numeric ID of the value; increments sequentially. */
      id?: number;
    };
    /**
     * productImage_Base
     * @description Common ProductImage properties.
     */
    productImage_Base: {
      /** @description The local path to the original image file uploaded to BigCommerce. Limit of 1MB per file. */
      image_file?: string;
      /** @description Flag for identifying whether the image is used as the product's thumbnail. */
      is_thumbnail?: boolean;
      /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
      sort_order?: number;
      /** @description The description for the image. */
      description?: string;
      /** @description Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
      image_url?: string;
    };
    /**
     * productImage_Post
     * @description The model for a POST to create an image on a product.
     */
    productImage_Post: {
      /** @description The unique numeric ID of the image; increments sequentially. */
      id?: number;
      /** @description The unique numeric identifier for the product with which the image is associated. */
      product_id?: number;
      /** @description The local path to the original image file uploaded to BigCommerce. */
      image_file?: string;
      /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
      url_zoom?: string;
      /** @description The standard URL for this image. By default, this is used for product-page images. */
      url_standard?: string;
      /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
      url_thumbnail?: string;
      /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
      url_tiny?: string;
      /**
       * Format: date-time
       * @description The date on which the product image was modified.
       */
      date_modified?: string;
      /** @description Flag for identifying whether the image is used as the product's thumbnail. */
      is_thumbnail?: boolean;
      /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
      sort_order?: number;
      /** @description The description for the image. */
      description?: string;
    } & {
      /** @description Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
      image_url?: string;
      /** @description Must be sent as a multipart/form-data field in the request body. */
      image_file?: string;
    };
    /**
     * productImage_Put
     * @description The model for a PUT to update applicable Product Image fields.
     */
    productImage_Put: {
      /** @description The unique numeric identifier for the product with which the image is associated. */
      product_id?: number;
      /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
      url_zoom?: string;
      /** @description The standard URL for this image. By default, this is used for product-page images. */
      url_standard?: string;
      /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
      url_thumbnail?: string;
      /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
      url_tiny?: string;
    } & components['schemas']['productImage_Base'];
    /**
     * productVideo_Base
     * @description The model for a POST to create a video on a product.
     */
    productVideo_Base: {
      /** @description The title for the video. If left blank, this will be filled in according to data on a host site. */
      title?: string;
      /** @description The description for the video. If left blank, this will be filled in according to data on a host site. */
      description?: string;
      /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
      sort_order?: number;
      /** @description The video type (a short name of a host site). */
      type?: 'youtube';
      /** @description The ID of the video on a host site. */
      video_id?: string;
    };
    /**
     * productVideo_Full
     * @description A product video model.
     */
    productVideo_Full: components['schemas']['productVideo_Base'] & {
      /** @description The unique numeric ID of the product video; increments sequentially. */
      id?: number;
      /** @description The unique numeric identifier for the product with which the image is associated. */
      product_id?: number;
      /** @description Length of the video. This will be filled in according to data on a host site. */
      length?: string;
    };
    /**
     * productVideo_Post
     * @description The model for a POST to create a video on a product.
     */
    productVideo_Post: components['schemas']['productVideo_Base'];
    /**
     * productVideo_Put
     * @description The model for a PUT to update a video on a product.
     */
    productVideo_Put: components['schemas']['productVideo_Base'] & {
      /** @description The unique numeric ID of the product video; increments sequentially. */
      id?: number;
    };
    /** productReview_Base */
    productReview_Base: {
      /**
       * @description The title for the product review.
       * Required in /POST.
       */
      title: string;
      /** @description The text for the product review. */
      text?: string;
      /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
      status?: string;
      /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
      rating?: number;
      /** @description The email of the reviewer. Must be a valid email, or an empty string. */
      email?: string;
      /** @description The name of the reviewer. */
      name?: string;
      /**
       * Format: date-time
       * @description Date the product was reviewed. Required in /POST.
       */
      date_reviewed: string;
    };
    /**
     * productReview_Full
     * @description A product review model.
     */
    productReview_Full: components['schemas']['productReview_Base'] & {
      /** @description The unique numeric ID of the product review; increments sequentially. */
      id?: number;
      /** @description The unique numeric identifier for the product with which the review is associated. */
      product_id?: number;
      /**
       * Format: date-time
       * @description Date the product review was created.
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date the product review was modified.
       */
      date_modified?: string;
    };
    /**
     * productReview_Post
     * @description The model for a POST to create a product review.
     */
    productReview_Post: {
      /**
       * @description The title for the product review.
       * Required in /POST.
       */
      title: string;
      /** @description The text for the product review. */
      text?: string;
      /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
      status?: string;
      /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
      rating?: number;
      /** @description The email of the reviewer. Must be a valid email, or an empty string. */
      email?: string;
      /** @description The name of the reviewer. */
      name?: string;
      /**
       * Format: date-time
       * @description Date the product was reviewed. Required in /POST.
       */
      date_reviewed: string;
    };
    /**
     * productReview_Put
     * @description The model for a PUT to update a product review.
     */
    productReview_Put: {
      /**
       * @description The title for the product review.
       * Required in /POST.
       */
      title: string;
      /** @description The text for the product review. */
      text?: string;
      /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
      status?: string;
      /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
      rating?: number;
      /** @description The email of the reviewer. Must be a valid email, or an empty string. */
      email?: string;
      /** @description The name of the reviewer. */
      name?: string;
      /**
       * Format: date-time
       * @description Date the product was reviewed. Required in /POST.
       */
      date_reviewed: string;
    };
    /**
     * resp_productImage
     * @description Image Response returns for:
     * * Create Variant Image
     * * Create Modifier Image
     * * Create Category Image
     * * Create Brand Image
     */
    resp_productImage: {
      data?: components['schemas']['productImage_Full'];
      /**
       * Meta
       * @description Empty meta object; may be used later.
       */
      meta?: { [key: string]: unknown };
    };
    /**
     * resourceImage_Full
     * @description An object containing a publicly accessible image URL, or a form post that contains an image file.
     */
    resourceImage_Full: {
      /** @description A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file. */
      image_url?: string;
    };
    /**
     * product_Post
     * @description The model for a POST to create a product.
     */
    product_Post: components['schemas']['product_Base'] & {
      variants?: components['schemas']['productVariant_Post_Product'][];
    };
    /**
     * product_Put
     * @description The model for a PUT to update a product.
     */
    product_Put: {
      /** @description The unique numerical ID of the product; increments sequentially. */
      id?: number;
    } & components['schemas']['product_Base'] & {
        variants?: components['schemas']['productVariant_Put_Product'][];
      };
    /**
     * catalogSummary_Full
     * @description Catalog Summary object describes a lightweight summary of the catalog.
     */
    catalogSummary_Full: {
      /**
       * @description A count of all inventory items in the catalog.
       *
       * @example 2000
       */
      inventory_count?: number;
      /**
       * Format: double
       * @description Total value of store's inventory.
       *
       * @example 267000
       */
      inventory_value?: number;
      /**
       * @description ID of the category containing the most products.
       *
       * @example 23
       */
      primary_category_id?: number;
      /**
       * @description Name of the category containing the most products.
       *
       * @example Shop All
       */
      primary_category_name?: string;
      /**
       * @description Total number of variants
       * @example 46
       */
      variant_count?: number;
      /**
       * Format: double
       * @description Highest priced variant
       * @example 249
       */
      highest_variant_price?: number;
      /**
       * Format: double
       * @description Average price of all variants
       * @example 83.07978261
       */
      average_variant_price?: number;
      /**
       * @description Lowest priced variant in the store
       * @example 7
       */
      lowest_variant_price?: string;
      /** @example 2018-08-15T00:00:00.000Z */
      oldest_variant_date?: string;
      /** @example 2018-08-16T00:00:00.000Z */
      newest_variant_date?: string;
    };
    /**
     * metafield_Base
     * @description Metafield for products, categories, variants, and brands. The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    metafield_Base: {
      /**
       * @description Unique ID of the *Metafield*. Read-Only.
       * @example 6
       */
      id?: number;
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * |Value|Description
       * |-|-|
       * |`app_only`|Private to the app that owns the field|
       * |`read`|Visible to other API consumers|
       * |`write`|Open for reading and writing by other API consumers|
       * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
       * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
       */
      permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
      /**
       * @description Namespace for the metafield, for organizational purposes. This is set by the developer. Required for POST.
       *
       * @example Warehouse Locations
       */
      namespace: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`. Required for POST.
       *
       * @example Location
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`. Required for POST.
       *
       * @example 4HG
       */
      value: string;
      /**
       * @description Description for the metafields.
       *
       * @example Location in the warehouse
       */
      description?: string;
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example product
       */
      resource_type?: 'category' | 'brand' | 'product' | 'variant';
      /**
       * @description The ID for the resource with which the metafield is associated.
       *
       * @example 111
       */
      resource_id?: number;
      /**
       * Format: date-time
       * @description Date and time of the metafield's creation. Read-Only.
       *
       * @example 2018-05-07T20:14:17.000Z
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated. Read-Only.
       *
       * @example 2018-05-07T20:14:17.000Z
       */
      date_modified?: string;
    };
    /**
     * complexRule_Base
     * @description Common ComplexRule properties.
     */
    complexRule_Base: {
      /**
       * @description The unique numeric ID of the rule; increments sequentially.
       * Read-Only
       * @example 5
       */
      id?: number;
      /**
       * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
       *
       * @example 67
       */
      product_id?: number | null;
      /** @description The priority to give this rule when making adjustments to the product properties. */
      sort_order?: number;
      /**
       * @description Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
       *
       * @example true
       */
      enabled?: boolean;
      /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
      stop?: boolean;
      /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
      purchasing_disabled?: boolean;
      /**
       * @description Message displayed on the storefront when a rule disables the purchasing of a product.
       *
       * @example This product is not available at this time.
       */
      purchasing_disabled_message?: string;
      /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
      purchasing_hidden?: boolean;
      /**
       * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
       *
       * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
       */
      image_url?: string;
      price_adjuster?: components['schemas']['adjuster_Full'];
      weight_adjuster?: components['schemas']['adjuster_Full'];
      conditions?: components['schemas']['complexRuleConditionBase'][];
    };
    /**
     * productCustomField_Base
     * @description Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product’s page, such as a book’s ISBN or a DVD’s release date.
     */
    productCustomField_Base: {
      /**
       * @description The unique numeric ID of the custom field; increments sequentially.
       * Read-Only
       * @example 6
       */
      id?: number;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
       *
       * @example ISBN
       */
      name: string;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
       *
       * @example 1234567890123
       */
      value: string;
    };
    /**
     * productCustomField_Post
     * @description The model for a POST to create a custom field on a product.
     */
    productCustomField_Post: {
      /**
       * @description The unique numeric ID of the custom field; increments sequentially.
       * Read-Only
       * @example 6
       */
      id?: number;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
       *
       * @example ISBN
       */
      name: string;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
       *
       * @example 1234567890123
       */
      value: string;
    };
    /**
     * productCustomField_Put
     * @description The model for a PUT to update a custom field on a product.
     */
    productCustomField_Put: {
      /**
       * @description The unique numeric ID of the custom field; increments sequentially. Required to update existing custom field in /PUT request.
       * Read-Only
       * @example 6
       */
      id?: number;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
       *
       * @example ISBN
       */
      name: string;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
       *
       * @example 1234567890123
       */
      value: string;
    };
    /**
     * complexRuleConditionBase
     * @description Complex rules may return with conditions that apply to one or more variants, or with a single modifier value (if the rules were created using the v2 API or the control panel). Complex rules created or updated in the v3 API must have conditions that either reference multiple `modifier_value_id`’s, or else reference a `modifier_value_id` and a `variant_id`.
     */
    complexRuleConditionBase: {
      /**
       * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
       *
       * @example 3
       */
      id?: number | null;
      /**
       * @description The unique numeric ID of the rule with which the condition is associated.
       * Read-Only
       * @example 4
       */
      rule_id?: number | null;
      /**
       * @description The unique numeric ID of the modifier with which the rule condition is associated.
       * Required in /POST.
       * @example 55
       */
      modifier_id: number | null;
      /**
       * @description The unique numeric ID of the modifier value with which the rule condition is associated.
       * Required in /POST.
       * @example 256
       */
      modifier_value_id: number | null;
      /**
       * @description The unique numeric ID of the variant with which the rule condition is associated.
       * Required in /POST.
       * @example 1
       */
      variant_id: number | null;
      /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
      combination_id?: number;
    };
    /**
     * customUrl_Full
     * @description The custom URL for the product on the storefront.
     */
    customUrl_Full: {
      /** @description Product URL on the storefront. */
      url?: string;
      /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
      is_customized?: boolean;
    };
    /**
     * bulkPricingRule_Full
     * @description Common Bulk Pricing Rule properties
     */
    bulkPricingRule_Full: {
      /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
      id?: number;
      /**
       * @description The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero.
       * Required in /POST.
       *
       * @example 10
       */
      quantity_min: number;
      /**
       * @description The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.
       * Required in /POST.
       * @example 50
       */
      quantity_max: number;
      /**
       * @description The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.
       * Required in /POST.
       * @example price
       */
      type: 'price' | 'percent' | 'fixed';
      /**
       * @description The discount can be a fixed dollar amount or a percentage. For a fixed dollar amount enter it as an integer and the response will return as an integer. For percentage enter the amount as the percentage divided by 100 using string format. For example 10% percent would be “.10”. The response will return as an integer.
       * Required in /POST.
       * @example 10
       */
      amount: number;
    };
    /**
     * productOptionConfig_Full
     * @description The values for option config can vary based on the Modifier created.
     */
    productOptionConfig_Full: {
      /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
      default_value?: string;
      /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
      checked_by_default?: boolean;
      /** @description (checkbox) Label displayed for the checkbox option. */
      checkbox_label?: string;
      /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
      date_limited?: boolean;
      /**
       * @description (date) The type of limit that is allowed to be entered on a date option.
       *
       * @example range
       */
      date_limit_mode?: 'earliest' | 'range' | 'latest';
      /**
       * Format: date
       * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
       */
      date_earliest_value?: string;
      /**
       * Format: date
       * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
       */
      date_latest_value?: string;
      /**
       * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
       *
       * @example specific
       */
      file_types_mode?: 'specific' | 'all';
      /**
       * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
       *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
       *   `other` - Allows file types defined in the `file_types_other` array.
       */
      file_types_supported?: string[];
      /** @description (file) A list of other file types allowed with the file upload option. */
      file_types_other?: string[];
      /**
       * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
       *
       * @example 5
       */
      file_max_size?: number;
      /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
      text_characters_limited?: boolean;
      /**
       * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
       *
       * @example 1
       */
      text_min_length?: number;
      /**
       * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
       *
       * @example 55
       */
      text_max_length?: number;
      /**
       * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
       *
       * @example true
       */
      text_lines_limited?: boolean;
      /**
       * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
       *
       * @example 4
       */
      text_max_lines?: number;
      /**
       * @description (numbers_only_text) Flag to limit the value of a number option.
       *
       * @example true
       */
      number_limited?: boolean;
      /**
       * @description (numbers_only_text) The type of limit on values entered for a number option.
       *
       * @example lowest
       */
      number_limit_mode?: 'lowest' | 'highest' | 'range';
      /**
       * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
       *
       * @example 100
       */
      number_lowest_value?: number;
      /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
      number_highest_value?: number;
      /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
      number_integers_only?: boolean;
      /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
      product_list_adjusts_inventory?: boolean;
      /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
      product_list_adjusts_pricing?: boolean;
      /**
       * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
       *
       * @example weight
       */
      product_list_shipping_calc?: 'none' | 'weight' | 'package';
    };
    /**
     * adjuster_Full
     * @description Adjuster for Complex Rules.
     */
    adjuster_Full: {
      /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
      adjuster?: ('relative' | 'percentage') | null;
      /**
       * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
       *
       * @example 5
       */
      adjuster_value?: number;
    };
    /**
     * resp_variantBatchError
     * @description Errors during batch usage for the BigCommerce API.
     */
    resp_variantBatchError: {
      batch_errors?: (components['schemas']['error_Base'] & {
        /** Detailed Errors */
        errors?: {
          additionalProperties?: string;
        };
      })[];
    };
    /**
     * metaCollection_Full
     * @description Data about the response, including pagination and collection totals.
     */
    metaCollection_Full: {
      pagination?: components['schemas']['pagination_Full'];
    };
    /**
     * pagination_Full
     * @description Data about the response, including pagination and collection totals.
     */
    pagination_Full: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 36
       */
      total?: number;
      /**
       * @description Total number of items in the collection response.
       *
       * @example 36
       */
      count?: number;
      /**
       * @description The amount of items returned in the collection per page, controlled by the limit parameter.
       *
       * @example 50
       */
      per_page?: number;
      /**
       * @description The page you are currently on within the collection.
       *
       * @example 1
       */
      current_page?: number;
      /**
       * @description The total number of pages in the collection.
       *
       * @example 1
       */
      total_pages?: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /**
         * @description Link to the current page returned in the response.
         *
         * @example ?page=1&limit=50
         */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
    /**
     * metaEmpty_Full
     * @description Empty meta object; may be used later.
     */
    metaEmpty_Full: { [key: string]: unknown };
    /** errorResponse_Full */
    errorResponse_Full: components['schemas']['error_Base'] & {
      errors?: components['schemas']['detailedErrors'];
    };
    /**
     * error_Base
     * @description Error payload for the BigCommerce API.
     */
    error_Base: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /**
     * errorNotFound
     * @description Error payload for the BigCommerce API.
     */
    errorNotFound: {
      /** @description 404 HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /**
     * giftCertificate_Full
     * @description A gift-certificate model.
     */
    giftCertificate_Full: {
      /**
       * @description The gift-certificate code.
       *
       * @example MB345
       */
      code?: string;
      /**
       * Format: float
       * @description The balance on a gift certificate when it was purchased.
       *
       * @example 100
       */
      original_balance?: number;
      /**
       * Format: float
       * @description The balance on a gift certificate at the time of this purchase.
       *
       * @example 100
       */
      starting_balance?: number;
      /**
       * Format: float
       * @description The remaining balance on a gift certificate.
       *
       * @example 35.42
       */
      remaining_balance?: number;
      /** @description The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired. */
      status?: 'active' | 'pending' | 'disabled' | 'expired';
    };
    /**
     * errorNoContent
     * @description No-content response for the BigCommerce API.
     */
    errorNoContent: {
      /** @description 204 HTTP status code. */
      status?: number;
      /** @description The error title describing the situation. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /** detailedErrors */
    detailedErrors: {
      additionalProperties?: string;
    };
    /** product_Full */
    product_Full: components['schemas']['product_Base'] & {
      /**
       * Format: date-time
       * @description The date on which the product was created.
       *
       * @example 2018-08-15T14:49:05.000Z
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description The date on which the product was modified.
       *
       * @example 2018-08-24T14:41:00.000Z
       */
      date_modified?: string;
      /** @description ID of the product. Read Only. */
      id?: number;
      /** @description The unique identifier of the base variant associated with a simple product. This value is `null` for complex products. */
      base_variant_id?: number;
      /**
       * Format: float
       * @description The price of the product as seen on the storefront. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.
       */
      calculated_price?: number;
      options?: components['schemas']['productOption_Base'][];
      modifiers?: components['schemas']['productModifier_Full'][];
      /** @description Minimum Advertised Price. */
      map_price?: number;
      /** @description Indicates that the product is in an Option Set (legacy V2 concept). */
      option_set_id?: number;
      /** @description Legacy template setting which controls if the option set shows up to the side of or below the product image and description. */
      option_set_display?: string;
      variants?: components['schemas']['productVariant_Full'][];
    };
    /**
     * productImage_Full
     * @description Common ProductImage properties.
     */
    productImage_Full: components['schemas']['productImage_Base'] & {
      /** @description The unique numeric ID of the image; increments sequentially. */
      id?: number;
      /** @description The unique numeric identifier for the product with which the image is associated. */
      product_id?: number;
      /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
      url_zoom?: string;
      /** @description The standard URL for this image. By default, this is used for product-page images. */
      url_standard?: string;
      /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
      url_thumbnail?: string;
      /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
      url_tiny?: string;
      /**
       * Format: date-time
       * @description The date on which the product image was modified.
       */
      date_modified?: string;
    };
    /** metafield_Post */
    metafield_Post: components['schemas']['metafield_Base'];
    /**
     * product_Put_Collection
     * @description The model for batch updating products.
     */
    product_Put_Collection: {
      id: number;
    } & components['schemas']['product_Base'];
    /**
     * config_Full
     * @description The values for option config can vary based on the Modifier created.
     */
    config_Full: {
      /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
      default_value?: string;
      /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
      checked_by_default?: boolean;
      /** @description (checkbox) Label displayed for the checkbox option. */
      checkbox_label?: string;
      /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
      date_limited?: boolean;
      /**
       * @description (date) The type of limit that is allowed to be entered on a date option.
       *
       * @example range
       */
      date_limit_mode?: 'earliest' | 'range' | 'latest';
      /**
       * Format: date
       * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
       */
      date_earliest_value?: string;
      /**
       * Format: date
       * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
       */
      date_latest_value?: string;
      /**
       * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
       *
       * @example specific
       */
      file_types_mode?: 'specific' | 'all';
      /**
       * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
       *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
       *   `other` - Allows file types defined in the `file_types_other` array.
       */
      file_types_supported?: string[];
      /** @description (file) A list of other file types allowed with the file upload option. */
      file_types_other?: string[];
      /**
       * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
       *
       * @example 5
       */
      file_max_size?: number;
      /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
      text_characters_limited?: boolean;
      /**
       * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
       *
       * @example 1
       */
      text_min_length?: number;
      /**
       * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
       *
       * @example 55
       */
      text_max_length?: number;
      /**
       * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
       *
       * @example true
       */
      text_lines_limited?: boolean;
      /**
       * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
       *
       * @example 4
       */
      text_max_lines?: number;
      /**
       * @description (numbers_only_text) Flag to limit the value of a number option.
       *
       * @example true
       */
      number_limited?: boolean;
      /**
       * @description (numbers_only_text) The type of limit on values entered for a number option.
       *
       * @example lowest
       */
      number_limit_mode?: 'lowest' | 'highest' | 'range';
      /**
       * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
       *
       * @example 100
       */
      number_lowest_value?: number;
      /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
      number_highest_value?: number;
      /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
      number_integers_only?: boolean;
      /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
      product_list_adjusts_inventory?: boolean;
      /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
      product_list_adjusts_pricing?: boolean;
      /**
       * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
       *
       * @example weight
       */
      product_list_shipping_calc?: 'none' | 'weight' | 'package';
    };
    /** adjusters_Full */
    adjusters_Full: {
      price?: components['schemas']['adjuster_Full'];
      weight?: components['schemas']['adjuster_Full'];
      /**
       * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
       *
       * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
       */
      image_url?: string;
      purchasing_disabled?: {
        /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
        status?: boolean;
        /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
        message?: string;
      };
    };
    /**
     * variant_Base
     * @description Variant properties used on:
     * * `/catalog/products/variants`
     * * `/catalog/variants`
     */
    variant_Base: {
      /**
       * Format: double
       * @description The cost price of the variant. Not affected by Price List prices.
       */
      cost_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
       */
      price?: number | null;
      /**
       * Format: double
       * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
       */
      sale_price?: number | null;
      /**
       * Format: double
       * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
       */
      retail_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
       */
      weight?: number | null;
      /**
       * Format: double
       * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.
       */
      width?: number | null;
      /**
       * Format: double
       * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.
       */
      height?: number | null;
      /**
       * Format: double
       * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.
       */
      depth?: number | null;
      /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
      is_free_shipping?: boolean;
      /**
       * Format: double
       * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
       */
      fixed_cost_shipping_price?: number | null;
      /** @description If `true`, this variant will not be purchasable on the storefront. */
      purchasing_disabled?: boolean;
      /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
      purchasing_disabled_message?: string;
      /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
      upc?: string | null;
      /** @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. */
      inventory_level?: number | null;
      /** @description When the variant hits this inventory level, it is considered low stock. */
      inventory_warning_level?: number | null;
      /** @description Identifies where in a warehouse the variant is located. */
      bin_picking_number?: string | null;
    };
    /**
     * product_Base
     * @description Shared `Product` properties used in:
     * * `POST`
     * * `PUT`
     * * `GET`
     */
    product_Base: {
      /**
       * @description The product name.
       *
       * @example Smith Journal 13
       */
      name: string;
      /**
       * @description The product type. One of: `physical` - a physical stock unit, `digital` - a digital download.
       *
       * @example physical
       */
      type: 'physical' | 'digital';
      /**
       * @description User defined product code/stock keeping unit (SKU).
       *
       * @example SM-13
       */
      sku?: string;
      /**
       * @description The product description, which can include HTML formatting.
       *
       * @example <p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>
       */
      description?: string;
      /**
       * Format: float
       * @description Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store
       */
      weight: number;
      /**
       * Format: float
       * @description Width of the product, which can be used when calculating shipping costs.
       */
      width?: number;
      /**
       * Format: float
       * @description Depth of the product, which can be used when calculating shipping costs.
       */
      depth?: number;
      /**
       * Format: float
       * @description Height of the product, which can be used when calculating shipping costs.
       */
      height?: number;
      /**
       * Format: float
       * @description The price of the product. The price should include or exclude tax, based on the store settings.
       */
      price: number;
      /**
       * Format: float
       * @description The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.
       */
      cost_price?: number;
      /**
       * Format: float
       * @description The retail cost of the product. If entered, the retail cost price will be shown on the product page.
       */
      retail_price?: number;
      /**
       * Format: float
       * @description If entered, the sale price will be used instead of value in the price field when calculating the product's cost.
       */
      sale_price?: number;
      /** @description Minimum Advertised Price */
      map_price?: number;
      /** @description The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.) */
      tax_class_id?: number;
      /** @description Accepts AvaTax System Tax Codes, which identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to BigCommerce's Avalara Premium integration can calculate sales taxes more accurately. Stores without Avalara Premium will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see Avalara's documentation. */
      product_tax_code?: string;
      /** @description An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values. */
      categories?: number[];
      /** @description A product can be added to an existing brand during a product /PUT or /POST. */
      brand_id?: number;
      /** @description Current inventory level of the product. Simple inventory tracking must be enabled (See the `inventory_tracking` field) for this to take any effect. */
      inventory_level?: number;
      /** @description Inventory warning level for the product. When the product's inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect. */
      inventory_warning_level?: number;
      /** @description The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels. */
      inventory_tracking?: 'none' | 'product' | 'variant';
      /**
       * Format: float
       * @description A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
       */
      fixed_cost_shipping_price?: number;
      /** @description Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero. */
      is_free_shipping?: boolean;
      /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view. */
      is_visible?: boolean;
      /** @description Flag to determine whether the product should be included in the `featured products` panel when viewing the store. */
      is_featured?: boolean;
      /** @description An array of IDs for the related products. */
      related_products?: number[];
      /** @description Warranty information displayed on the product page. Can include HTML formatting. */
      warranty?: string;
      /** @description The BIN picking number for the product. */
      bin_picking_number?: string;
      /** @description The layout template file used to render this product category. This field is writable only for stores with a Blueprint theme applied. */
      layout_file?: string;
      /** @description The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations. */
      upc?: string;
      /** @description A comma-separated list of keywords that can be used to locate the product when searching the store. */
      search_keywords?: string;
      /** @description Availability of the product. (Corresponds to the product's [Purchasability](https://support.bigcommerce.com/s/article/Adding-Products-v3?language=en_US#sections) section in the control panel.) Supported values: `available` - the product is available for purchase; `disabled` - the product is listed on the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders. */
      availability?: 'available' | 'disabled' | 'preorder';
      /** @description Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.' */
      availability_description?: string;
      /** @description Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field. */
      gift_wrapping_options_type?: 'any' | 'none' | 'list';
      /** @description A list of gift-wrapping option IDs. */
      gift_wrapping_options_list?: number[];
      /** @description Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results. */
      sort_order?: number;
      /** @description The product condition. Will be shown on the product page if the `is_condition_shown` field's value is `true`. Possible values: `New`, `Used`, `Refurbished`. */
      condition?: 'New' | 'Used' | 'Refurbished';
      /** @description Flag used to determine whether the product condition is shown to the customer on the product page. */
      is_condition_shown?: boolean;
      /** @description The minimum quantity an order must contain, to be eligible to purchase this product. */
      order_quantity_minimum?: number;
      /** @description The maximum quantity an order can contain when purchasing the product. */
      order_quantity_maximum?: number;
      /** @description Custom title for the product page. If not defined, the product name will be used as the meta title. */
      page_title?: string;
      /** @description Custom meta keywords for the product page. If not defined, the store's default keywords will be used. */
      meta_keywords?: string[];
      /** @description Custom meta description for the product page. If not defined, the store's default meta description will be used. */
      meta_description?: string;
      /** @description The number of times the product has been viewed. */
      view_count?: number;
      /**
       * Format: date-time
       * @description Pre-order release date. See the `availability` field for details on setting a product's availability to accept pre-orders.
       */
      preorder_release_date?: string | null;
      /** @description Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date. */
      preorder_message?: string;
      /**
       * @description If set to true then on the preorder release date the preorder status will automatically be removed.
       * If set to false, then on the release date the preorder status **will not** be removed. It will need to be changed manually either in the
       * control panel or using the API. Using the API set `availability` to `available`.
       */
      is_preorder_only?: boolean;
      /** @description False by default, indicating that this product's price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.) */
      is_price_hidden?: boolean;
      /** @description By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.) */
      price_hidden_label?: string;
      custom_url?: components['schemas']['customUrl_Full'];
      /** @description Type of product, defaults to `product`. */
      open_graph_type?: 'product' | 'album' | 'book' | 'drink' | 'food' | 'game' | 'movie' | 'song' | 'tv_show';
      /** @description Title of the product, if not specified the product name will be used instead. */
      open_graph_title?: string;
      /** @description Description to use for the product, if not specified then the meta_description will be used instead. */
      open_graph_description?: string;
      /** @description Flag to determine if product description or open graph description is used. */
      open_graph_use_meta_description?: boolean;
      /** @description Flag to determine if product name or open graph name is used. */
      open_graph_use_product_name?: boolean;
      /** @description Flag to determine if product image or open graph image is used. */
      open_graph_use_image?: boolean;
      /**
       * @description The brand can be created during a product PUT or POST request. If the brand already exists then the product will be added. If not the brand will be created and the product added. If using `brand_name` it performs a fuzzy match and adds the brand. eg. "Common Good" and "Common good" are the same. Brand name does not return as part of a product response. Only the `brand_id`.
       * @example Common Good
       */
      'brand_name or brand_id'?: string;
      /** @description Global Trade Item Number */
      gtin?: string;
      /** @description Manufacturer Part Number */
      mpn?: string;
      /**
       * @description The total rating for the product.
       *
       * @example 3.2
       */
      reviews_rating_sum?: number;
      /**
       * @description The number of times the product has been rated.
       *
       * @example 4
       */
      reviews_count?: number;
      /**
       * @description The total quantity of this product sold.
       *
       * @example 80
       */
      total_sold?: number;
      custom_fields?: components['schemas']['productCustomField_Put'][];
      bulk_pricing_rules?: components['schemas']['bulkPricingRule_Full'][];
      images?: components['schemas']['productImage_Full'][];
      videos?: components['schemas']['productVideo_Full'][];
    };
    /**
     * metafield_Put
     * @description Properties for updating metafields.
     */
    metafield_Put: {
      /**
       * @description Unique ID of the *Metafield*. Read-Only.
       * @example 6
       */
      id?: number;
    } & components['schemas']['metafield_Base'];
    /** metafield_Full */
    metafield_Full: components['schemas']['metafield_Put'] & {
      /**
       * Format: date-time
       * @description Date and time of the metafield's creation. Read-Only.
       *
       * @example 2018-05-07T20:14:17.000Z
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated. Read-Only.
       *
       * @example 2018-05-07T20:14:17.000Z
       */
      date_modified?: string;
    };
    /**
     * productVariant_Put
     * @description The model for a PUT to update variants on a product.
     */
    productVariant_Put: components['schemas']['productVariant_Base'] & {
      product_id?: number;
      sku?: string;
    };
    /** errorResponse_409 */
    errorResponse_409: {
      code?: number;
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    } & {
      errors?: components['schemas']['detailedErrors'];
    };
    /** errorResponse_422 */
    errorResponse_422: {
      code?: number;
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    } & {
      errors?: components['schemas']['detailedErrors'];
    };
    /**
     * productSortOrder
     * @description The relative priority of the product among other products inside the category.
     */
    productSortOrder: {
      /**
       * @description The ID of the associated product.
       * @example 99
       */
      product_id: number;
      /** @example 4 */
      sort_order: number;
    };
    /**
     * category_Full
     * @description Common Category object properties.
     */
    betacategory_Full: {
      /**
       * @description Unique ID of the *Category*. Increments sequentially.
       * Read-Only.
       */
      id?: number;
      /**
       * @description The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
       * Required in a POST if creating a child category.
       * @example 2
       */
      parent_id: number;
      /**
       * @description The name displayed for the category. Name is unique with respect to the category's siblings.
       * Required in a POST.
       * @example Bath
       */
      name: string;
      /**
       * @description The product description, which can include HTML formatting.
       *
       * @example We offer a wide variety of products perfect for relaxing
       */
      description?: string;
      /**
       * @description Number of views the category has on the storefront.
       *
       * @example 1050
       */
      views?: number;
      /**
       * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
       *
       * @example 3
       */
      sort_order?: number;
      /**
       * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
       *
       * @example Bath
       */
      page_title?: string;
      /** @description A comma-separated list of keywords that can be used to locate the category when searching the store. */
      search_keywords?: string;
      /** @description Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
      meta_keywords?: string[];
      /** @description Custom meta description for the category page. If not defined, the store's default meta description will be used. */
      meta_description?: string;
      /**
       * @description A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied.
       *
       * @example category.html
       */
      layout_file?: string;
      /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
      is_visible?: boolean;
      /** @description Determines how the products are sorted on category page load. */
      default_product_sort?:
        | 'use_store_settings'
        | 'featured'
        | 'newest'
        | 'best_selling'
        | 'alpha_asc'
        | 'alpha_desc'
        | 'avg_customer_review'
        | 'price_asc'
        | 'price_desc';
      /**
       * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field.
       *
       * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
       */
      image_url?: string;
      custom_url?: components['schemas']['betacustomUrl_Full'];
    };
    /**
     * metafield_Base
     * @description Metafield for products, categories, variants, and brands. The max number of metafields allowed on each product, category, variant, or brand is fifty. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    betametafield_Base: {
      /**
       * @description Unique ID of the *Metafield*. Read-Only.
       * @example 6
       */
      id?: number;
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * |Value|Description
       * |-|-|
       * |`app_only`|Private to the app that owns the field|
       * |`read`|Visible to other API consumers|
       * |`write`|Open for reading and writing by other API consumers|
       * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
       * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
       */
      permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
      /**
       * @description Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST.
       *
       * @example Warehouse Locations
       */
      namespace: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`. Required for POST.
       *
       * @example Location
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`. Required for POST.
       *
       * @example 4HG
       */
      value: string;
      /**
       * @description Description for the metafields.
       *
       * @example Location in the warehouse
       */
      description?: string;
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example product
       */
      resource_type?: 'category' | 'brand' | 'product' | 'variant';
      /**
       * @description The ID for the resource with which the metafield is associated.
       *
       * @example 111
       */
      resource_id?: number;
      /**
       * Format: date-time
       * @description Date and time of the metafield's creation. Read-Only.
       *
       * @example 2018-05-07T20:14:17.000Z
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated. Read-Only.
       *
       * @example 2018-05-07T20:14:17.000Z
       */
      date_modified?: string;
    };
    /**
     * metaCollection_Full
     * @description Data about the response, including pagination and collection totals.
     */
    betametaCollection_Full: {
      pagination?: components['schemas']['betapagination_Full'];
    };
    /**
     * pagination_Full
     * @description Data about the response, including pagination and collection totals.
     */
    betapagination_Full: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 36
       */
      total?: number;
      /**
       * @description Total number of items in the collection response.
       *
       * @example 36
       */
      count?: number;
      /**
       * @description The amount of items returned in the collection per page, controlled by the limit parameter.
       *
       * @example 50
       */
      per_page?: number;
      /**
       * @description The page you are currently on within the collection.
       *
       * @example 1
       */
      current_page?: number;
      /**
       * @description The total number of pages in the collection.
       *
       * @example 1
       */
      total_pages?: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /**
         * @description Link to the current page returned in the response.
         *
         * @example ?page=1&limit=50
         */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
    /**
     * metaEmpty_Full
     * @description Empty meta object; may be used later.
     */
    betametaEmpty_Full: { [key: string]: unknown };
    /** errorResponse_Full */
    betaerrorResponse_Full: components['schemas']['betaerror_Base'] & {
      errors?: components['schemas']['betadetailedErrors'];
    };
    /**
     * error_Base
     * @description Error payload for the BigCommerce API.
     */
    betaerror_Base: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /**
     * errorNotFound
     * @description Error payload for the BigCommerce API.
     */
    betaerrorNotFound: {
      /** @description 404 HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /**
     * errorNoContent
     * @description No-content response for the BigCommerce API.
     */
    betaerrorNoContent: {
      /** @description 204 HTTP status code. */
      status?: number;
      /** @description The error title describing the situation. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /** detailedErrors */
    betadetailedErrors: {
      additionalProperties?: string;
    };
    /** metafield_Post */
    betametafield_Post: components['schemas']['betametafield_Base'];
    /**
     * metafield_Put
     * @description Properties for updating metafields.
     */
    betametafield_Put: {
      /**
       * @description Unique ID of the *Metafield*. Read-Only.
       * @example 6
       */
      id?: number;
    } & components['schemas']['betametafield_Base'];
    /** metafield_Full */
    betametafield_Full: components['schemas']['betametafield_Put'] & {
      /**
       * Format: date-time
       * @description Date and time of the metafield's creation. Read-Only.
       *
       * @example 2018-05-07T20:14:17.000Z
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated. Read-Only.
       *
       * @example 2018-05-07T20:14:17.000Z
       */
      date_modified?: string;
    };
    /** errorResponse_409 */
    betaerrorResponse_409: {
      code?: number;
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    } & {
      errors?: components['schemas']['betadetailedErrors'];
    };
    /** errorResponse_422 */
    betaerrorResponse_422: {
      code?: number;
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    } & {
      errors?: components['schemas']['betadetailedErrors'];
    };
    /**
     * Custom Url Category
     * @description The custom URL for the category on the storefront.
     */
    custom_url: {
      /**
       * @description Category URL on the storefront.
       *
       * @example /shoes
       */
      url?: string;
      /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
      is_customized?: boolean;
    };
    /**
     * customUrl_Full
     * @description The custom URL for the product on the storefront.
     */
    betacustomUrl_Full: {
      /**
       * @description Product URL on the storefront.
       *
       * @example /shoes
       */
      url?: string;
      /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
      is_customized?: boolean;
    };
    CreateCategories: (
      | (components['schemas']['CategoryUuidData'] &
          components['schemas']['ParentIdCreateData'] &
          components['schemas']['CategoryData'])
      | (components['schemas']['TreeIdCreateData'] & components['schemas']['CategoryData'])
    )[];
    UpdateCategories: (
      | (components['schemas']['CategoryIdUpdateData'] &
          components['schemas']['CategoryUuidData'] &
          components['schemas']['ParentIdUpdateData'] &
          components['schemas']['CategoryData'])
      | (components['schemas']['CategoryIdUpdateData'] &
          components['schemas']['TreeIdUpdateData'] &
          components['schemas']['CategoryData'])
    )[];
    Category: {
      /** Format: uuid */
      category_uuid?: string;
      category_id?: number;
      parent_id?: number;
      tree_id?: number;
      name?: string;
      description?: string;
      views?: number;
      sort_order?: number;
      page_title?: string;
      search_keywords?: string;
      meta_keywords?: string[];
      meta_description?: string;
      layout_file?: string;
      is_visible?: boolean;
      default_product_sort?: string;
      image_url?: string;
      url?: components['schemas']['Url'];
    };
    CategoryUuidData: {
      /** Format: uuid */
      category_uuid?: string;
    };
    CategoryIdUpdateData: {
      category_id: number;
    };
    ParentIdCreateData: {
      parent_id: number;
    };
    TreeIdCreateData: {
      tree_id: number;
    };
    ParentIdUpdateData: {
      parent_id?: number;
    };
    TreeIdUpdateData: {
      tree_id?: number;
    };
    CategoryData: {
      name?: string;
      description?: string;
      views?: number;
      sort_order?: number;
      page_title?: string;
      search_keywords?: string;
      meta_keywords?: string[];
      meta_description?: string;
      layout_file?: string;
      is_visible?: boolean;
      default_product_sort?: string;
      image_url?: string;
      url?: components['schemas']['Url'];
    };
    Urls: components['schemas']['Url'][];
    Url: {
      path?: string;
      is_customized?: boolean;
    };
    MetaPagination: {
      pagination?: {
        /** @example 246 */
        total?: number;
        /** @example 5 */
        count?: number;
        /** @example 5 */
        per_page?: number;
        /** @example 1 */
        current_page?: number;
        /** @example 50 */
        total_pages?: number;
        links?: {
          /** @example ?limit=5&page=1 */
          previous?: string;
          /** @example ?limit=5&page=2 */
          current?: string;
          /** @example ?limit=5&page=3 */
          next?: string;
        };
      };
    };
    /** @description Details of errors. */
    DetailedErrors: { [key: string]: string };
    ErrorRequest: {
      errors?: components['schemas']['ErrorBasic'][];
    };
    ErrorBasic: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    };
    ErrorAdditional: {
      errors?: components['schemas']['DetailedErrors'];
    };
    MetaError: (components['schemas']['ErrorBasic'] & components['schemas']['ErrorAdditional'])[];
    MetaData: {
      total?: number;
      success?: number;
      failed?: number;
    };
    SuccessNoContentResponse: {
      meta?: components['schemas']['MetaData'];
    };
    PartialSuccessNoContentResponse: {
      errors?: components['schemas']['MetaError'];
      meta?: components['schemas']['MetaData'];
    };
    PartialSuccessResponse: {
      data?: components['schemas']['Category'][];
      meta?: components['schemas']['MetaData'];
    };
    SuccessResponse: {
      data?: components['schemas']['Category'][];
      errors?: components['schemas']['MetaError'];
      meta?: components['schemas']['MetaData'];
    };
    ErrorResponse: {
      errors?: components['schemas']['MetaError'];
      meta?: components['schemas']['MetaData'];
    };
    Tree: {
      id?: number;
      name?: string;
      channels?: number[];
    };
    CategoryNode: {
      id?: number;
      parent_id?: number;
      depth?: number;
      path?: number[];
      name?: string;
      is_visible?: boolean;
      children?: components['schemas']['CategoryNode'][];
    };
    beta4Category: {
      id?: number;
      parent_id?: number;
      tree_id?: number;
      name?: string;
      description?: string;
      views?: number;
      sort_order?: number;
      page_title?: string;
      search_keywords?: string;
      meta_keywords?: string[];
      meta_description?: string;
      layout_file?: string;
      is_visible?: boolean;
      default_product_sort?: string;
      image_url?: string;
      custom_url?: components['schemas']['CustomUrl'];
    };
    beta4CategoryData: {
      tree_id?: number;
      parent_id?: number;
      name?: string;
      description?: string;
      views?: number;
      sort_order?: number;
      page_title?: string;
      search_keywords?: string;
      meta_keywords?: string[];
      meta_description?: string;
      layout_file?: string;
      is_visible?: boolean;
      default_product_sort?: string;
      image_url?: string;
      custom_url?: components['schemas']['CustomUrl'];
    };
    CustomUrl: {
      url?: string;
      is_customized?: boolean;
    };
    MetaPaginationObject: {
      pagination?: {
        /** @example 246 */
        total?: number;
        /** @example 5 */
        count?: number;
        /** @example 5 */
        per_page?: number;
        /** @example 1 */
        current_page?: number;
        /** @example 50 */
        total_pages?: number;
        links?: {
          /** @example ?limit=5&page=2 */
          next?: string;
          /** @example ?limit=5&page=1 */
          current?: string;
        };
      };
    };
    beta4DetailedErrors: { [key: string]: string };
    /** @description Error payload for the BigCommerce API. */
    BaseError: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    };
    beta4ErrorResponse: components['schemas']['BaseError'] & {
      errors?: components['schemas']['beta4DetailedErrors'];
    };
    /** @description The count of product in the channels. */
    ProductsChannelCount: {
      /** @description Channel ID. */
      channel_id?: number;
      product_count?: number;
    };
    ProductsCategoriesCount: {
      product_id?: number;
      channels?: components['schemas']['CategoriesCount'][];
    };
    CategoriesCount: {
      channel_id?: number;
      category_count?: number;
    };
    ProductChannelAssignment: {
      product_id?: number;
      channel_id?: number;
    };
    ProductCategoryAssignment: {
      product_id?: number;
      category_id?: number;
    };
    beta5DetailedErrors: { [key: string]: string };
    beta5ErrorResponse: components['schemas']['BaseError'] & {
      errors?: components['schemas']['beta5DetailedErrors'];
    };
  };
  responses: {
    BrandCollectionResponse: {
      content: {
        'application/json': {
          data?: {
            /** @description Unique ID of the *Brand*. Read-Only. */
            id?: number;
            /**
             * @description The name of the brand. Must be unique.
             * Required in POST.
             * @example Common Good
             */
            name: string;
            /**
             * @description The title shown in the browser while viewing the brand.
             *
             * @example Common Good
             */
            page_title?: string;
            /** @description Comma-separated list of meta keywords to include in the HTML. */
            meta_keywords?: string[];
            /**
             * @description A meta description to include.
             *
             * @example Common Good is a modern brand.
             */
            meta_description?: string;
            /**
             * @description A comma-separated list of keywords that can be used to locate this brand.
             *
             * @example kitchen, laundry, cart, storage
             */
            search_keywords?: string;
            /**
             * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
             *
             * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
             */
            image_url?: string;
            /**
             * Custom Url Brand
             * @description The custom URL for the brand on the storefront.
             */
            custom_url?: {
              /**
               * @description Brand URL on the storefront.
               *
               * @example /shoes
               */
              url?: string;
              /**
               * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
               *
               * @example true
               */
              is_customized?: boolean;
            };
          }[];
          meta?: components['schemas']['metaCollection_Full'];
        };
      };
    };
    BrandImageUpload: {
      content: {
        'application/json': {
          data?: {
            image_url?: string;
          };
          meta?: { [key: string]: unknown };
        };
      };
    };
    BrandResponse: {
      content: {
        'application/json': {
          /**
           * Brand
           * @description Common Brand properties.
           */
          data?: {
            /** @description Unique ID of the *Brand*. Read-Only. */
            id?: number;
            /**
             * @description The name of the brand. Must be unique.
             * Required in POST.
             * @example Common Good
             */
            name: string;
            /**
             * @description The title shown in the browser while viewing the brand.
             *
             * @example Common Good
             */
            page_title?: string;
            /** @description Comma-separated list of meta keywords to include in the HTML. */
            meta_keywords?: string[];
            /**
             * @description A meta description to include.
             *
             * @example Common Good is a modern brand.
             */
            meta_description?: string;
            /**
             * @description A comma-separated list of keywords that can be used to locate this brand.
             *
             * @example kitchen, laundry, cart, storage
             */
            search_keywords?: string;
            /**
             * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
             *
             * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
             */
            image_url?: string;
            /**
             * Custom Url Brand
             * @description The custom URL for the brand on the storefront.
             */
            custom_url?: {
              /**
               * @description Brand URL on the storefront.
               *
               * @example /shoes
               */
              url?: string;
              /**
               * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
               *
               * @example true
               */
              is_customized?: boolean;
            };
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    BulkPricingRuleCollectionResponse: {
      content: {
        'application/json': {
          data?: components['schemas']['bulkPricingRule_Full'][];
          meta?: components['schemas']['metaCollection_Full'];
        };
      };
    };
    BulkPricingRuleResponse: {
      content: {
        'application/json': {
          data?: components['schemas']['bulkPricingRule_Full'];
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    CatalogSummaryResponse: {
      content: {
        'application/json': {
          /**
           * Catalog Summary
           * @description Catalog Summary object describes a lightweight summary of the catalog.
           */
          data?: {
            /**
             * @description A count of all inventory items in the catalog.
             *
             * @example 2000
             */
            inventory_count?: number;
            /**
             * Format: double
             * @description Total value of store's inventory.
             *
             * @example 267000
             */
            inventory_value?: number;
            /**
             * @description ID of the category containing the most products.
             *
             * @example 23
             */
            primary_category_id?: number;
            /**
             * @description Name of the category containing the most products.
             *
             * @example Shop All
             */
            primary_category_name?: string;
            /**
             * @description Total number of variants
             * @example 46
             */
            variant_count?: number;
            /**
             * Format: double
             * @description Highest priced variant
             * @example 249
             */
            highest_variant_price?: number;
            /**
             * Format: double
             * @description Average price of all variants
             * @example 83.07978261
             */
            average_variant_price?: number;
            /**
             * @description Lowest priced variant in the store
             * @example 7
             */
            lowest_variant_price?: string;
            /** @example 2018-08-15T00:00:00.000Z */
            oldest_variant_date?: string;
            /** @example 2018-08-16T00:00:00.000Z */
            newest_variant_date?: string;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    CatalogVariantCollectionResponse: {
      content: {
        'application/json': {
          data?: ({
            /**
             * Format: double
             * @description The cost price of the variant. Not affected by Price List prices.
             */
            cost_price?: number;
            /**
             * Format: double
             * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
             */
            price?: number;
            /**
             * Format: double
             * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
             */
            sale_price?: number;
            /**
             * Format: double
             * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
             */
            retail_price?: number;
            /**
             * Format: double
             * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
             */
            weight?: number;
            /**
             * Format: double
             * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.
             */
            width?: number;
            /**
             * Format: double
             * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.
             */
            height?: number;
            /**
             * Format: double
             * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.
             */
            depth?: number;
            /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
            is_free_shipping?: boolean;
            /**
             * Format: double
             * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
             */
            fixed_cost_shipping_price?: number;
            /** @description If `true`, this variant will not be purchasable on the storefront. */
            purchasing_disabled?: boolean;
            /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
            purchasing_disabled_message?: string;
            /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
            upc?: string;
            /** @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. */
            inventory_level?: number;
            /** @description When the variant hits this inventory level, it is considered low stock. */
            inventory_warning_level?: number;
            /** @description Identifies where in a warehouse the variant is located. */
            bin_picking_number?: string;
          } & {
            id?: number;
            product_id?: number;
            sku?: string;
            /** @description Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
            sku_id?: number;
            /** @description Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
            option_values?: ({
              /**
               * @description The name of the option.
               *
               * @example Color
               */
              option_display_name?: string;
              /**
               * @description The label of the option value.
               *
               * @example Beige
               */
              label?: string;
            } & {
              id?: number;
              option_id?: number;
            })[];
            /**
             * Format: double
             * @description The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.
             */
            calculated_price?: number;
          })[];
          meta?: components['schemas']['metaCollection_Full'];
        };
      };
    };
    CategoryCollectionResponse: {
      content: {
        'application/json': {
          data?: { [key: string]: unknown }[];
          meta?: components['schemas']['metaCollection_Full'];
        };
      };
    };
    CategoryResponse: {
      content: {
        'application/json': {
          data?: components['schemas']['category_Full'];
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    ComplexRuleCollectionResponse: {
      content: {
        'application/json': {
          data?: {
            /**
             * @description The unique numeric ID of the rule; increments sequentially.
             * Read-Only
             * @example 5
             */
            id?: number;
            /**
             * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
             *
             * @example 67
             */
            product_id?: number | null;
            /** @description The priority to give this rule when making adjustments to the product properties. */
            sort_order?: number;
            /**
             * @description Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
             *
             * @example true
             */
            enabled?: boolean;
            /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
            stop?: boolean;
            /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
            purchasing_disabled?: boolean;
            /**
             * @description Message displayed on the storefront when a rule disables the purchasing of a product.
             *
             * @example This product is not available at this time.
             */
            purchasing_disabled_message?: string;
            /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
            purchasing_hidden?: boolean;
            /**
             * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
             *
             * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
             */
            image_url?: string;
            /**
             * Adjuster
             * @description Adjuster for Complex Rules.
             */
            price_adjuster?: {
              /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              adjuster?: ('relative' | 'percentage') | null;
              /**
               * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
               *
               * @example 5
               */
              adjuster_value?: number;
            };
            /**
             * Adjuster
             * @description Adjuster for Complex Rules.
             */
            weight_adjuster?: {
              /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              adjuster?: ('relative' | 'percentage') | null;
              /**
               * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
               *
               * @example 5
               */
              adjuster_value?: number;
            };
            conditions?: {
              /**
               * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
               *
               * @example 3
               */
              id?: number | null;
              /**
               * @description The unique numeric ID of the rule with which the condition is associated.
               * Read-Only
               * @example 4
               */
              rule_id?: number | null;
              /**
               * @description The unique numeric ID of the modifier with which the rule condition is associated.
               * Required in /POST.
               * @example 55
               */
              modifier_id: number | null;
              /**
               * @description The unique numeric ID of the modifier value with which the rule condition is associated.
               * Required in /POST.
               * @example 256
               */
              modifier_value_id: number | null;
              /**
               * @description The unique numeric ID of the variant with which the rule condition is associated.
               * Required in /POST.
               * @example 1
               */
              variant_id: number | null;
              /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
              combination_id?: number;
            }[];
          }[];
          meta?: components['schemas']['metaCollection_Full'];
        };
      };
    };
    ComplexRuleResponse: {
      content: {
        'application/json': {
          /**
           * Complex Rule
           * @description Common ComplexRule properties.
           */
          data?: {
            /**
             * @description The unique numeric ID of the rule; increments sequentially.
             * Read-Only
             * @example 5
             */
            id?: number;
            /**
             * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
             *
             * @example 67
             */
            product_id?: number;
            /** @description The priority to give this rule when making adjustments to the product properties. */
            sort_order?: number;
            /**
             * @description Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
             *
             * @example true
             */
            enabled?: boolean;
            /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
            stop?: boolean;
            /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
            purchasing_disabled?: boolean;
            /**
             * @description Message displayed on the storefront when a rule disables the purchasing of a product.
             *
             * @example This product is not available at this time.
             */
            purchasing_disabled_message?: string;
            /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
            purchasing_hidden?: boolean;
            /**
             * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
             *
             * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
             */
            image_url?: string;
            /**
             * Adjuster
             * @description Adjuster for Complex Rules.
             */
            price_adjuster?: {
              /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              adjuster?: 'relative' | 'percentage';
              /**
               * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
               *
               * @example 5
               */
              adjuster_value?: number;
            };
            /**
             * Adjuster
             * @description Adjuster for Complex Rules.
             */
            weight_adjuster?: {
              /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              adjuster?: 'relative' | 'percentage';
              /**
               * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
               *
               * @example 5
               */
              adjuster_value?: number;
            };
            conditions?: {
              /**
               * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
               *
               * @example 3
               */
              id?: number;
              /**
               * @description The unique numeric ID of the rule with which the condition is associated.
               * Read-Only
               * @example 4
               */
              rule_id?: number;
              /**
               * @description The unique numeric ID of the modifier with which the rule condition is associated.
               * Required in /POST.
               * @example 55
               */
              modifier_id: number;
              /**
               * @description The unique numeric ID of the modifier value with which the rule condition is associated.
               * Required in /POST.
               * @example 256
               */
              modifier_value_id: number;
              /**
               * @description The unique numeric ID of the variant with which the rule condition is associated.
               * Required in /POST.
               * @example 1
               */
              variant_id: number;
              /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
              combination_id?: number;
            }[];
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    CustomFieldCollectionResponse: {
      content: {
        'application/json': {
          data?: {
            /**
             * @description The unique numeric ID of the custom field; increments sequentially.
             * Read-Only
             * @example 6
             */
            id?: number;
            /**
             * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
             *
             * @example ISBN
             */
            name: string;
            /**
             * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
             *
             * @example 1234567890123
             */
            value: string;
          }[];
          meta?: components['schemas']['metaCollection_Full'];
        };
      };
    };
    CustomFieldResponse: {
      content: {
        'application/json': {
          /**
           * Custom Field
           * @description Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product’s page, such as a book’s ISBN or a DVD’s release date.
           */
          data?: {
            /**
             * @description The unique numeric ID of the custom field; increments sequentially.
             * Read-Only
             * @example 6
             */
            id?: number;
            /**
             * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
             *
             * @example ISBN
             */
            name: string;
            /**
             * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
             *
             * @example 1234567890123
             */
            value: string;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    /** The requested category was not found. */
    Error404Response: {
      content: {
        'application/json': components['schemas']['error_Base'];
      };
    };
    /**
     * Unprocessable entity.
     *
     * Please verify if all requested products are assigned to the category.
     *
     * Please verify if all required fields are present in the request body and are filled with values correctly.
     */
    Error422Response: {
      content: {
        'application/json': components['schemas']['error_Base'];
      };
    };
    /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
    HTTP207Status: {
      content: {
        'application/json': components['schemas']['error_Base'];
      };
    };
    MetafieldCollectionResponse: {
      content: {
        'application/json': {
          data?: {
            /**
             * @description Unique ID of the *Metafield*. Read-Only.
             * @example 6
             */
            id?: number;
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *
             * |Value|Description
             * |-|-|
             * |`app_only`|Private to the app that owns the field|
             * |`read`|Visible to other API consumers|
             * |`write`|Open for reading and writing by other API consumers|
             * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
             * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
             */
            permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
            /**
             * @description Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST.
             *
             * @example Warehouse Locations
             */
            namespace: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`. Required for POST.
             *
             * @example Location
             */
            key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`. Required for POST.
             *
             * @example 4HG
             */
            value: string;
            /**
             * @description Description for the metafields.
             *
             * @example Location in the warehouse
             */
            description?: string;
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example product
             */
            resource_type?: 'category' | 'brand' | 'product' | 'variant';
            /**
             * @description The ID for the resource with which the metafield is associated.
             *
             * @example 111
             */
            resource_id?: number;
            /**
             * Format: date-time
             * @description Date and time of the metafield's creation. Read-Only.
             *
             * @example 2018-05-07T20:14:17.000Z
             */
            date_created?: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated. Read-Only.
             *
             * @example 2018-05-07T20:14:17.000Z
             */
            date_modified?: string;
          }[];
          meta?: components['schemas']['metaCollection_Full'];
        };
      };
    };
    MetafieldResponse: {
      content: {
        'application/json': {
          /**
           * Metafield
           * @description Common Metafield properties.
           */
          data?: {
            /**
             * Format: date-time
             * @description Date and time of the metafield's creation. Read-Only.
             *
             * @example 2018-05-07T20:14:17.000Z
             */
            date_created?: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated. Read-Only.
             *
             * @example 2018-05-07T20:14:17.000Z
             */
            date_modified?: string;
            /**
             * @description Description for the metafields.
             *
             * @example Location in the warehouse
             */
            description?: string;
            /**
             * @description Unique ID of the *Metafield*. Read-Only.
             * @example 6
             */
            id?: number;
            /**
             * @description The name of the field, for example: `location_id`, `color`. Required for POST.
             *
             * @example Location
             */
            key: string;
            /**
             * @description Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST.
             *
             * @example Warehouse Locations
             */
            namespace: string;
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *
             * |Value|Description
             * |-|-|
             * |`app_only`|Private to the app that owns the field|
             * |`read`|Visible to other API consumers|
             * |`write`|Open for reading and writing by other API consumers|
             * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
             * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
             */
            permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
            /**
             * @description The ID for the resource with which the metafield is associated.
             *
             * @example 111
             */
            resource_id?: number;
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example product
             */
            resource_type?: 'category' | 'brand' | 'product' | 'variant';
            /**
             * @description The value of the field, for example: `1`, `blue`. Required for POST.
             *
             * @example 4HG
             */
            value: string;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    ModifierCollectionResponse: {
      content: {
        'application/json': {
          data?: ({
            /** @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
            type:
              | 'date'
              | 'checkbox'
              | 'file'
              | 'text'
              | 'multi_line_text'
              | 'numbers_only_text'
              | 'radio_buttons'
              | 'rectangles'
              | 'dropdown'
              | 'product_list'
              | 'product_list_with_images'
              | 'swatch';
            /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
            required: boolean;
            /** @description The order the modifiers display on the product detail page. */
            sort_order?: number;
            /**
             * Option Config
             * @description The values for option config can vary based on the Modifier created.
             */
            config?: {
              /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
              default_value?: string;
              /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
              checked_by_default?: boolean;
              /** @description (checkbox) Label displayed for the checkbox option. */
              checkbox_label?: string;
              /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
              date_limited?: boolean;
              /**
               * @description (date) The type of limit that is allowed to be entered on a date option.
               *
               * @example range
               */
              date_limit_mode?: 'earliest' | 'range' | 'latest';
              /**
               * Format: date
               * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
               */
              date_earliest_value?: string;
              /**
               * Format: date
               * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
               */
              date_latest_value?: string;
              /**
               * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
               *
               * @example specific
               */
              file_types_mode?: 'specific' | 'all';
              /**
               * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
               *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
               *   `other` - Allows file types defined in the `file_types_other` array.
               */
              file_types_supported?: string[];
              /** @description (file) A list of other file types allowed with the file upload option. */
              file_types_other?: string[];
              /**
               * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
               *
               * @example 5
               */
              file_max_size?: number;
              /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
              text_characters_limited?: boolean;
              /**
               * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
               *
               * @example 1
               */
              text_min_length?: number;
              /**
               * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
               *
               * @example 55
               */
              text_max_length?: number;
              /**
               * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
               *
               * @example true
               */
              text_lines_limited?: boolean;
              /**
               * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
               *
               * @example 4
               */
              text_max_lines?: number;
              /**
               * @description (numbers_only_text) Flag to limit the value of a number option.
               *
               * @example true
               */
              number_limited?: boolean;
              /**
               * @description (numbers_only_text) The type of limit on values entered for a number option.
               *
               * @example lowest
               */
              number_limit_mode?: 'lowest' | 'highest' | 'range';
              /**
               * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
               *
               * @example 100
               */
              number_lowest_value?: number;
              /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
              number_highest_value?: number;
              /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
              number_integers_only?: boolean;
              /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
              product_list_adjusts_inventory?: boolean;
              /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
              product_list_adjusts_pricing?: boolean;
              /**
               * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
               *
               * @example weight
               */
              product_list_shipping_calc?: 'none' | 'weight' | 'package';
            };
            option_values?: (({
              /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: { [key: string]: unknown };
            } & {
              adjusters?: {
                /**
                 * Adjuster
                 * @description Adjuster for Complex Rules.
                 */
                price?: {
                  /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  adjuster?: 'relative' | 'percentage';
                  /**
                   * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                   *
                   * @example 5
                   */
                  adjuster_value?: number;
                };
                /**
                 * Adjuster
                 * @description Adjuster for Complex Rules.
                 */
                weight?: {
                  /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  adjuster?: 'relative' | 'percentage';
                  /**
                   * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                   *
                   * @example 5
                   */
                  adjuster_value?: number;
                };
                /**
                 * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                 *
                 * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                 */
                image_url?: string;
                purchasing_disabled?: {
                  /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                  status?: boolean;
                  /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                  message?: string;
                };
              };
            }) & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            })[];
          } & {
            /**
             * @description The unique numeric ID of the modifier; increments sequentially.
             *
             * @example 12
             */
            id?: number;
            /**
             * @description The unique numeric ID of the product to which the option belongs.
             *
             * @example 77
             */
            product_id?: number;
            /**
             * @description The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
             *
             * @example Add-a-$5-Donation1535039590-191
             */
            name?: string;
            /**
             * @description The name of the option shown on the storefront.
             *
             * @example Donation
             */
            display_name?: string;
          })[];
          meta?: components['schemas']['metaCollection_Full'];
        };
      };
    };
    ModifierResponse: {
      content: {
        'application/json': {
          /**
           * Modifer
           * @description Product Modifier
           */
          data?: {
            /** @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
            type:
              | 'date'
              | 'checkbox'
              | 'file'
              | 'text'
              | 'multi_line_text'
              | 'numbers_only_text'
              | 'radio_buttons'
              | 'rectangles'
              | 'dropdown'
              | 'product_list'
              | 'product_list_with_images'
              | 'swatch';
            /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
            required: boolean;
            /** @description The order the modifiers display on the product detail page. */
            sort_order?: number;
            /**
             * Option Config
             * @description The values for option config can vary based on the Modifier created.
             */
            config?: {
              /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
              default_value?: string;
              /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
              checked_by_default?: boolean;
              /** @description (checkbox) Label displayed for the checkbox option. */
              checkbox_label?: string;
              /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
              date_limited?: boolean;
              /**
               * @description (date) The type of limit that is allowed to be entered on a date option.
               *
               * @example range
               */
              date_limit_mode?: 'earliest' | 'range' | 'latest';
              /**
               * Format: date
               * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
               */
              date_earliest_value?: string;
              /**
               * Format: date
               * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
               */
              date_latest_value?: string;
              /**
               * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
               *
               * @example specific
               */
              file_types_mode?: 'specific' | 'all';
              /**
               * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
               *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
               *   `other` - Allows file types defined in the `file_types_other` array.
               */
              file_types_supported?: string[];
              /** @description (file) A list of other file types allowed with the file upload option. */
              file_types_other?: string[];
              /**
               * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
               *
               * @example 5
               */
              file_max_size?: number;
              /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
              text_characters_limited?: boolean;
              /**
               * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
               *
               * @example 1
               */
              text_min_length?: number;
              /**
               * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
               *
               * @example 55
               */
              text_max_length?: number;
              /**
               * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
               *
               * @example true
               */
              text_lines_limited?: boolean;
              /**
               * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
               *
               * @example 4
               */
              text_max_lines?: number;
              /**
               * @description (numbers_only_text) Flag to limit the value of a number option.
               *
               * @example true
               */
              number_limited?: boolean;
              /**
               * @description (numbers_only_text) The type of limit on values entered for a number option.
               *
               * @example lowest
               */
              number_limit_mode?: 'lowest' | 'highest' | 'range';
              /**
               * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
               *
               * @example 100
               */
              number_lowest_value?: number;
              /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
              number_highest_value?: number;
              /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
              number_integers_only?: boolean;
              /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
              product_list_adjusts_inventory?: boolean;
              /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
              product_list_adjusts_pricing?: boolean;
              /**
               * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
               *
               * @example weight
               */
              product_list_shipping_calc?: 'none' | 'weight' | 'package';
            };
            option_values?: (({
              /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: { [key: string]: unknown };
            } & {
              adjusters?: {
                /**
                 * Adjuster
                 * @description Adjuster for Complex Rules.
                 */
                price?: {
                  /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  adjuster?: 'relative' | 'percentage';
                  /**
                   * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                   *
                   * @example 5
                   */
                  adjuster_value?: number;
                };
                /**
                 * Adjuster
                 * @description Adjuster for Complex Rules.
                 */
                weight?: {
                  /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  adjuster?: 'relative' | 'percentage';
                  /**
                   * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                   *
                   * @example 5
                   */
                  adjuster_value?: number;
                };
                /**
                 * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                 *
                 * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                 */
                image_url?: string;
                purchasing_disabled?: {
                  /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                  status?: boolean;
                  /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                  message?: string;
                };
              };
            }) & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            })[];
          } & {
            /**
             * @description The unique numeric ID of the modifier; increments sequentially.
             *
             * @example 12
             */
            id?: number;
            /**
             * @description The unique numeric ID of the product to which the option belongs.
             *
             * @example 77
             */
            product_id?: number;
            /**
             * @description The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
             *
             * @example Add-a-$5-Donation1535039590-191
             */
            name?: string;
            /**
             * @description The name of the option shown on the storefront.
             *
             * @example Donation
             */
            display_name?: string;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    ModifierValueCollectionResponse: {
      content: {
        'application/json': {
          data?: (({
            /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            is_default?: boolean;
            /**
             * @description The text display identifying the value on the storefront. Required in a /POST.
             *
             * @example Green
             */
            label: string;
            /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
            sort_order: number;
            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            value_data?: { [key: string]: unknown };
          } & {
            adjusters?: {
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              price?: {
                /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: 'relative' | 'percentage';
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              weight?: {
                /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: 'relative' | 'percentage';
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
               *
               * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
               */
              image_url?: string;
              purchasing_disabled?: {
                /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                status?: boolean;
                /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                message?: string;
              };
            };
          }) & {
            /** @description The unique numeric ID of the value; increments sequentially. */
            id?: number;
          })[];
          meta?: components['schemas']['metaCollection_Full'];
        };
      };
    };
    ModifierValueResponse: {
      content: {
        'application/json': {
          /**
           * Modifier Value
           * @description Part of Modifier Value Response
           */
          data?: ({
            /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            is_default?: boolean;
            /**
             * @description The text display identifying the value on the storefront. Required in a /POST.
             *
             * @example Green
             */
            label: string;
            /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
            sort_order: number;
            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            value_data?: { [key: string]: unknown };
          } & {
            adjusters?: {
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              price?: {
                /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: 'relative' | 'percentage';
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              weight?: {
                /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: 'relative' | 'percentage';
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
               *
               * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
               */
              image_url?: string;
              purchasing_disabled?: {
                /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                status?: boolean;
                /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                message?: string;
              };
            };
          }) & {
            /** @description The unique numeric ID of the value; increments sequentially. */
            id?: number;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    OptionCollectionResponse: {
      content: {
        'application/json': {
          data?: ({
            /**
             * @description The unique numerical ID of the option, increments sequentially.
             *
             * @example 55
             */
            id?: number;
            /**
             * @description The unique numerical ID of the product to which the option belongs.
             *
             * @example 4
             */
            product_id?: number;
            /**
             * @description The name of the option shown on the storefront.
             *
             * @example Add-a-$5-Donation1535042499-187
             */
            display_name?: string;
            /** @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
            type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
            /**
             * Option Config
             * @description The values for option config can vary based on the Modifier created.
             */
            config?: {
              /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
              default_value?: string;
              /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
              checked_by_default?: boolean;
              /** @description (checkbox) Label displayed for the checkbox option. */
              checkbox_label?: string;
              /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
              date_limited?: boolean;
              /**
               * @description (date) The type of limit that is allowed to be entered on a date option.
               *
               * @example range
               */
              date_limit_mode?: 'earliest' | 'range' | 'latest';
              /**
               * Format: date
               * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
               */
              date_earliest_value?: string;
              /**
               * Format: date
               * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
               */
              date_latest_value?: string;
              /**
               * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
               *
               * @example specific
               */
              file_types_mode?: 'specific' | 'all';
              /**
               * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
               *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
               *   `other` - Allows file types defined in the `file_types_other` array.
               */
              file_types_supported?: string[];
              /** @description (file) A list of other file types allowed with the file upload option. */
              file_types_other?: string[];
              /**
               * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
               *
               * @example 5
               */
              file_max_size?: number;
              /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
              text_characters_limited?: boolean;
              /**
               * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
               *
               * @example 1
               */
              text_min_length?: number;
              /**
               * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
               *
               * @example 55
               */
              text_max_length?: number;
              /**
               * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
               *
               * @example true
               */
              text_lines_limited?: boolean;
              /**
               * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
               *
               * @example 4
               */
              text_max_lines?: number;
              /**
               * @description (numbers_only_text) Flag to limit the value of a number option.
               *
               * @example true
               */
              number_limited?: boolean;
              /**
               * @description (numbers_only_text) The type of limit on values entered for a number option.
               *
               * @example lowest
               */
              number_limit_mode?: 'lowest' | 'highest' | 'range';
              /**
               * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
               *
               * @example 100
               */
              number_lowest_value?: number;
              /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
              number_highest_value?: number;
              /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
              number_integers_only?: boolean;
              /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
              product_list_adjusts_inventory?: boolean;
              /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
              product_list_adjusts_pricing?: boolean;
              /**
               * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
               *
               * @example weight
               */
              product_list_shipping_calc?: 'none' | 'weight' | 'package';
            };
            /**
             * @description Order in which the option is displayed on the storefront.
             * @example 1
             */
            sort_order?: number;
            option_values?: ({
              /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: { [key: string]: unknown };
            } & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            })[];
            /** @description Publicly available image url */
            image_url?: string;
          } & {
            /**
             * @description The unique option name, auto-generated from the display name, a timestamp, and the product ID.
             *
             * @example Add-a-$5-Donation1535042499-187
             */
            name?: string;
          })[];
          meta?: components['schemas']['metaCollection_Full'];
        };
      };
    };
    OptionResponse: {
      content: {
        'application/json': {
          /** Option */
          data?: {
            /**
             * @description The unique numerical ID of the option, increments sequentially.
             *
             * @example 55
             */
            id?: number;
            /**
             * @description The unique numerical ID of the product to which the option belongs.
             *
             * @example 4
             */
            product_id?: number;
            /**
             * @description The name of the option shown on the storefront.
             *
             * @example Add-a-$5-Donation1535042499-187
             */
            display_name?: string;
            /** @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
            type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
            /**
             * Option Config
             * @description The values for option config can vary based on the Modifier created.
             */
            config?: {
              /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
              default_value?: string;
              /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
              checked_by_default?: boolean;
              /** @description (checkbox) Label displayed for the checkbox option. */
              checkbox_label?: string;
              /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
              date_limited?: boolean;
              /**
               * @description (date) The type of limit that is allowed to be entered on a date option.
               *
               * @example range
               */
              date_limit_mode?: 'earliest' | 'range' | 'latest';
              /**
               * Format: date
               * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
               */
              date_earliest_value?: string;
              /**
               * Format: date
               * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
               */
              date_latest_value?: string;
              /**
               * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
               *
               * @example specific
               */
              file_types_mode?: 'specific' | 'all';
              /**
               * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
               *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
               *   `other` - Allows file types defined in the `file_types_other` array.
               */
              file_types_supported?: string[];
              /** @description (file) A list of other file types allowed with the file upload option. */
              file_types_other?: string[];
              /**
               * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
               *
               * @example 5
               */
              file_max_size?: number;
              /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
              text_characters_limited?: boolean;
              /**
               * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
               *
               * @example 1
               */
              text_min_length?: number;
              /**
               * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
               *
               * @example 55
               */
              text_max_length?: number;
              /**
               * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
               *
               * @example true
               */
              text_lines_limited?: boolean;
              /**
               * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
               *
               * @example 4
               */
              text_max_lines?: number;
              /**
               * @description (numbers_only_text) Flag to limit the value of a number option.
               *
               * @example true
               */
              number_limited?: boolean;
              /**
               * @description (numbers_only_text) The type of limit on values entered for a number option.
               *
               * @example lowest
               */
              number_limit_mode?: 'lowest' | 'highest' | 'range';
              /**
               * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
               *
               * @example 100
               */
              number_lowest_value?: number;
              /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
              number_highest_value?: number;
              /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
              number_integers_only?: boolean;
              /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
              product_list_adjusts_inventory?: boolean;
              /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
              product_list_adjusts_pricing?: boolean;
              /**
               * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
               *
               * @example weight
               */
              product_list_shipping_calc?: 'none' | 'weight' | 'package';
            };
            /**
             * @description Order in which the option is displayed on the storefront.
             * @example 1
             */
            sort_order?: number;
            option_values?: ({
              /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: { [key: string]: unknown };
            } & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            })[];
            /** @description Publicly available image url */
            image_url?: string;
          } & {
            /**
             * @description The unique option name, auto-generated from the display name, a timestamp, and the product ID.
             *
             * @example Add-a-$5-Donation1535042499-187
             */
            name?: string;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    OptionValueCollectionResponse: {
      content: {
        'application/json': {
          data?: ({
            /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            is_default?: boolean;
            /**
             * @description The text display identifying the value on the storefront. Required in a /POST.
             *
             * @example Green
             */
            label: string;
            /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
            sort_order: number;
            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            value_data?: { [key: string]: unknown };
          } & {
            /** @description The unique numeric ID of the value; increments sequentially. */
            id?: number;
          })[];
          meta?: components['schemas']['metaCollection_Full'];
        };
      };
    };
    OptionValueResponse: {
      content: {
        'application/json': {
          /** Option Value */
          data?: {
            /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            is_default?: boolean;
            /**
             * @description The text display identifying the value on the storefront. Required in a /POST.
             *
             * @example Green
             */
            label: string;
            /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
            sort_order: number;
            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            value_data?: { [key: string]: unknown };
          } & {
            /** @description The unique numeric ID of the value; increments sequentially. */
            id?: number;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    ProductCollectionResponse: {
      content: {
        'application/json': {
          data?: components['schemas']['product_Full'][];
          meta?: components['schemas']['metaCollection_Full'];
        };
      };
    };
    ProductImageCollectionResponse: {
      content: {
        'application/json': {
          data?: ({
            /** @description The unique numeric ID of the image; increments sequentially. */
            id?: number;
            /** @description The unique numeric identifier for the product with which the image is associated. */
            product_id?: number;
            /** @description The local path to the original image file uploaded to BigCommerce. */
            image_file?: string;
            /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
            url_zoom?: string;
            /** @description The standard URL for this image. By default, this is used for product-page images. */
            url_standard?: string;
            /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
            url_thumbnail?: string;
            /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
            url_tiny?: string;
            /**
             * Format: date-time
             * @description The date on which the product image was modified.
             */
            date_modified?: string;
            /** @description Flag for identifying whether the image is used as the product's thumbnail. */
            is_thumbnail?: boolean;
            /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
            sort_order?: number;
            /** @description The description for the image. */
            description?: string;
          } & {
            /** @description The unique numeric ID of the image; increments sequentially. */
            id?: number;
            /** @description The unique numeric identifier for the product with which the image is associated. */
            product_id?: number;
            /** @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product. */
            image_file?: string;
            /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
            url_zoom?: string;
            /** @description The standard URL for this image. By default, this is used for product-page images. */
            url_standard?: string;
            /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
            url_thumbnail?: string;
            /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
            url_tiny?: string;
            /**
             * Format: date-time
             * @description The date on which the product image was modified.
             */
            date_modified?: string;
            /**
             * @description Publically available URL.
             * Use the image_url when creating a product.
             * @example https://upload.wikimedia.org/wikipedia/commons/7/7f/Anglel_Bless_Legendary_Hills_1_m%C4%9Bs%C3%ADc_st%C3%A1%C5%99%C3%AD.jpg
             */
            image_url?: string;
          })[];
          meta?: components['schemas']['metaCollection_Full'];
        };
      };
    };
    ProductImageResponse: {
      content: {
        'application/json': {
          /** Product Image */
          data?: {
            /** @description The unique numeric ID of the image; increments sequentially. */
            id?: number;
            /** @description The unique numeric identifier for the product with which the image is associated. */
            product_id?: number;
            /** @description The local path to the original image file uploaded to BigCommerce. */
            image_file?: string;
            /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
            url_zoom?: string;
            /** @description The standard URL for this image. By default, this is used for product-page images. */
            url_standard?: string;
            /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
            url_thumbnail?: string;
            /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
            url_tiny?: string;
            /**
             * Format: date-time
             * @description The date on which the product image was modified.
             */
            date_modified?: string;
            /** @description Flag for identifying whether the image is used as the product's thumbnail. */
            is_thumbnail?: boolean;
            /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
            sort_order?: number;
            /** @description The description for the image. */
            description?: string;
          } & {
            /** @description The unique numeric ID of the image; increments sequentially. */
            id?: number;
            /** @description The unique numeric identifier for the product with which the image is associated. */
            product_id?: number;
            /** @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product. */
            image_file?: string;
            /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
            url_zoom?: string;
            /** @description The standard URL for this image. By default, this is used for product-page images. */
            url_standard?: string;
            /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
            url_thumbnail?: string;
            /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
            url_tiny?: string;
            /**
             * Format: date-time
             * @description The date on which the product image was modified.
             */
            date_modified?: string;
            /**
             * @description Publically available URL.
             * Use the image_url when creating a product.
             * @example https://upload.wikimedia.org/wikipedia/commons/7/7f/Anglel_Bless_Legendary_Hills_1_m%C4%9Bs%C3%ADc_st%C3%A1%C5%99%C3%AD.jpg
             */
            image_url?: string;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    ProductResponse: {
      content: {
        'application/json': {
          meta?: { [key: string]: unknown };
          product_Full?: components['schemas']['product_Full'];
        };
        'example-1': unknown;
      };
    };
    ProductReviewCollectionResponse: {
      content: {
        'application/json': {
          data?: ({
            /**
             * @description The title for the product review.
             * Required in /POST.
             */
            title: string;
            /** @description The text for the product review. */
            text?: string;
            /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
            status?: string;
            /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
            rating?: number;
            /** @description The email of the reviewer. Must be a valid email, or an empty string. */
            email?: string;
            /** @description The name of the reviewer. */
            name?: string;
            /**
             * Format: date-time
             * @description Date the product was reviewed. Required in /POST.
             */
            date_reviewed: string;
          } & {
            /** @description The unique numeric ID of the product review; increments sequentially. */
            id?: number;
            /** @description The unique numeric identifier for the product with which the review is associated. */
            product_id?: number;
            /**
             * Format: date-time
             * @description Date the product review was created.
             */
            date_created?: string;
            /**
             * Format: date-time
             * @description Date the product review was modified.
             */
            date_modified?: string;
          })[];
          meta?: components['schemas']['metaCollection_Full'];
        };
      };
    };
    ProductReviewResponse: {
      content: {
        'application/json': {
          /**
           * Product Review
           * @description A product review model.
           */
          data?: {
            /**
             * @description The title for the product review.
             * Required in /POST.
             */
            title: string;
            /** @description The text for the product review. */
            text?: string;
            /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
            status?: string;
            /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
            rating?: number;
            /** @description The email of the reviewer. Must be a valid email, or an empty string. */
            email?: string;
            /** @description The name of the reviewer. */
            name?: string;
            /**
             * Format: date-time
             * @description Date the product was reviewed. Required in /POST.
             */
            date_reviewed: string;
          } & {
            /** @description The unique numeric ID of the product review; increments sequentially. */
            id?: number;
            /** @description The unique numeric identifier for the product with which the review is associated. */
            product_id?: number;
            /**
             * Format: date-time
             * @description Date the product review was created.
             */
            date_created?: string;
            /**
             * Format: date-time
             * @description Date the product review was modified.
             */
            date_modified?: string;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    ProductSortOrderResponse: {
      content: {
        'application/json': { [key: string]: unknown };
      };
    };
    ProductVideoCollectionResponse: {
      content: {
        'application/json': {
          data?: ({
            /** @description The title for the video. If left blank, this will be filled in according to data on a host site. */
            title?: string;
            /** @description The description for the video. If left blank, this will be filled in according to data on a host site. */
            description?: string;
            /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
            sort_order?: number;
            /** @description The video type (a short name of a host site). */
            type?: 'youtube';
          } & {
            /** @description The unique numeric ID of the product video; increments sequentially. */
            id?: number;
            /** @description The ID of the video on a host site. */
            video_id?: string;
            /** @description The unique numeric identifier for the product with which the image is associated. */
            product_id?: number;
            /** @description Length of the video. This will be filled in according to data on a host site. */
            length?: string;
          })[];
          /**
           * Collection Meta
           * @description Data about the response, including pagination and collection totals.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    ProductVideoResponse: {
      content: {
        'application/json': {
          /**
           * Product Video
           * @description A product video model.
           */
          data?: {
            /** @description The title for the video. If left blank, this will be filled in according to data on a host site. */
            title?: string;
            /** @description The description for the video. If left blank, this will be filled in according to data on a host site. */
            description?: string;
            /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
            sort_order?: number;
            /** @description The video type (a short name of a host site). */
            type?: 'youtube';
          } & {
            /** @description The unique numeric ID of the product video; increments sequentially. */
            id?: number;
            /** @description The ID of the video on a host site. */
            video_id?: string;
            /** @description The unique numeric identifier for the product with which the image is associated. */
            product_id?: number;
            /** @description Length of the video. This will be filled in according to data on a host site. */
            length?: string;
          };
          meta?: components['schemas']['metaEmpty_Full'];
        };
      };
    };
    VariantCollectionResponse: {
      content: {
        'application/json': {
          data?: ({
            /**
             * Format: double
             * @description The cost price of the variant. Not affected by Price List prices.
             */
            cost_price?: number;
            /**
             * Format: double
             * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
             */
            price?: number;
            /**
             * Format: double
             * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
             */
            sale_price?: number;
            /**
             * Format: double
             * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
             */
            retail_price?: number;
            /**
             * Format: double
             * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
             */
            weight?: number;
            /**
             * Format: double
             * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.
             */
            width?: number;
            /**
             * Format: double
             * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.
             */
            height?: number;
            /**
             * Format: double
             * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.
             */
            depth?: number;
            /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
            is_free_shipping?: boolean;
            /**
             * Format: double
             * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
             */
            fixed_cost_shipping_price?: number;
            /** @description If `true`, this variant will not be purchasable on the storefront. */
            purchasing_disabled?: boolean;
            /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
            purchasing_disabled_message?: string;
            /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
            upc?: string;
            /** @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. */
            inventory_level?: number;
            /** @description When the variant hits this inventory level, it is considered low stock. */
            inventory_warning_level?: number;
            /** @description Identifies where in a warehouse the variant is located. */
            bin_picking_number?: string;
          } & {
            id?: number;
            product_id?: number;
            sku?: string;
            /** @description Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
            sku_id?: number;
            /** @description Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
            option_values?: ({
              /**
               * @description The name of the option.
               *
               * @example Color
               */
              option_display_name?: string;
              /**
               * @description The label of the option value.
               *
               * @example Beige
               */
              label?: string;
            } & {
              id?: number;
              option_id?: number;
            })[];
            /**
             * Format: double
             * @description The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.
             */
            calculated_price?: number;
          })[];
          /**
           * Collection Meta
           * @description Data about the response, including pagination and collection totals.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    VariantResponse: {
      content: {
        'application/json': {
          data?: {
            /**
             * Format: double
             * @description The cost price of the variant. Not affected by Price List prices.
             */
            cost_price?: number;
            /**
             * Format: double
             * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
             */
            price?: number;
            /**
             * Format: double
             * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
             */
            sale_price?: number;
            /**
             * Format: double
             * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
             */
            retail_price?: number;
            /**
             * Format: double
             * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
             */
            weight?: number;
            /**
             * Format: double
             * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.
             */
            width?: number;
            /**
             * Format: double
             * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.
             */
            height?: number;
            /**
             * Format: double
             * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.
             */
            depth?: number;
            /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
            is_free_shipping?: boolean;
            /**
             * Format: double
             * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
             */
            fixed_cost_shipping_price?: number;
            /** @description If `true`, this variant will not be purchasable on the storefront. */
            purchasing_disabled?: boolean;
            /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
            purchasing_disabled_message?: string;
            /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
            upc?: string;
            /** @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. */
            inventory_level?: number;
            /** @description When the variant hits this inventory level, it is considered low stock. */
            inventory_warning_level?: number;
            /** @description Identifies where in a warehouse the variant is located. */
            bin_picking_number?: string;
          } & {
            id?: number;
            product_id?: number;
            sku?: string;
            /** @description Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
            sku_id?: number;
            /** @description Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
            option_values?: ({
              /**
               * @description The name of the option.
               *
               * @example Color
               */
              option_display_name?: string;
              /**
               * @description The label of the option value.
               *
               * @example Beige
               */
              label?: string;
            } & {
              id?: number;
              option_id?: number;
            })[];
            /**
             * Format: double
             * @description The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.
             */
            calculated_price?: number;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    betaMetafieldCollectionResponse: {
      content: {
        'application/json': {
          data?: {
            /**
             * @description Unique ID of the *Metafield*. Read-Only.
             * @example 6
             */
            id?: number;
            /** @description Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
            permission_set: 'app_only' | 'read' | 'write';
            /**
             * @description Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST.
             *
             * @example Warehouse Locations
             */
            namespace: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`. Required for POST.
             *
             * @example Location
             */
            key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`. Required for POST.
             *
             * @example 4HG
             */
            value: string;
            /**
             * @description Description for the metafields.
             *
             * @example Location in the warehouse
             */
            description?: string;
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example product
             */
            resource_type?: 'category' | 'brand' | 'product' | 'variant';
            /**
             * @description The ID for the resource with which the metafield is associated.
             *
             * @example 111
             */
            resource_id?: number;
            /**
             * Format: date-time
             * @description Date and time of the metafield's creation. Read-Only.
             *
             * @example 2018-05-07T20:14:17.000Z
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated. Read-Only.
             *
             * @example 2018-05-07T20:14:17.000Z
             */
            updated_at?: string;
          }[];
          meta?: components['schemas']['betametaCollection_Full'];
        };
      };
    };
    betaMetafieldResponse: {
      content: {
        'application/json': {
          /**
           * Metafield
           * @description Common Metafield properties.
           */
          data?: {
            /**
             * @description Unique ID of the *Metafield*. Read-Only.
             * @example 6
             */
            id?: number;
            /** @description Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for POST. */
            permission_set: 'app_only' | 'read' | 'write';
            /**
             * @description Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST.
             *
             * @example Warehouse Locations
             */
            namespace: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`. Required for POST.
             *
             * @example Location
             */
            key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`. Required for POST.
             *
             * @example 4HG
             */
            value: string;
            /**
             * @description Description for the metafields.
             *
             * @example Location in the warehouse
             */
            description?: string;
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example product
             */
            resource_type?: 'category' | 'brand' | 'product' | 'variant';
            /**
             * @description The ID for the resource with which the metafield is associated.
             *
             * @example 111
             */
            resource_id?: number;
            /**
             * Format: date-time
             * @description Date and time of the metafield's creation. Read-Only.
             *
             * @example 2018-05-07T20:14:17.000Z
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated. Read-Only.
             *
             * @example 2018-05-07T20:14:17.000Z
             */
            updated_at?: string;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
    betaCategoryCollectionResponse: {
      content: {
        'application/json': {
          data?: unknown[];
          meta?: components['schemas']['betametaCollection_Full'];
        };
      };
    };
    betaCategoryResponse: {
      content: {
        'application/json': {
          data?: components['schemas']['betacategory_Full'];
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
  };
  parameters: {
    /** @description The template file, for example: `pages/home`. */
    FilterTemplateFileParam: string;
    /** @description Filter items by id. */
    FilterIdParam: number;
    /** @description Filter items by sku. */
    FilterSkuParam: string;
    /** @description Filter items by name. */
    FilterNameParam: string;
    /** @description Filter items by email. */
    FilterEmailParam: string;
    /** @description Filter items by source. */
    FilterSourceParam: string;
    /** @description Filter items by order_id. */
    FilterOrderIdParam: number;
    /** @description Filter items by upc. */
    FilterUpcParam: string;
    /** @description Filter items by price. */
    FilterPriceParam: number;
    /** @description Filter items by sale_price. */
    FilterSalePriceParam: number;
    /** @description Filter items by retail_price. */
    FilterRetailPriceParam: number;
    /** @description Filter items by map_price. */
    FilterMapPriceParam: number;
    /** @description Filter items by calculated_price. */
    FilterCalculatedPriceParam: number;
    /** @description Filter items by weight. */
    FilterWeightParam: number;
    /** @description Filter items by condition. */
    FilterConditionParam: 'new' | 'used' | 'refurbished';
    /** @description Filter items by brand_id. */
    FilterBrandIdParam: number;
    /** @description Filter items by date_modified. For example `v3/catalog/products?date_modified:min=2018-06-15` */
    FilterDateModifiedParam: string;
    /** @description Filter items by date_created. */
    FilterDateCreatedParam: string;
    /** @description Filter items by date_last_imported. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
    FilterDateLastImportedParam: string;
    /** @description Filter items by if visible on the storefront. */
    FilterIsVisibleParam: boolean;
    /** @description Filter items by is_featured. */
    FilterIsFeaturedParam: number;
    /** @description Filter items by is_free_shipping. */
    FilterIsFreeShippingParam: number;
    /** @description Filter items by inventory_level. */
    FilterInventoryLevelParam: number;
    /** @description Filter items by inventory_low. Values: 1, 0. */
    FilterInventoryLowParam: number;
    /** @description Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`. */
    FilterOutOfStockParam: number;
    /** @description Filter items by total_sold. */
    FilterTotalSoldParam: number;
    /** @description Filter items by type: `physical` or `digital`. */
    ProductFilterTypeParam: 'digital' | 'physical';
    /**
     * @description Filter items by categories.
     *  If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
     */
    FilterCategoriesParam: number;
    /** @description Filter items by keywords. eg. new, towel, bath */
    FilterKeywordParam: string;
    /** @description Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
    ProductFilterKeywordParam: string;
    /** @description Set context for a product search. */
    ProductFilterKeywordContextParam: 'shopper' | 'merchant';
    /** @description Filter items by status. */
    FilterStatusParam: number;
    /** @description Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. */
    FilterIncludeParam:
      | 'variants'
      | 'images'
      | 'custom_fields'
      | 'bulk_pricing_rules'
      | 'primary_image'
      | 'modifiers'
      | 'options'
      | 'videos';
    /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
    FilterIncludeFieldsParam: string;
    /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
    FilterExcludeFieldsParam: string;
    /** @description Filter items by parent_id. If the category is a child or sub category it can be filtered with the parent_id. */
    FilterParentIdParam: number;
    /** @description Filter items by page_title. */
    FilterPageTitleParam: string;
    /** @description Filter items by availability. Values are: available, disabled, preorder. */
    FilterAvailabilityParam: 'available' | 'disabled' | 'preorder';
    /** @description A comma-separated list of ids of `Product`s whose prices were requested. */
    FilterProductIdParam: string;
    /** @description The ID of the `Variant` whose prices were requested. */
    FilterVariantIdParam: number;
    /** @description Filter items by currency. */
    FilterCurrencyParam: string;
    /** @description Specifies the page number in a limited (paginated) list of products. */
    PageParam: number;
    /** @description Controls the number of items per page in a limited (paginated) list of products. */
    LimitParam: number;
    /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
    DirectionParam: 'asc' | 'desc';
    /** @description Field name to sort by. */
    ProductSortParam:
      | 'id'
      | 'name'
      | 'sku'
      | 'price'
      | 'date_modified'
      | 'date_last_imported'
      | 'inventory_level'
      | 'is_visible'
      | 'total_sold';
    /** @description The ID of the `Product` to which the resource belongs. */
    ProductIdParam: number;
    /** @description The ID of the `review` that is being operated on. */
    ReviewIdParam: number;
    /** @description The ID of the `Image` that is being operated on. */
    ImageIdParam: number;
    /** @description The BigCommerce ID of the `Video` */
    VideoIdParam: number;
    /** @description The ID of the `ComplexRule`. */
    ComplexRuleIdParam: number;
    /** @description The ID of the `ConfigurableField`. */
    ConfigurableFieldIdParam: number;
    /** @description The ID of the `CustomField`. */
    CustomFieldIdParam: number;
    /** @description The ID of the `BulkPricingRule`. */
    BulkPricingRuleIdParam: number;
    /** @description The ID of the `Modifier`. */
    ModifierIdParam: number;
    /** @description The ID of the `Modifier/Option Value`. */
    ValueIdParam: number;
    /** @description The ID of the `Option`. */
    OptionIdParam: number;
    /** @description ID of the variant on a product, or on an associated Price List Record. */
    VariantIdParam: number;
    /** @description The ID of the `Category` to which the resource belongs. */
    CategoryIdParam: number;
    /** @description The ID of the `Brand` to which the resource belongs. */
    BrandIdParam: number;
    /** @description The ID of the `Metafield`. */
    MetafieldIdParam: number;
    /** @description Filter based on a metafield's key. */
    MetafieldKeyParam: string;
    /** @description Filter based on a metafield's namespace. */
    MetafieldNamespaceParam: string;
    /** @description The ID of the `Order` to which the transactions belong. */
    OrderIdParam: number;
    Accept: string;
    'Content-Type': string;
    /**
     * @description A comma-separated list of ids of Products whose prices were requested. For example:
     * `?product_id=:id`
     * `?product_id:in=77,80,81`
     */
    product_id: string;
    FilterIdIn: number[];
    FilterIdNotIn: number[];
    FilterIdMax: number[];
    FilterIdMin: number[];
    FilterIdGreater: number[];
    FilterIdLess: number[];
    /** @description The template file, for example: `pages/home`. */
    betaFilterTemplateFileParam: string;
    /** @description Filter items by id. */
    betaFilterIdParam: number;
    /** @description Filter items by sku. */
    betaFilterSkuParam: string;
    /** @description Filter items by name. */
    betaFilterNameParam: string;
    /** @description Filter items by email. */
    betaFilterEmailParam: string;
    /** @description Filter items by source. */
    betaFilterSourceParam: string;
    /** @description Filter items by order_id. */
    betaFilterOrderIdParam: number;
    /** @description Filter items by upc. */
    betaFilterUpcParam: string;
    /** @description Filter items by price. */
    betaFilterPriceParam: number;
    /** @description Filter items by sale_price. */
    betaFilterSalePriceParam: number;
    /** @description Filter items by retail_price. */
    betaFilterRetailPriceParam: number;
    /** @description Filter items by map_price. */
    betaFilterMapPriceParam: number;
    /** @description Filter items by calculated_price. */
    betaFilterCalculatedPriceParam: number;
    /** @description Filter items by weight. */
    betaFilterWeightParam: number;
    /** @description Filter items by condition. */
    betaFilterConditionParam: 'new' | 'used' | 'refurbished';
    /** @description Filter items by brand_id. */
    betaFilterBrandIdParam: number;
    /** @description Filter items by date_modified. For example `v3/catalog/products?date_modified:min=2018-06-15` */
    betaFilterDateModifiedParam: string;
    /** @description Filter items by date_created. */
    betaFilterDateCreatedParam: string;
    /** @description Filter items by date_last_imported. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
    betaFilterDateLastImportedParam: string;
    /** @description Filter items by if visible on the storefront. */
    betaFilterIsVisibleParam: boolean;
    /** @description Filter items by is_featured. */
    betaFilterIsFeaturedParam: number;
    /** @description Filter items by is_free_shipping. */
    betaFilterIsFreeShippingParam: number;
    /** @description Filter items by inventory_level. */
    betaFilterInventoryLevelParam: number;
    /** @description Filter items by inventory_low. Values: 1, 0. */
    betaFilterInventoryLowParam: number;
    /** @description Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`. */
    betaFilterOutOfStockParam: number;
    /** @description Filter items by total_sold. */
    betaFilterTotalSoldParam: number;
    /** @description Filter items by type: `physical` or `digital`. */
    betaProductFilterTypeParam: 'digital' | 'physical';
    /**
     * @description Filter items by categories.
     *  If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
     */
    betaFilterCategoriesParam: number;
    /** @description Filter items by keywords. eg. new, towel, bath */
    betaFilterKeywordParam: string;
    /** @description Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
    betaProductFilterKeywordParam: string;
    /** @description Set context for a product search. */
    betaProductFilterKeywordContextParam: 'shopper' | 'merchant';
    /** @description Filter items by status. */
    betaFilterStatusParam: number;
    /** @description Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. */
    betaFilterIncludeParam:
      | 'variants'
      | 'images'
      | 'custom_fields'
      | 'bulk_pricing_rules'
      | 'primary_image'
      | 'modifiers'
      | 'options'
      | 'videos';
    /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
    betaFilterIncludeFieldsParam: string;
    /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
    betaFilterExcludeFieldsParam: string;
    /** @description Filter items by parent_id. If the category is a child or sub category it can be filtered with the parent_id. */
    betaFilterParentIdParam: number;
    /** @description Filter items by page_title. */
    betaFilterPageTitleParam: string;
    /** @description Filter items by availability. Values are: available, disabled, preorder. */
    betaFilterAvailabilityParam: 'available' | 'disabled' | 'preorder';
    /** @description A comma-separated list of ids of `Product`s whose prices were requested. */
    betaFilterProductIdParam: string;
    /** @description The ID of the `Variant` whose prices were requested. */
    betaFilterVariantIdParam: number;
    /** @description Filter items by currency. */
    betaFilterCurrencyParam: string;
    /** @description Specifies the page number in a limited (paginated) list of products. */
    betaPageParam: number;
    /** @description Controls the number of items per page in a limited (paginated) list of products. */
    betaLimitParam: number;
    /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
    betaDirectionParam: 'asc' | 'desc';
    /** @description Field name to sort by. */
    betaProductSortParam:
      | 'id'
      | 'name'
      | 'sku'
      | 'price'
      | 'date_modified'
      | 'date_last_imported'
      | 'inventory_level'
      | 'is_visible'
      | 'total_sold';
    /** @description Filter based on a metafield's key. */
    betaMetafieldKeyParam: string;
    /** @description Filter based on a metafield's namespace. */
    betaMetafieldNamespaceParam: string;
    betaFilterIdIn: number[];
    betaFilterIdNotIn: number[];
    betaFilterIdMax: number[];
    betaFilterIdMin: number[];
    betaFilterIdGreater: number[];
    betaFilterIdLess: number[];
    StoreHashParam: string;
  };
}

export interface operations {
  /** Returns a list of **Products**. Optional filter parameters can be passed in. */
  getProducts: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** Filter items by id. */
        id?: number;
        'id:in'?: number[];
        'id:not_in'?: number[];
        'id:min'?: number[];
        'id:max'?: number[];
        'id:greater'?: number[];
        'id:less'?: number[];
        /** Filter items by name. */
        name?: string;
        /** Filter items by upc. */
        upc?: string;
        /** Filter items by price. */
        price?: number;
        /** Filter items by weight. */
        weight?: number;
        /** Filter items by condition. */
        condition?: 'new' | 'used' | 'refurbished';
        /** Filter items by brand_id. */
        brand_id?: number;
        /** Filter items by `date_modified`. */
        date_modified?: string;
        /** Filter items by `date_modified`. For example, `date_modified:max=2020-06-15`. */
        'date_modified:max'?: string;
        /** Filter items by `date_modified`. For example, `date_modified:min=2018-06-15`. */
        'date_modified:min'?: string;
        /** Filter items by date_last_imported. */
        date_last_imported?: string;
        /** Filter items by date_last_imported. For example, `date_last_imported:max=2020-06-15`. */
        'date_last_imported:max'?: string;
        /** Filter items by date_last_imported. For example, `date_last_imported:min=2018-06-15`. */
        'date_last_imported:min'?: string;
        /** Filter items based on whether the product is currently visible on the storefront. */
        is_visible?: boolean;
        /** Filter items by is_featured. `1` for true, `0` for false. */
        is_featured?: 1 | 0;
        /** Filter items by is_free_shipping. `1` for true, `0` for false. */
        is_free_shipping?: number;
        /** Filter items by inventory_level. */
        inventory_level?: number;
        'inventory_level:in'?: number;
        'inventory_level:not_in'?: number;
        'inventory_level:min'?: number;
        'inventory_level:max'?: number;
        'inventory_level:greater'?: number;
        'inventory_level:less'?: number;
        /** Filter items by inventory_low. Values: 1, 0. */
        inventory_low?: number;
        /** Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`. */
        out_of_stock?: number;
        /** Filter items by total_sold. */
        total_sold?: number;
        /** Filter items by type. */
        type?: 'digital' | 'physical';
        /**
         * Filter items by categories.
         *  If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
         */
        categories?: number;
        /** Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
        keyword?: string;
        /** Set context used by the search algorithm to return results targeted towards the specified group. Use `merchant` to help merchants search their own catalog. Use `shopper` to return shopper-facing search results. */
        keyword_context?: 'shopper' | 'merchant';
        /** Filter items by status. */
        status?: number;
        /** Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. */
        include?:
          | 'variants'
          | 'images'
          | 'custom_fields'
          | 'bulk_pricing_rules'
          | 'primary_image'
          | 'modifiers'
          | 'options'
          | 'videos';
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** Filter items by availability. Values are: available, disabled, preorder. */
        availability?: 'available' | 'disabled' | 'preorder';
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Sort direction. Acceptable values are: `asc`, `desc`. */
        direction?: 'asc' | 'desc';
        /** Field name to sort by. Note: Since `id` increments when new products are added, you can use that field to sort by product create date. */
        sort?:
          | 'id'
          | 'name'
          | 'sku'
          | 'price'
          | 'date_modified'
          | 'date_last_imported'
          | 'inventory_level'
          | 'is_visible'
          | 'total_sold';
        /** Filter items by categories. Use for products in multiple categories. For example, `categories:in=12`. */
        'categories:in'?: number;
        /** Filter items by main SKU. To filter by variant SKU, see [Get All Variants](/api-reference/store-management/catalog/variants/getvariants). */
        sku?: string;
        /** Filter items by SKU. */
        'sku:in'?: string[];
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['product_Full'][];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
    };
  };
  /**
   * Updates products in batches. Batches are limited to 10 products.
   *
   * **Required Fields**
   * * `id` - product `id` is required for batch updates to products.
   *
   * **Read-Only Fields**
   * - `id`
   * - `date_created`
   * - `date_modified`
   * - `calculated_price`
   * - `base_variant_id`
   */
  updateProducts: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['product_Full'][];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
      /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        content: {
          'application/json': components['schemas']['error_Base'];
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** `Product` was in conflict with another product. This is the result of duplicate unique values such as name or SKU; a missing or invalid `category_id`, `brand_id`, or `tax_class id`; or a conflicting `bulk_pricing_rule`. */
      409: {
        content: {
          'application/json': components['schemas']['errorResponse_409'];
        };
      };
      /** 413 Request Entity Too Large */
      413: {
        content: {
          'application/json': components['schemas']['error_Base'];
        };
      };
      /** `Product` was not valid. This is the result of missing required fields or invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': components['schemas']['errorResponse_422'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['product_Put_Collection'];
      };
    };
  };
  /**
   * Creates a *Product*. Only one product can be created at a time.
   *
   * **Required Fields:**
   * - `name`
   * - `type`
   * - `weight`
   * - `price`
   *
   * **Read-Only Fields**
   * - `id`
   * - `date_created`
   * - `date_modified`
   * - `calculated_price`
   * - `base_variant_id`
   *
   * **Limits**
   * - 250 characters product name length.
   *
   * **Usage Notes**
   * * `POST` requests to `/products` accepts a single `video` object; to send an array of video objects, see: `/products/{product_id}/videos`.
   */
  createProduct: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        'Content-Type': string;
        Accept: string;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            meta?: { [key: string]: unknown };
            product_Full?: components['schemas']['product_Full'];
          };
          'example-1': unknown;
        };
      };
      /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        content: {
          'application/json': components['schemas']['error_Base'];
        };
      };
      /** `Product` was in conflict with another product. This is the result of duplicate unique values, such as name or SKU; a missing or invalid `category_id`, `brand_id`, or `tax_class id`; or a conflicting `bulk_pricing_rule`. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** `Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['product_Base'];
      };
    };
  };
  /**
   * To delete *Product* objects, you must include a filter. This prevents inadvertently deleting all *Product* objects in a store.
   *
   * <!-- theme: info -->
   * > The maximum number of products you can delete at one time is 250.
   *
   * **Example**:
   * To delete products with the id's of 1,2 and 3, use `DELETE /v3/catalog/products?id:in=1,2,3`.
   */
  deleteProducts: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** Filter items by name. */
        name?: string;
        /** Filter items by sku. */
        sku?: string;
        /** Filter items by price. */
        price?: number;
        /** Filter items by weight. */
        weight?: number;
        /** Filter items by condition. */
        condition?: 'new' | 'used' | 'refurbished';
        /** Filter items by brand_id. */
        brand_id?: number;
        /** Filter items by date_modified. For example `v3/catalog/products?date_modified:min=2018-06-15` */
        date_modified?: string;
        /** Filter items by date_last_imported. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
        date_last_imported?: string;
        /** Filter items by if visible on the storefront. */
        is_visible?: boolean;
        /** Filter items by is_featured. */
        is_featured?: number;
        /** Filter items by inventory_level. */
        inventory_level?: number;
        /** Filter items by total_sold. */
        total_sold?: number;
        /** Filter items by type: `physical` or `digital`. */
        type?: 'digital' | 'physical';
        /**
         * Filter items by categories.
         *  If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
         */
        categories?: number;
        /** Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
        keyword?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a single *Product*. Optional parameters can be passed in. */
  getProductById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      query: {
        /** Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. */
        include?:
          | 'variants'
          | 'images'
          | 'custom_fields'
          | 'bulk_pricing_rules'
          | 'primary_image'
          | 'modifiers'
          | 'options'
          | 'videos';
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['product_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Product*.
   *
   * **Read-Only Fields**
   * - id
   * - date_created
   * - date_modified
   * - calculated_price
   * - base_variant_id
   */
  updateProduct: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            meta?: { [key: string]: unknown };
            product_Full?: components['schemas']['product_Full'];
          };
          'example-1': unknown;
        };
      };
      /** Created */
      201: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
      /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        content: {
          'application/json': components['schemas']['error_Base'];
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** `Product` was in conflict with another product. This is caused by: duplicate unique values, such as name or SKU; a missing category, brand, or tax_class with which the product is being associated; or a conflicting bulk pricing rule. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** `Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['product_Put'];
      };
    };
  };
  /** Deletes a *Product*. */
  deleteProductById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of *Product Images*. Optional parameters can be passed in. */
  getProductImages: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productImage_Full'][];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
      /** There are not any images on this product. */
      204: never;
      /** The product ID does not exist. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Creates a *Product Image*.
   *
   *  **Required Fields**
   * - `image_file`, or
   * - `image_url`
   *
   * **Usage Notes**
   * - `image_url` - `255` character limit
   * - For file uploads, use the `multipart/form-data` media type
   * - Only one image at a time can be created
   * - Supported image file types are BMP, GIF, JPEG, PNG, WBMP, XBM, and WEBP.
   */
  createProductImage: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /** Product Image */
            data?: {
              /** @description The unique numeric ID of the image; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /**
               * @description The local path to the original image file uploaded to BigCommerce.
               *
               * A `multipart/form-data` media type.
               */
              image_file?: string;
              /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
              url_zoom?: string;
              /** @description The standard URL for this image. By default, this is used for product-page images. */
              url_standard?: string;
              /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
              url_thumbnail?: string;
              /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
              url_tiny?: string;
              /**
               * Format: date-time
               * @description The date on which the product image was modified.
               */
              date_modified?: string;
              /** @description Flag for identifying whether the image is used as the product's thumbnail. */
              is_thumbnail?: boolean;
              /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
              sort_order?: number;
              /** @description The description for the image. */
              description?: string;
            } & {
              /** @description The unique numeric ID of the image; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /**
               * @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
               * A `multipart/form-data` media type.
               */
              image_file?: string;
              /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
              url_zoom?: string;
              /** @description The standard URL for this image. By default, this is used for product-page images. */
              url_standard?: string;
              /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
              url_thumbnail?: string;
              /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
              url_tiny?: string;
              /**
               * Format: date-time
               * @description The date on which the product image was modified.
               */
              date_modified?: string;
              /**
               * @description Publically available URL.
               * Use the image_url when creating a product.
               * @example https://upload.wikimedia.org/wikipedia/commons/7/7f/Anglel_Bless_Legendary_Hills_1_m%C4%9Bs%C3%ADc_st%C3%A1%C5%99%C3%AD.jpg
               */
              image_url?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
      400: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
      /** The product ID does not exist. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /**
       * Unprocessable Entity.
       *
       * May occur if the `Content-Type` header is set to `multipart/form-data` rather than `application/json` when creating a product image using `image_url`.
       */
      422: {
        content: {
          'application/json': {
            status: number;
            title: string;
            type: string;
          };
          Example: unknown;
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The unique numeric ID of the image; increments sequentially. */
          id?: number;
          /** @description The unique numeric identifier for the product with which the image is associated. */
          product_id?: number;
          /**
           * @description The local path to the original image file uploaded to BigCommerce.
           * A `multipart/form-data` media type.
           */
          image_file?: string;
          /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
          url_zoom?: string;
          /** @description The standard URL for this image. By default, this is used for product-page images. */
          url_standard?: string;
          /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
          url_thumbnail?: string;
          /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
          url_tiny?: string;
          /**
           * Format: date-time
           * @description The date on which the product image was modified.
           */
          date_modified?: string;
          /** @description Flag for identifying whether the image is used as the product's thumbnail. */
          is_thumbnail?: boolean;
          /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
          sort_order?: number;
          /** @description The description for the image. */
          description?: string;
        } & {
          /** @description Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
          image_url?: string;
          /** @description Must be sent as a multipart/form-data field in the request body. Limit of 1MB per file. */
          image_file?: string;
        };
        'multipart/form-data': {
          /** @description The unique numeric ID of the image; increments sequentially. */
          id?: number;
          /** @description The unique numeric identifier for the product with which the image is associated. */
          product_id?: number;
          /**
           * @description The local path to the original image file uploaded to BigCommerce.
           * A `multipart/form-data` media type.
           */
          image_file?: string;
          /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
          url_zoom?: string;
          /** @description The standard URL for this image. By default, this is used for product-page images. */
          url_standard?: string;
          /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
          url_thumbnail?: string;
          /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
          url_tiny?: string;
          /**
           * Format: date-time
           * @description The date on which the product image was modified.
           */
          date_modified?: string;
          /** @description Flag for identifying whether the image is used as the product's thumbnail. */
          is_thumbnail?: boolean;
          /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
          sort_order?: number;
          /** @description The description for the image. */
          description?: string;
        } & {
          /** @description Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
          image_url?: string;
          /** @description Must be sent as a multipart/form-data field in the request body. Limit of 1MB per file. */
          image_file?: string;
        };
      };
    };
  };
  /** Returns a single *Product Image*. Optional parameters can be passed in. */
  getProductImageById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Image` that is being operated on. */
        image_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productImage_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Product Image*.
   *
   * **Usage Notes**
   * - `image_url` - `255` character limit
   * - For file uploads, send a POST request using the `multipart/form-data` media type
   */
  updateProductImage: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Image` that is being operated on. */
        image_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /** Product Image */
            data?: {
              /** @description The unique numeric ID of the image; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /** @description The local path to the original image file uploaded to BigCommerce. */
              image_file?: string;
              /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
              url_zoom?: string;
              /** @description The standard URL for this image. By default, this is used for product-page images. */
              url_standard?: string;
              /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
              url_thumbnail?: string;
              /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
              url_tiny?: string;
              /**
               * Format: date-time
               * @description The date on which the product image was modified.
               */
              date_modified?: string;
              /** @description Flag for identifying whether the image is used as the product's thumbnail. */
              is_thumbnail?: boolean;
              /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
              sort_order?: number;
              /** @description The description for the image. */
              description?: string;
            } & {
              /** @description The unique numeric ID of the image; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /** @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product. */
              image_file?: string;
              /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
              url_zoom?: string;
              /** @description The standard URL for this image. By default, this is used for product-page images. */
              url_standard?: string;
              /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
              url_thumbnail?: string;
              /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
              url_tiny?: string;
              /**
               * Format: date-time
               * @description The date on which the product image was modified.
               */
              date_modified?: string;
              /**
               * @description Publically available URL.
               * Use the image_url when creating a product.
               * @example https://upload.wikimedia.org/wikipedia/commons/7/7f/Anglel_Bless_Legendary_Hills_1_m%C4%9Bs%C3%ADc_st%C3%A1%C5%99%C3%AD.jpg
               */
              image_url?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** Created */
      201: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
      /** Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
      400: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['productImage_Put'];
      };
    };
  };
  /** Deletes a *Product Image*. */
  deleteProductImage: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Image` that is being operated on. */
        image_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of *Product Videos*. Optional parameters can be passed in. */
  getProductVideos: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productVideo_Full'][];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
    };
  };
  /**
   * Creates a *Product Video*.
   *
   * **Required Fields**
   * * video_id - Example: https://www.youtube.com/watch?v=`R12345677`
   *
   * **Read-Only Fields**
   * * id
   *
   * Publicly accessible URLs are valid parameters.
   * Videos must be loaded through YouTube at this time.
   */
  createProductVideo: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Product Video
             * @description A product video model.
             */
            data?: {
              /** @description The title for the video. If left blank, this will be filled in according to data on a host site. */
              title?: string;
              /** @description The description for the video. If left blank, this will be filled in according to data on a host site. */
              description?: string;
              /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
              sort_order?: number;
              /** @description The video type (a short name of a host site). */
              type?: 'youtube';
            } & {
              /** @description The unique numeric ID of the product video; increments sequentially. */
              id?: number;
              /** @description The ID of the video on a host site. */
              video_id?: string;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /** @description Length of the video. This will be filled in according to data on a host site. */
              length?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The title for the video. If left blank, this will be filled in according to data on a host site. */
          title?: string;
          /** @description The description for the video. If left blank, this will be filled in according to data on a host site. */
          description?: string;
          /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
          sort_order?: number;
          /** @description The video type (a short name of a host site). */
          type?: 'youtube';
        } & {
          /** @description The ID of the video on a host site. */
          video_id?: string;
        };
      };
    };
  };
  /** Returns a single *Product Video*. Optional parameters can be passed in. */
  getProductVideoById: {
    parameters: {
      path: {
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The BigCommerce ID of the `Video` */
        id: number;
        store_hash: string;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productVideo_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Product Video.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   */
  updateProductVideo: {
    parameters: {
      path: {
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The BigCommerce ID of the `Video` */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Product Video
             * @description A product video model.
             */
            data?: {
              /** @description The title for the video. If left blank, this will be filled in according to data on a host site. */
              title?: string;
              /** @description The description for the video. If left blank, this will be filled in according to data on a host site. */
              description?: string;
              /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
              sort_order?: number;
              /** @description The video type (a short name of a host site). */
              type?: 'youtube';
            } & {
              /** @description The unique numeric ID of the product video; increments sequentially. */
              id?: number;
              /** @description The ID of the video on a host site. */
              video_id?: string;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /** @description Length of the video. This will be filled in according to data on a host site. */
              length?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The title for the video. If left blank, this will be filled in according to data on a host site. */
          title?: string;
          /** @description The description for the video. If left blank, this will be filled in according to data on a host site. */
          description?: string;
          /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
          sort_order?: number;
          /** @description The video type (a short name of a host site). */
          type?: 'youtube';
        } & {
          /** @description The unique numeric ID of the product video; increments sequentially. */
          id?: number;
        };
      };
    };
  };
  /** Deletes a *Product Video*. */
  deleteProductVideo: {
    parameters: {
      path: {
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The BigCommerce ID of the `Video` */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of product *Variants*. Optional parameters can be passed in. */
  getVariantsByProductId: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productVariant_Full'][];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Creates a *Product Variant*.
   *
   * **Required Fields**
   * * sku
   * * option_values
   *
   * **Read-Only Fields**
   * * id
   *
   * **Limits**
   * * 600 SKUs per product limit.
   * * 255 characters SKU length limit.
   *
   * Variants need to be created one at a time using this endpoint. To use a variant array and create products and variants in the same call use the [Create Products](/api-reference/catalog/catalog-api/products/createproduct) during the initial product creation.
   */
  createVariant: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productVariant_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        content: {
          'application/json': components['schemas']['error_Base'];
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['productVariant_Post'];
      };
    };
  };
  /** Returns a single product *Variant*. Optional parameters can be passed in. */
  getVariantById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productVariant_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /** Updates a product *Variant*. */
  updateVariant: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productVariant_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        content: {
          'application/json': components['schemas']['error_Base'];
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['productVariant_Put'];
      };
    };
  };
  /** Deletes a product *Variant*. */
  deleteVariantById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of product variant *Metafields*. Optional parameters can be passed in. */
  getVariantMetafieldsByProductIdAndVariantId: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
      };
      query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Filter based on a metafield's key. */
        key?: string;
        /** Filter based on a metafield's namespace. */
        namespace?: string;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['metafield_Base'];
            meta?: components['schemas']['categoriesTree_Resp'];
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Creates a product variant *Metafield*.
   *
   * **Required Fields:**
   * * permission_set
   * * namespace
   * * key
   * * value
   *
   * **Read-Only Fields**
   * * id
   *
   * **Note:** The max number of metafields allowed on each product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  createVariantMetafield: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Metafield
             * @description Common Metafield properties.
             */
            data?: {
              /**
               * Format: date-time
               * @description Date and time of the metafield's creation. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date and time when the metafield was last updated. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_modified?: string;
              /**
               * @description Description for the metafields.
               *
               * @example Location in the warehouse
               */
              description?: string;
              /**
               * @description Unique ID of the *Metafield*. Read-Only.
               * @example 6
               */
              id?: number;
              /**
               * @description The name of the field, for example: `location_id`, `color`. Required for POST.
               *
               * @example Location
               */
              key: string;
              /**
               * @description Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST.
               *
               * @example Warehouse Locations
               */
              namespace: string;
              /**
               * @description Determines the visibility and writeability of the field by other API consumers.
               *
               * |Value|Description
               * |-|-|
               * |`app_only`|Private to the app that owns the field|
               * |`read`|Visible to other API consumers|
               * |`write`|Open for reading and writing by other API consumers|
               * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
               * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
               */
              permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
              /**
               * @description The ID for the resource with which the metafield is associated.
               *
               * @example 111
               */
              resource_id?: number;
              /**
               * @description The type of resource with which the metafield is associated.
               *
               * @example product
               */
              resource_type?: 'category' | 'brand' | 'product' | 'variant';
              /**
               * @description The value of the field, for example: `1`, `blue`. Required for POST.
               *
               * @example 4HG
               */
              value: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique-key combinations of the app's client id, namespace, key, resource_type, and resource_id. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['metafield_Post'];
      };
    };
  };
  /** Returns a single product variant *Metafield*. Optional parameters can be passed in. */
  getVariantMetafieldByProductIdAndVariantId: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
        /** The ID of the `Metafield`. */
        metafield_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['metafield_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a product variant *Metafield*.
   *
   * **Required Fields:**
   * * none
   *
   * **Read-Only Fields**
   * * id
   * * These fields can only be modified by the app (API credentials) that created the metafield:
   * 	* namespace
   * 	* key
   * 	* permission_set
   *
   * **Usage Notes**
   * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
   */
  updateVariantMetafield: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
        /** The ID of the `Metafield`. */
        metafield_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['metafield_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['metafield_Put'];
      };
    };
  };
  /** Deletes a product variant *Metafield*. */
  deleteVariantMetafieldById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
        /** The ID of the `Metafield`. */
        metafield_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /**
   * Creates a *Variant Image*.
   *
   * The image will show on the storefront when the value is selected.
   *
   *  **Required Fields**
   * - image_file: Form posts. Files larger than 1 MB are not accepted
   * - image_url: Any publicly available URL
   */
  createVariantImage: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
      };
    };
    responses: {
      /** `image_url` is returned for both `image_file` and `image_url`. */
      200: {
        content: {
          'application/json': {
            /**
             * Resource Image
             * @description An object containing a publicly accessible image URL, or a form post that contains an image file.
             */
            data?: {
              /** @description A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file. */
              image_url?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
      400: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** Image was not valid. This is the result of a missing `image_file` field or of an incorrect file type. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** Returns for an `image_file` larger than 1 MB. */
      500: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file. */
          image_url?: string;
        };
        'multipart/form-data': {
          /** @description A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file. */
          image_url?: string;
        };
      };
    };
  };
  /** Returns a list of product *Variant Options*. Optional parameters can be passed in. */
  getOptions: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productOption_Full'][];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Creates a *Variant Option*.
   *
   * **Required Fields**
   * * display_name
   * * type
   * * option_values
   *
   * **Read-Only Fields**
   * * id
   *
   * **Limits**
   * * 255 characters option name length.
   *
   * **Notes**
   *
   * * Only one variant option at a time can be created; individual variant options will contain an array of multiple values.
   * * There are several examples listed below that create options, but the SKU’s are not updated and they are not a variant on the product. Variant SKUs must be created with a separate request.
   * * Variant options will show on the storefront as an option that can be selected by the customer. A request like this could be used to add new choices to a variant that has already been created.
   * * If more than one variant needs to be created use the [Create a Product](/api-reference/catalog/catalog-api/products/createproduct) endpoint.
   */
  createOption: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /** Option */
            data?: {
              /**
               * @description The unique numerical ID of the option, increments sequentially.
               *
               * @example 55
               */
              id?: number;
              /**
               * @description The unique numerical ID of the product to which the option belongs.
               *
               * @example 4
               */
              product_id?: number;
              /**
               * @description The name of the option shown on the storefront.
               *
               * @example Add-a-$5-Donation1535042499-187
               */
              display_name?: string;
              /** @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
              type?:
                | 'radio_buttons'
                | 'rectangles'
                | 'dropdown'
                | 'product_list'
                | 'product_list_with_images'
                | 'swatch';
              /**
               * Option Config
               * @description The values for option config can vary based on the Modifier created.
               */
              config?: {
                /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                default_value?: string;
                /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
                checked_by_default?: boolean;
                /** @description (checkbox) Label displayed for the checkbox option. */
                checkbox_label?: string;
                /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
                date_limited?: boolean;
                /**
                 * @description (date) The type of limit that is allowed to be entered on a date option.
                 *
                 * @example range
                 */
                date_limit_mode?: 'earliest' | 'range' | 'latest';
                /**
                 * Format: date-time
                 * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                 */
                date_earliest_value?: string;
                /**
                 * Format: date-time
                 * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                 */
                date_latest_value?: string;
                /**
                 * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                 *
                 * @example specific
                 */
                file_types_mode?: 'specific' | 'all';
                /**
                 * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                 *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                 *   `other` - Allows file types defined in the `file_types_other` array.
                 */
                file_types_supported?: string[];
                /** @description (file) A list of other file types allowed with the file upload option. */
                file_types_other?: string[];
                /**
                 * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                 *
                 * @example 5
                 */
                file_max_size?: number;
                /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                text_characters_limited?: boolean;
                /**
                 * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                 *
                 * @example 1
                 */
                text_min_length?: number;
                /**
                 * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                 *
                 * @example 55
                 */
                text_max_length?: number;
                /**
                 * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                 *
                 * @example true
                 */
                text_lines_limited?: boolean;
                /**
                 * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                 *
                 * @example 4
                 */
                text_max_lines?: number;
                /**
                 * @description (numbers_only_text) Flag to limit the value of a number option.
                 *
                 * @example true
                 */
                number_limited?: boolean;
                /**
                 * @description (numbers_only_text) The type of limit on values entered for a number option.
                 *
                 * @example lowest
                 */
                number_limit_mode?: 'lowest' | 'highest' | 'range';
                /**
                 * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                 *
                 * @example 100
                 */
                number_lowest_value?: number;
                /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                number_highest_value?: number;
                /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                number_integers_only?: boolean;
                /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                product_list_adjusts_inventory?: boolean;
                /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                product_list_adjusts_pricing?: boolean;
                /**
                 * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                 *
                 * @example weight
                 */
                product_list_shipping_calc?: 'none' | 'weight' | 'package';
              };
              /**
               * @description Order in which the option is displayed on the storefront.
               * @example 1
               */
              sort_order?: number;
              option_values?: ({
                /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                is_default?: boolean;
                /**
                 * @description The text display identifying the value on the storefront. Required in a /POST.
                 *
                 * @example Green
                 */
                label: string;
                /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
                sort_order: number;
                /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                value_data?: { [key: string]: unknown };
              } & {
                /** @description The unique numeric ID of the value; increments sequentially. */
                id?: number;
              })[];
              /** @description Publicly available image url */
              image_url?: string;
            } & {
              /**
               * @description The unique option name, auto-generated from the display name, a timestamp, and the product ID.
               *
               * @example Add-a-$5-Donation1535042499-187
               */
              name?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** Option was in conflict with another option. This is the result of duplicate unique fields, such as `name`. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** Option was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description The unique numerical ID of the option, increments sequentially.
           *
           * @example 55
           */
          id?: number | null;
          /**
           * @description The unique numerical ID of the product to which the option belongs.
           *
           * @example 4
           */
          product_id?: number;
          /**
           * @description The name of the option shown on the storefront.
           *
           * @example Add-a-$5-Donation1535042499-187
           */
          display_name?: string;
          /** @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
          type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
          /**
           * Option Config
           * @description The values for option config can vary based on the Modifier created.
           */
          config?: {
            /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
            default_value?: string;
            /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
            checked_by_default?: boolean;
            /** @description (checkbox) Label displayed for the checkbox option. */
            checkbox_label?: string;
            /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
            date_limited?: boolean;
            /**
             * @description (date) The type of limit that is allowed to be entered on a date option.
             *
             * @example range
             */
            date_limit_mode?: 'earliest' | 'range' | 'latest';
            /**
             * Format: date-time
             * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             * @example 2018-08-31T00:00:00.000Z
             */
            date_earliest_value?: string;
            /**
             * Format: date-time
             * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             * @example 2019-01-01T00:00:00.000Z
             */
            date_latest_value?: string;
            /**
             * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
             *
             * @example specific
             */
            file_types_mode?: 'specific' | 'all';
            /**
             * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             *
             * @example images,documents,other
             */
            file_types_supported?: string[];
            /**
             * @description (file) A list of other file types allowed with the file upload option.
             *
             * @example pdf,txt
             */
            file_types_other?: string[];
            /**
             * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
             *
             * @example 5
             */
            file_max_size?: number;
            /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            text_characters_limited?: boolean;
            /**
             * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
             *
             * @example 1
             */
            text_min_length?: number;
            /**
             * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
             *
             * @example 55
             */
            text_max_length?: number;
            /**
             * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
             *
             * @example true
             */
            text_lines_limited?: boolean;
            /**
             * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
             *
             * @example 4
             */
            text_max_lines?: number;
            /**
             * @description (numbers_only_text) Flag to limit the value of a number option.
             *
             * @example true
             */
            number_limited?: boolean;
            /**
             * @description (numbers_only_text) The type of limit on values entered for a number option.
             *
             * @example lowest
             */
            number_limit_mode?: 'lowest' | 'highest' | 'range';
            /**
             * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
             *
             * @example 100
             */
            number_lowest_value?: number;
            /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            number_highest_value?: number;
            /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
            number_integers_only?: boolean;
            /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            product_list_adjusts_inventory?: boolean;
            /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            product_list_adjusts_pricing?: boolean;
            /**
             * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
             *
             * @example weight
             */
            product_list_shipping_calc?: 'none' | 'weight' | 'package';
          };
          /**
           * @description Order in which the option is displayed on the storefront.
           * @example 1
           */
          sort_order?: number;
          option_values?: ({
            /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            is_default?: boolean;
            /**
             * @description The text display identifying the value on the storefront. Required in a /POST.
             *
             * @example Green
             */
            label: string;
            /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
            sort_order: number;
            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            value_data?: { [key: string]: unknown };
          } & {
            /** @description The unique numeric ID of the value; increments sequentially. */
            id?: number;
          })[];
          /** @description Publicly available image url */
          image_url?: string;
        };
      };
    };
  };
  /** Returns a single *Variant Option*. Optional parameters can be passed in. */
  getOptionById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Option`. */
        option_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        'Content-Type': string;
        Accept: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productOption_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Variant Option*.
   *
   * **Read-Only Fields**
   * * id
   */
  updateOption: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Option`. */
        option_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /** Option */
            data?: {
              /**
               * @description The unique numerical ID of the option, increments sequentially.
               *
               * @example 55
               */
              id?: number;
              /**
               * @description The unique numerical ID of the product to which the option belongs.
               *
               * @example 4
               */
              product_id?: number;
              /**
               * @description The name of the option shown on the storefront.
               *
               * @example Add-a-$5-Donation1535042499-187
               */
              display_name?: string;
              /** @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
              type?:
                | 'radio_buttons'
                | 'rectangles'
                | 'dropdown'
                | 'product_list'
                | 'product_list_with_images'
                | 'swatch';
              /**
               * Option Config
               * @description The values for option config can vary based on the Modifier created.
               */
              config?: {
                /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                default_value?: string;
                /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
                checked_by_default?: boolean;
                /** @description (checkbox) Label displayed for the checkbox option. */
                checkbox_label?: string;
                /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
                date_limited?: boolean;
                /**
                 * @description (date) The type of limit that is allowed to be entered on a date option.
                 *
                 * @example range
                 */
                date_limit_mode?: 'earliest' | 'range' | 'latest';
                /**
                 * Format: date
                 * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                 */
                date_earliest_value?: string;
                /**
                 * Format: date
                 * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                 */
                date_latest_value?: string;
                /**
                 * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                 *
                 * @example specific
                 */
                file_types_mode?: 'specific' | 'all';
                /**
                 * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                 *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                 *   `other` - Allows file types defined in the `file_types_other` array.
                 */
                file_types_supported?: string[];
                /** @description (file) A list of other file types allowed with the file upload option. */
                file_types_other?: string[];
                /**
                 * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                 *
                 * @example 5
                 */
                file_max_size?: number;
                /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                text_characters_limited?: boolean;
                /**
                 * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                 *
                 * @example 1
                 */
                text_min_length?: number;
                /**
                 * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                 *
                 * @example 55
                 */
                text_max_length?: number;
                /**
                 * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                 *
                 * @example true
                 */
                text_lines_limited?: boolean;
                /**
                 * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                 *
                 * @example 4
                 */
                text_max_lines?: number;
                /**
                 * @description (numbers_only_text) Flag to limit the value of a number option.
                 *
                 * @example true
                 */
                number_limited?: boolean;
                /**
                 * @description (numbers_only_text) The type of limit on values entered for a number option.
                 *
                 * @example lowest
                 */
                number_limit_mode?: 'lowest' | 'highest' | 'range';
                /**
                 * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                 *
                 * @example 100
                 */
                number_lowest_value?: number;
                /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                number_highest_value?: number;
                /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                number_integers_only?: boolean;
                /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                product_list_adjusts_inventory?: boolean;
                /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                product_list_adjusts_pricing?: boolean;
                /**
                 * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                 *
                 * @example weight
                 */
                product_list_shipping_calc?: 'none' | 'weight' | 'package';
              };
              /**
               * @description Order in which the option is displayed on the storefront.
               * @example 1
               */
              sort_order?: number;
              option_values?: ({
                /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                is_default?: boolean;
                /**
                 * @description The text display identifying the value on the storefront. Required in a /POST.
                 *
                 * @example Green
                 */
                label: string;
                /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
                sort_order: number;
                /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                value_data?: { [key: string]: unknown };
              } & {
                /** @description The unique numeric ID of the value; increments sequentially. */
                id?: number;
              })[];
              /** @description Publicly available image url */
              image_url?: string;
            } & {
              /**
               * @description The unique option name, auto-generated from the display name, a timestamp, and the product ID.
               *
               * @example Add-a-$5-Donation1535042499-187
               */
              name?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The `Option` was in conflict with another option. This is the result of duplicate unique fields, such as `name`. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** The `Option` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description The unique numerical ID of the option, increments sequentially.
           *
           * @example 55
           */
          id?: number | null;
          /**
           * @description The unique numerical ID of the product to which the option belongs.
           *
           * @example 4
           */
          product_id?: number;
          /**
           * @description The name of the option shown on the storefront.
           *
           * @example Add-a-$5-Donation1535042499-187
           */
          display_name?: string;
          /** @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch. */
          type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
          /**
           * Option Config
           * @description The values for option config can vary based on the Modifier created.
           */
          config?: {
            /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
            default_value?: string;
            /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
            checked_by_default?: boolean;
            /** @description (checkbox) Label displayed for the checkbox option. */
            checkbox_label?: string;
            /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
            date_limited?: boolean;
            /**
             * @description (date) The type of limit that is allowed to be entered on a date option.
             *
             * @example range
             */
            date_limit_mode?: 'earliest' | 'range' | 'latest';
            /**
             * Format: date-time
             * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             * @example 2018-08-31T00:00:00.000Z
             */
            date_earliest_value?: string;
            /**
             * Format: date-time
             * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             * @example 2019-01-01T00:00:00.000Z
             */
            date_latest_value?: string;
            /**
             * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
             *
             * @example specific
             */
            file_types_mode?: 'specific' | 'all';
            /**
             * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             *
             * @example images,documents,other
             */
            file_types_supported?: string[];
            /**
             * @description (file) A list of other file types allowed with the file upload option.
             *
             * @example pdf,txt
             */
            file_types_other?: string[];
            /**
             * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
             *
             * @example 5
             */
            file_max_size?: number;
            /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            text_characters_limited?: boolean;
            /**
             * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
             *
             * @example 1
             */
            text_min_length?: number;
            /**
             * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
             *
             * @example 55
             */
            text_max_length?: number;
            /**
             * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
             *
             * @example true
             */
            text_lines_limited?: boolean;
            /**
             * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
             *
             * @example 4
             */
            text_max_lines?: number;
            /**
             * @description (numbers_only_text) Flag to limit the value of a number option.
             *
             * @example true
             */
            number_limited?: boolean;
            /**
             * @description (numbers_only_text) The type of limit on values entered for a number option.
             *
             * @example lowest
             */
            number_limit_mode?: 'lowest' | 'highest' | 'range';
            /**
             * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
             *
             * @example 100
             */
            number_lowest_value?: number;
            /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            number_highest_value?: number;
            /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
            number_integers_only?: boolean;
            /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            product_list_adjusts_inventory?: boolean;
            /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            product_list_adjusts_pricing?: boolean;
            /**
             * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
             *
             * @example weight
             */
            product_list_shipping_calc?: 'none' | 'weight' | 'package';
          };
          /**
           * @description Order in which the option is displayed on the storefront.
           * @example 1
           */
          sort_order?: number;
          option_values?: ({
            /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            is_default?: boolean;
            /**
             * @description The text display identifying the value on the storefront. Required in a /POST.
             *
             * @example Green
             */
            label: string;
            /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
            sort_order: number;
            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            value_data?: { [key: string]: unknown };
          } & {
            /** @description The unique numeric ID of the value; increments sequentially. */
            id?: number;
          })[];
          /** @description Publicly available image url */
          image_url?: string;
        };
      };
    };
  };
  /** Deletes a *Variant Option*. */
  deleteOptionById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Option`. */
        option_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of all *Variant Option Values*. Optional parameters can be passed in. */
  getOptionValues: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Option`. */
        option_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: ({
              /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: { [key: string]: unknown };
            } & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            })[];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
    };
  };
  /**
   * Creates a *Variant Option Value*.
   *
   * **Required Fields**
   * * label
   * * sort_order
   *
   * **Read-Only Fields**
   * * id
   *
   * **Limits**
   * * 250 option values per option limit.
   */
  createOptionValue: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Option`. */
        option_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /** Option Value */
            data?: {
              /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: { [key: string]: unknown };
            } & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The `OptionValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
          is_default?: boolean;
          /**
           * @description The text display identifying the value on the storefront. Required in a /POST.
           *
           * @example Green
           */
          label: string;
          /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
          sort_order: number;
          /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
          value_data?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Returns a single *Variant Option Value*. Optional parameters can be passed in. */
  getOptionValueById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Option`. */
        option_id: number;
        /** The ID of the `Modifier/Option Value`. */
        value_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /** Option Value */
            data?: {
              /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: { [key: string]: unknown };
            } & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Variant Option Value*.
   *
   * **Read-Only Fields**
   * * id
   */
  updateOptionValue: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Option`. */
        option_id: number;
        /** The ID of the `Modifier/Option Value`. */
        value_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /** Option Value */
            data?: {
              /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: { [key: string]: unknown };
            } & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** No option(s) were found with this query. */
      404: unknown;
      /** The `OptionValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    /** A BigCommerce `OptionValue` object. */
    requestBody: {
      content: {
        'application/json': {
          /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
          is_default?: boolean;
          /**
           * @description The text display identifying the value on the storefront. Required in a /POST.
           *
           * @example Green
           */
          label: string;
          /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
          sort_order: number;
          /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
          value_data?: { [key: string]: unknown };
        } & {
          /** @description The unique numeric ID of the value; increments sequentially. */
          id?: number;
        };
      };
    };
  };
  /** Deletes a *Variant Option Value*. */
  deleteOptionValueById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Option`. */
        option_id: number;
        /** The ID of the `Modifier/Option Value`. */
        value_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of all *Product Modifiers*. Optional parameters can be passed in. */
  getModifiers: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productModifier_Full'][];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
    };
  };
  /**
   * Creates a *Product Modifier*.
   *
   * **Required Fields**
   * * `required`
   * * `display_name`
   * * `type`
   *
   * **Read-Only Fields**
   * * `id`
   */
  createModifier: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Modifer
             * @description Product Modifier
             */
            data?: {
              /** @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
              type:
                | 'date'
                | 'checkbox'
                | 'file'
                | 'text'
                | 'multi_line_text'
                | 'numbers_only_text'
                | 'radio_buttons'
                | 'rectangles'
                | 'dropdown'
                | 'product_list'
                | 'product_list_with_images'
                | 'swatch';
              /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
              required: boolean;
              /** @description The order the modifiers display on the product detail page. */
              sort_order?: number;
              /**
               * Option Config
               * @description The values for option config can vary based on the Modifier created.
               */
              config?: {
                /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                default_value?: string;
                /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
                checked_by_default?: boolean;
                /** @description (checkbox) Label displayed for the checkbox option. */
                checkbox_label?: string;
                /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
                date_limited?: boolean;
                /**
                 * @description (date) The type of limit that is allowed to be entered on a date option.
                 *
                 * @example range
                 */
                date_limit_mode?: 'earliest' | 'range' | 'latest';
                /**
                 * Format: date
                 * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                 */
                date_earliest_value?: string;
                /**
                 * Format: date
                 * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                 */
                date_latest_value?: string;
                /**
                 * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                 *
                 * @example specific
                 */
                file_types_mode?: 'specific' | 'all';
                /**
                 * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                 *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                 *   `other` - Allows file types defined in the `file_types_other` array.
                 */
                file_types_supported?: string[];
                /** @description (file) A list of other file types allowed with the file upload option. */
                file_types_other?: string[];
                /**
                 * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                 *
                 * @example 5
                 */
                file_max_size?: number;
                /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                text_characters_limited?: boolean;
                /**
                 * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                 *
                 * @example 1
                 */
                text_min_length?: number;
                /**
                 * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                 *
                 * @example 55
                 */
                text_max_length?: number;
                /**
                 * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                 *
                 * @example true
                 */
                text_lines_limited?: boolean;
                /**
                 * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                 *
                 * @example 4
                 */
                text_max_lines?: number;
                /**
                 * @description (numbers_only_text) Flag to limit the value of a number option.
                 *
                 * @example true
                 */
                number_limited?: boolean;
                /**
                 * @description (numbers_only_text) The type of limit on values entered for a number option.
                 *
                 * @example lowest
                 */
                number_limit_mode?: 'lowest' | 'highest' | 'range';
                /**
                 * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                 *
                 * @example 100
                 */
                number_lowest_value?: number;
                /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                number_highest_value?: number;
                /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                number_integers_only?: boolean;
                /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                product_list_adjusts_inventory?: boolean;
                /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                product_list_adjusts_pricing?: boolean;
                /**
                 * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                 *
                 * @example weight
                 */
                product_list_shipping_calc?: 'none' | 'weight' | 'package';
              };
              option_values?: (({
                /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                is_default?: boolean;
                /**
                 * @description The text display identifying the value on the storefront. Required in a /POST.
                 *
                 * @example Green
                 */
                label: string;
                /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
                sort_order: number;
                /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                value_data?: { [key: string]: unknown };
              } & {
                adjusters?: {
                  /**
                   * Adjuster
                   * @description Adjuster for Complex Rules.
                   */
                  price?: {
                    /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster?: 'relative' | 'percentage';
                    /**
                     * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                     *
                     * @example 5
                     */
                    adjuster_value?: number;
                  };
                  /**
                   * Adjuster
                   * @description Adjuster for Complex Rules.
                   */
                  weight?: {
                    /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster?: 'relative' | 'percentage';
                    /**
                     * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                     *
                     * @example 5
                     */
                    adjuster_value?: number;
                  };
                  /**
                   * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                   *
                   * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                   */
                  image_url?: string;
                  purchasing_disabled?: {
                    /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                    status?: boolean;
                    /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                    message?: string;
                  };
                };
              }) & {
                /** @description The unique numeric ID of the value; increments sequentially. */
                id?: number;
              })[];
            } & {
              /**
               * @description The unique numeric ID of the modifier; increments sequentially.
               *
               * @example 12
               */
              id?: number;
              /**
               * @description The unique numeric ID of the product to which the option belongs.
               *
               * @example 77
               */
              product_id?: number;
              /**
               * @description The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
               *
               * @example Add-a-$5-Donation1535039590-191
               */
              name?: string;
              /**
               * @description The name of the option shown on the storefront.
               *
               * @example Donation
               */
              display_name?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The `Modifier` was in conflict with another option. This is the result of duplicate unique fields, such as `name`. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** The `Modifier` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
          type:
            | 'date'
            | 'checkbox'
            | 'file'
            | 'text'
            | 'multi_line_text'
            | 'numbers_only_text'
            | 'radio_buttons'
            | 'rectangles'
            | 'dropdown'
            | 'product_list'
            | 'product_list_with_images'
            | 'swatch';
          /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
          required: boolean;
          /** @description The order the modifiers display on the product detail page. */
          sort_order?: number;
          /**
           * Option Config
           * @description The values for option config can vary based on the Modifier created.
           */
          config?: {
            /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
            default_value?: string;
            /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
            checked_by_default?: boolean;
            /** @description (checkbox) Label displayed for the checkbox option. */
            checkbox_label?: string;
            /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
            date_limited?: boolean;
            /**
             * @description (date) The type of limit that is allowed to be entered on a date option.
             *
             * @example range
             */
            date_limit_mode?: 'earliest' | 'range' | 'latest';
            /**
             * Format: date-time
             * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             * @example 2018-08-31T00:00:00.000Z
             */
            date_earliest_value?: string;
            /**
             * Format: date-time
             * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             * @example 2019-01-01T00:00:00.000Z
             */
            date_latest_value?: string;
            /**
             * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
             *
             * @example specific
             */
            file_types_mode?: 'specific' | 'all';
            /**
             * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             *
             * @example images,documents,other
             */
            file_types_supported?: string[];
            /**
             * @description (file) A list of other file types allowed with the file upload option.
             *
             * @example pdf,txt
             */
            file_types_other?: string[];
            /**
             * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
             *
             * @example 5
             */
            file_max_size?: number;
            /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            text_characters_limited?: boolean;
            /**
             * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
             *
             * @example 1
             */
            text_min_length?: number;
            /**
             * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
             *
             * @example 55
             */
            text_max_length?: number;
            /**
             * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
             *
             * @example true
             */
            text_lines_limited?: boolean;
            /**
             * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
             *
             * @example 4
             */
            text_max_lines?: number;
            /**
             * @description (numbers_only_text) Flag to limit the value of a number option.
             *
             * @example true
             */
            number_limited?: boolean;
            /**
             * @description (numbers_only_text) The type of limit on values entered for a number option.
             *
             * @example lowest
             */
            number_limit_mode?: 'lowest' | 'highest' | 'range';
            /**
             * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
             *
             * @example 100
             */
            number_lowest_value?: number;
            /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            number_highest_value?: number;
            /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
            number_integers_only?: boolean;
            /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            product_list_adjusts_inventory?: boolean;
            /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            product_list_adjusts_pricing?: boolean;
            /**
             * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
             *
             * @example weight
             */
            product_list_shipping_calc?: 'none' | 'weight' | 'package';
          };
          option_values?: (({
            /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            is_default?: boolean;
            /**
             * @description The text display identifying the value on the storefront. Required in a /POST.
             *
             * @example Green
             */
            label: string;
            /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
            sort_order: number;
            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
            value_data?: { [key: string]: unknown };
          } & {
            adjusters?: {
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              price?: {
                /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: 'relative' | 'percentage';
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              weight?: {
                /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: 'relative' | 'percentage';
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
               *
               * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
               */
              image_url?: string;
              purchasing_disabled?: {
                /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                status?: boolean;
                /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                message?: string;
              };
            };
          }) & {
            /** @description The unique numeric ID of the value; increments sequentially. */
            id?: number;
          })[];
        } & {
          /**
           * @description The name of the option shown on the storefront.
           *
           * @example Donation
           */
          display_name: string;
        };
      };
    };
  };
  /** Returns a single *Product Modifier*. Optional parameters can be passed in. */
  getModifierById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Modifier`. */
        modifier_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productModifier_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /** Updates a *Product Modifier*. */
  updateModifier: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Modifier`. */
        modifier_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Modifer
             * @description Product Modifier
             */
            data?: {
              /** @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
              type:
                | 'date'
                | 'checkbox'
                | 'file'
                | 'text'
                | 'multi_line_text'
                | 'numbers_only_text'
                | 'radio_buttons'
                | 'rectangles'
                | 'dropdown'
                | 'product_list'
                | 'product_list_with_images'
                | 'swatch';
              /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
              required: boolean;
              /** @description The order the modifiers display on the product detail page. */
              sort_order?: number;
              /**
               * Option Config
               * @description The values for option config can vary based on the Modifier created.
               */
              config?: {
                /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                default_value?: string;
                /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
                checked_by_default?: boolean;
                /** @description (checkbox) Label displayed for the checkbox option. */
                checkbox_label?: string;
                /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
                date_limited?: boolean;
                /**
                 * @description (date) The type of limit that is allowed to be entered on a date option.
                 *
                 * @example range
                 */
                date_limit_mode?: 'earliest' | 'range' | 'latest';
                /**
                 * Format: date
                 * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                 */
                date_earliest_value?: string;
                /**
                 * Format: date
                 * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                 */
                date_latest_value?: string;
                /**
                 * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                 *
                 * @example specific
                 */
                file_types_mode?: 'specific' | 'all';
                /**
                 * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                 *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                 *   `other` - Allows file types defined in the `file_types_other` array.
                 */
                file_types_supported?: string[];
                /** @description (file) A list of other file types allowed with the file upload option. */
                file_types_other?: string[];
                /**
                 * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                 *
                 * @example 5
                 */
                file_max_size?: number;
                /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                text_characters_limited?: boolean;
                /**
                 * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                 *
                 * @example 1
                 */
                text_min_length?: number;
                /**
                 * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                 *
                 * @example 55
                 */
                text_max_length?: number;
                /**
                 * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                 *
                 * @example true
                 */
                text_lines_limited?: boolean;
                /**
                 * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                 *
                 * @example 4
                 */
                text_max_lines?: number;
                /**
                 * @description (numbers_only_text) Flag to limit the value of a number option.
                 *
                 * @example true
                 */
                number_limited?: boolean;
                /**
                 * @description (numbers_only_text) The type of limit on values entered for a number option.
                 *
                 * @example lowest
                 */
                number_limit_mode?: 'lowest' | 'highest' | 'range';
                /**
                 * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                 *
                 * @example 100
                 */
                number_lowest_value?: number;
                /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                number_highest_value?: number;
                /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                number_integers_only?: boolean;
                /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                product_list_adjusts_inventory?: boolean;
                /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                product_list_adjusts_pricing?: boolean;
                /**
                 * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                 *
                 * @example weight
                 */
                product_list_shipping_calc?: 'none' | 'weight' | 'package';
              };
              option_values?: (({
                /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                is_default?: boolean;
                /**
                 * @description The text display identifying the value on the storefront. Required in a /POST.
                 *
                 * @example Green
                 */
                label: string;
                /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
                sort_order: number;
                /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                value_data?: { [key: string]: unknown };
              } & {
                adjusters?: {
                  /**
                   * Adjuster
                   * @description Adjuster for Complex Rules.
                   */
                  price?: {
                    /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster?: 'relative' | 'percentage';
                    /**
                     * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                     *
                     * @example 5
                     */
                    adjuster_value?: number;
                  };
                  /**
                   * Adjuster
                   * @description Adjuster for Complex Rules.
                   */
                  weight?: {
                    /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                    adjuster?: 'relative' | 'percentage';
                    /**
                     * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                     *
                     * @example 5
                     */
                    adjuster_value?: number;
                  };
                  /**
                   * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                   *
                   * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                   */
                  image_url?: string;
                  purchasing_disabled?: {
                    /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                    status?: boolean;
                    /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                    message?: string;
                  };
                };
              }) & {
                /** @description The unique numeric ID of the value; increments sequentially. */
                id?: number;
              })[];
            } & {
              /**
               * @description The unique numeric ID of the modifier; increments sequentially.
               *
               * @example 12
               */
              id?: number;
              /**
               * @description The unique numeric ID of the product to which the option belongs.
               *
               * @example 77
               */
              product_id?: number;
              /**
               * @description The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
               *
               * @example Add-a-$5-Donation1535039590-191
               */
              name?: string;
              /**
               * @description The name of the option shown on the storefront.
               *
               * @example Donation
               */
              display_name?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The `Modifier` was in conflict with another modifier or option. This is the result of duplicate unique fields, such as `name`. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** The `Modifier` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
          type:
            | 'date'
            | 'checkbox'
            | 'file'
            | 'text'
            | 'multi_line_text'
            | 'numbers_only_text'
            | 'radio_buttons'
            | 'rectangles'
            | 'dropdown'
            | 'product_list'
            | 'product_list_with_images'
            | 'swatch';
          /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
          required: boolean;
          /** @description The order the modifiers display on the product detail page. */
          sort_order?: number;
          /**
           * Option Config
           * @description The values for option config can vary based on the Modifier created.
           */
          config?: {
            /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
            default_value?: string;
            /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
            checked_by_default?: boolean;
            /** @description (checkbox) Label displayed for the checkbox option. */
            checkbox_label?: string;
            /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
            date_limited?: boolean;
            /**
             * @description (date) The type of limit that is allowed to be entered on a date option.
             *
             * @example range
             */
            date_limit_mode?: 'earliest' | 'range' | 'latest';
            /**
             * Format: date
             * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             */
            date_earliest_value?: string;
            /**
             * Format: date
             * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             */
            date_latest_value?: string;
            /**
             * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
             *
             * @example specific
             */
            file_types_mode?: 'specific' | 'all';
            /**
             * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             */
            file_types_supported?: string[];
            /** @description (file) A list of other file types allowed with the file upload option. */
            file_types_other?: string[];
            /**
             * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
             *
             * @example 5
             */
            file_max_size?: number;
            /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            text_characters_limited?: boolean;
            /**
             * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
             *
             * @example 1
             */
            text_min_length?: number;
            /**
             * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
             *
             * @example 55
             */
            text_max_length?: number;
            /**
             * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
             *
             * @example true
             */
            text_lines_limited?: boolean;
            /**
             * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
             *
             * @example 4
             */
            text_max_lines?: number;
            /**
             * @description (numbers_only_text) Flag to limit the value of a number option.
             *
             * @example true
             */
            number_limited?: boolean;
            /**
             * @description (numbers_only_text) The type of limit on values entered for a number option.
             *
             * @example lowest
             */
            number_limit_mode?: 'lowest' | 'highest' | 'range';
            /**
             * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
             *
             * @example 100
             */
            number_lowest_value?: number;
            /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            number_highest_value?: number;
            /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
            number_integers_only?: boolean;
            /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            product_list_adjusts_inventory?: boolean;
            /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            product_list_adjusts_pricing?: boolean;
            /**
             * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
             *
             * @example weight
             */
            product_list_shipping_calc?: 'none' | 'weight' | 'package';
          };
          option_values?: {
            /** @description The unique numeric ID of the value; increments sequentially. */
            id?: number;
          }[];
        };
      };
    };
  };
  /** Deletes a *Product Modifier*. */
  deleteModifierById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Modifier`. */
        modifier_id: number;
      };
      header: {
        'Content-Type': string;
        Accept: string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of all product *Modifier Values*. Optional parameters can be passed in. */
  getModifierValues: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Modifier`. */
        modifier_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productModifierOptionValue_Full'][];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
    };
  };
  /**
   * Creates a *Modifier Value*.
   *
   * **Required Fields**
   * * label
   * * sort_order
   *
   * **Read-Only Fields**
   * * id
   */
  createModifierValue: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Modifier`. */
        modifier_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Modifier Value
             * @description Part of Modifier Value Response
             */
            data?: ({
              /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: { [key: string]: unknown };
            } & {
              adjusters?: {
                /**
                 * Adjuster
                 * @description Adjuster for Complex Rules.
                 */
                price?: {
                  /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  adjuster?: 'relative' | 'percentage';
                  /**
                   * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                   *
                   * @example 5
                   */
                  adjuster_value?: number;
                };
                /**
                 * Adjuster
                 * @description Adjuster for Complex Rules.
                 */
                weight?: {
                  /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  adjuster?: 'relative' | 'percentage';
                  /**
                   * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                   *
                   * @example 5
                   */
                  adjuster_value?: number;
                };
                /**
                 * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                 *
                 * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                 */
                image_url?: string;
                purchasing_disabled?: {
                  /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                  status?: boolean;
                  /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                  message?: string;
                };
              };
            }) & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The `ModifierValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
          is_default?: boolean;
          /**
           * @description The text display identifying the value on the storefront. Required in a /POST.
           *
           * @example Green
           */
          label: string;
          /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
          sort_order: number;
          /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
          value_data?: { [key: string]: unknown };
        } & {
          adjusters?: {
            /**
             * Adjuster
             * @description Adjuster for Complex Rules.
             */
            price?: {
              /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              adjuster?: ('relative' | 'percentage') | null;
              /**
               * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
               *
               * @example 5
               */
              adjuster_value?: number;
            };
            /**
             * Adjuster
             * @description Adjuster for Complex Rules.
             */
            weight?: {
              /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              adjuster?: ('relative' | 'percentage') | null;
              /**
               * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
               *
               * @example 5
               */
              adjuster_value?: number;
            };
            /**
             * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
             *
             * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
             */
            image_url?: string;
            purchasing_disabled?: {
              /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
              status?: boolean;
              /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
              message?: string;
            };
          };
        };
      };
    };
  };
  /** Returns a single *Modifier Value*. Optional parameters can be passed in. */
  getModifierValueById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Modifier`. */
        modifier_id: number;
        /** The ID of the `Modifier/Option Value`. */
        value_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productModifierOptionValue_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Modifier Value*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   */
  updateModifierValue: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Modifier`. */
        modifier_id: number;
        /** The ID of the `Modifier/Option Value`. */
        value_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Modifier Value
             * @description Part of Modifier Value Response
             */
            data?: ({
              /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: { [key: string]: unknown };
            } & {
              adjusters?: {
                /**
                 * Adjuster
                 * @description Adjuster for Complex Rules.
                 */
                price?: {
                  /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  adjuster?: 'relative' | 'percentage';
                  /**
                   * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                   *
                   * @example 5
                   */
                  adjuster_value?: number;
                };
                /**
                 * Adjuster
                 * @description Adjuster for Complex Rules.
                 */
                weight?: {
                  /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                  adjuster?: 'relative' | 'percentage';
                  /**
                   * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                   *
                   * @example 5
                   */
                  adjuster_value?: number;
                };
                /**
                 * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                 *
                 * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                 */
                image_url?: string;
                purchasing_disabled?: {
                  /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                  status?: boolean;
                  /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                  message?: string;
                };
              };
            }) & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The `ModifierValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': ({
          /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
          is_default?: boolean;
          /**
           * @description The text display identifying the value on the storefront. Required in a /POST.
           *
           * @example Green
           */
          label: string;
          /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
          sort_order: number;
          /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
          value_data?: { [key: string]: unknown };
        } & {
          adjusters?: {
            /**
             * Adjuster
             * @description Adjuster for Complex Rules.
             */
            price?: {
              /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              adjuster?: ('relative' | 'percentage') | null;
              /**
               * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
               *
               * @example 5
               */
              adjuster_value?: number;
            };
            /**
             * Adjuster
             * @description Adjuster for Complex Rules.
             */
            weight?: {
              /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
              adjuster?: ('relative' | 'percentage') | null;
              /**
               * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
               *
               * @example 5
               */
              adjuster_value?: number;
            };
            /**
             * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
             *
             * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
             */
            image_url?: string;
            purchasing_disabled?: {
              /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
              status?: boolean;
              /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
              message?: string;
            };
          };
        }) & {
          /** @description The unique numeric ID of the value; increments sequentially. */
          id?: number;
        };
      };
    };
  };
  /** Deletes a *Modifier Value*. */
  deleteModifierValueById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Modifier`. */
        modifier_id: number;
        /** The ID of the `Modifier/Option Value`. */
        value_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /**
   * Creates a *Modifier Image*.
   *
   * The image will show on the storefront when the value is selected.
   *
   *  **Required Fields**
   * - image_file: Form posts are the only accepted upload option.
   */
  createModifierImage: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Modifier`. */
        modifier_id: number;
        /** The ID of the `Modifier`. */
        value_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Resource Image
             * @description An object containing a publicly accessible image URL, or a form post that contains an image file.
             */
            data?: {
              /** @description A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file. */
              image_url?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
      400: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** Modifier image was not valid. This is the result of missing `image_file` fields, or of a non-URL value for the `image_file` field. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          image_file?: string;
        };
      };
    };
  };
  /** Returns a list of all product *Complex Rules*. Optional parameters may be passed in. */
  getComplexRules: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['complexRule_Base'][];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
    };
  };
  /**
   * Creates a product *Complex Rule*.
   *
   * **Required Fields**
   * - modifier_id
   * - modifier_value_id
   * - modifier_value_id
   * - variant_id
   *
   * **Read-Only Fields**
   * - complex_rule_id
   * - conditions_id
   * - rule_id
   * - combination_id
   * - id
   */
  createComplexRule: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Complex Rule
             * @description Common ComplexRule properties.
             */
            data?: {
              /**
               * @description The unique numeric ID of the rule; increments sequentially.
               * Read-Only
               * @example 5
               */
              id?: number;
              /**
               * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
               *
               * @example 67
               */
              product_id?: number | null;
              /** @description The priority to give this rule when making adjustments to the product properties. */
              sort_order?: number;
              /**
               * @description Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
               *
               * @example true
               */
              enabled?: boolean;
              /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
              stop?: boolean;
              /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
              purchasing_disabled?: boolean;
              /**
               * @description Message displayed on the storefront when a rule disables the purchasing of a product.
               *
               * @example This product is not available at this time.
               */
              purchasing_disabled_message?: string;
              /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
              purchasing_hidden?: boolean;
              /**
               * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
               *
               * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
               */
              image_url?: string;
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              price_adjuster?: {
                /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: ('relative' | 'percentage') | null;
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              weight_adjuster?: {
                /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: ('relative' | 'percentage') | null;
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              conditions?: {
                /**
                 * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
                 *
                 * @example 3
                 */
                id?: number | null;
                /**
                 * @description The unique numeric ID of the rule with which the condition is associated.
                 * Read-Only
                 * @example 4
                 */
                rule_id?: number | null;
                /**
                 * @description The unique numeric ID of the modifier with which the rule condition is associated.
                 * Required in /POST.
                 * @example 55
                 */
                modifier_id: number | null;
                /**
                 * @description The unique numeric ID of the modifier value with which the rule condition is associated.
                 * Required in /POST.
                 * @example 256
                 */
                modifier_value_id: number | null;
                /**
                 * @description The unique numeric ID of the variant with which the rule condition is associated.
                 * Required in /POST.
                 * @example 1
                 */
                variant_id: number | null;
                /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
                combination_id?: number;
              }[];
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The `ComplexRule` was in conflict with another `ComplexRule`. This is the result of duplicate conditions. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** The `ComplexRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description The unique numeric ID of the rule; increments sequentially.
           * Read-Only
           * @example 5
           */
          id?: number;
          /**
           * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
           *
           * @example 67
           */
          product_id?: number | null;
          /** @description The priority to give this rule when making adjustments to the product properties. */
          sort_order?: number;
          /**
           * @description Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
           *
           * @example true
           */
          enabled?: boolean;
          /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
          stop?: boolean;
          /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
          purchasing_disabled?: boolean;
          /**
           * @description Message displayed on the storefront when a rule disables the purchasing of a product.
           *
           * @example This product is not available at this time.
           */
          purchasing_disabled_message?: string;
          /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
          purchasing_hidden?: boolean;
          /**
           * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
           *
           * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
           */
          image_url?: string;
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          price_adjuster?: {
            /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          weight_adjuster?: {
            /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          conditions?: {
            /**
             * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
             *
             * @example 3
             */
            id?: number | null;
            /**
             * @description The unique numeric ID of the rule with which the condition is associated.
             * Read-Only
             * @example 4
             */
            rule_id?: number | null;
            /**
             * @description The unique numeric ID of the modifier with which the rule condition is associated.
             * Required in /POST.
             * @example 55
             */
            modifier_id: number | null;
            /**
             * @description The unique numeric ID of the modifier value with which the rule condition is associated.
             * Required in /POST.
             * @example 256
             */
            modifier_value_id: number | null;
            /**
             * @description The unique numeric ID of the variant with which the rule condition is associated.
             * Required in /POST.
             * @example 1
             */
            variant_id: number | null;
            /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
            combination_id?: number;
          }[];
        };
      };
    };
  };
  /** Returns a single *Complex Rule*. Optional parameters can be passed in. */
  getComplexRuleById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `ComplexRule`. */
        complex_rule_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Complex Rule
             * @description Common ComplexRule properties.
             */
            data?: {
              /**
               * @description The unique numeric ID of the rule; increments sequentially.
               * Read-Only
               * @example 5
               */
              id?: number;
              /**
               * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
               *
               * @example 67
               */
              product_id?: number;
              /** @description The priority to give this rule when making adjustments to the product properties. */
              sort_order?: number;
              /**
               * @description Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
               *
               * @example true
               */
              enabled?: boolean;
              /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
              stop?: boolean;
              /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
              purchasing_disabled?: boolean;
              /**
               * @description Message displayed on the storefront when a rule disables the purchasing of a product.
               *
               * @example This product is not available at this time.
               */
              purchasing_disabled_message?: string;
              /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
              purchasing_hidden?: boolean;
              /**
               * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
               *
               * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
               */
              image_url?: string;
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              price_adjuster?: {
                /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: 'relative' | 'percentage';
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              weight_adjuster?: {
                /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: 'relative' | 'percentage';
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              conditions?: {
                /**
                 * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
                 *
                 * @example 3
                 */
                id?: number;
                /**
                 * @description The unique numeric ID of the rule with which the condition is associated.
                 * Read-Only
                 * @example 4
                 */
                rule_id?: number;
                /**
                 * @description The unique numeric ID of the modifier with which the rule condition is associated.
                 * Required in /POST.
                 * @example 55
                 */
                modifier_id: number;
                /**
                 * @description The unique numeric ID of the modifier value with which the rule condition is associated.
                 * Required in /POST.
                 * @example 256
                 */
                modifier_value_id: number;
                /**
                 * @description The unique numeric ID of the variant with which the rule condition is associated.
                 * Required in /POST.
                 * @example 1
                 */
                variant_id: number;
                /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
                combination_id?: number;
              }[];
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Complex Rule*.
   *
   * **Required Fields**:
   * - none
   *
   * **Read-Only Fields**:
   * - complex_rule_id
   * - conditions_id
   * - rule_id
   * - combination_id
   * - id
   */
  updateComplexRule: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `ComplexRule`. */
        complex_rule_id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Complex Rule
             * @description Common ComplexRule properties.
             */
            data?: {
              /**
               * @description The unique numeric ID of the rule; increments sequentially.
               * Read-Only
               * @example 5
               */
              id?: number;
              /**
               * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
               *
               * @example 67
               */
              product_id?: number;
              /** @description The priority to give this rule when making adjustments to the product properties. */
              sort_order?: number;
              /**
               * @description Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
               *
               * @example true
               */
              enabled?: boolean;
              /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
              stop?: boolean;
              /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
              purchasing_disabled?: boolean;
              /**
               * @description Message displayed on the storefront when a rule disables the purchasing of a product.
               *
               * @example This product is not available at this time.
               */
              purchasing_disabled_message?: string;
              /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
              purchasing_hidden?: boolean;
              /**
               * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
               *
               * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
               */
              image_url?: string;
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              price_adjuster?: {
                /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: 'relative' | 'percentage';
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              weight_adjuster?: {
                /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                adjuster?: 'relative' | 'percentage';
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              conditions?: {
                /**
                 * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
                 *
                 * @example 3
                 */
                id?: number;
                /**
                 * @description The unique numeric ID of the rule with which the condition is associated.
                 * Read-Only
                 * @example 4
                 */
                rule_id?: number;
                /**
                 * @description The unique numeric ID of the modifier with which the rule condition is associated.
                 * Required in /POST.
                 * @example 55
                 */
                modifier_id: number;
                /**
                 * @description The unique numeric ID of the modifier value with which the rule condition is associated.
                 * Required in /POST.
                 * @example 256
                 */
                modifier_value_id: number;
                /**
                 * @description The unique numeric ID of the variant with which the rule condition is associated.
                 * Required in /POST.
                 * @example 1
                 */
                variant_id: number;
                /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
                combination_id?: number;
              }[];
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The `ComplexRule` was in conflict with another `ComplexRule`. This is the result of duplicate conditions. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** The `ComplexRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description The unique numeric ID of the rule; increments sequentially.
           * Read-Only
           * @example 5
           */
          id?: number;
          /**
           * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
           *
           * @example 67
           */
          product_id?: number | null;
          /** @description The priority to give this rule when making adjustments to the product properties. */
          sort_order?: number;
          /**
           * @description Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
           *
           * @example true
           */
          enabled?: boolean;
          /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
          stop?: boolean;
          /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
          purchasing_disabled?: boolean;
          /**
           * @description Message displayed on the storefront when a rule disables the purchasing of a product.
           *
           * @example This product is not available at this time.
           */
          purchasing_disabled_message?: string;
          /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
          purchasing_hidden?: boolean;
          /**
           * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
           *
           * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
           */
          image_url?: string;
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          price_adjuster?: {
            /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          weight_adjuster?: {
            /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          conditions?: {
            /**
             * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
             *
             * @example 3
             */
            id?: number | null;
            /**
             * @description The unique numeric ID of the rule with which the condition is associated.
             * Read-Only
             * @example 4
             */
            rule_id?: number | null;
            /**
             * @description The unique numeric ID of the modifier with which the rule condition is associated.
             * Required in /POST.
             * @example 55
             */
            modifier_id: number | null;
            /**
             * @description The unique numeric ID of the modifier value with which the rule condition is associated.
             * Required in /POST.
             * @example 256
             */
            modifier_value_id: number | null;
            /**
             * @description The unique numeric ID of the variant with which the rule condition is associated.
             * Required in /POST.
             * @example 1
             */
            variant_id: number | null;
            /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
            combination_id?: number;
          }[];
        };
      };
    };
  };
  /** Deletes a product *Complex Rule*. */
  deleteComplexRuleById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `ComplexRule`. */
        complex_rule_id: number;
      };
      header: {
        'Content-Type': string;
        Accept: string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of product *Custom Fields*. Optional parameters can be passed in. */
  getCustomFields: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: {
              /**
               * @description The unique numeric ID of the custom field; increments sequentially.
               * Read-Only
               * @example 6
               */
              id?: number;
              /**
               * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
               *
               * @example ISBN
               */
              name: string;
              /**
               * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
               *
               * @example 1234567890123
               */
              value: string;
            }[];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
    };
  };
  /**
   * Creates a *Custom Field*.
   *
   * **Required Fields:**
   * - name
   * - value
   *
   * **Read-Only:**
   * - id
   *
   * **Limits**
   * - 200 custom fields per product limit.
   * - 255 characters per custom field limit.
   */
  createCustomField: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Custom Field
             * @description Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product’s page, such as a book’s ISBN or a DVD’s release date.
             */
            data?: {
              /**
               * @description The unique numeric ID of the custom field; increments sequentially.
               * Read-Only
               * @example 6
               */
              id?: number;
              /**
               * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
               *
               * @example ISBN
               */
              name: string;
              /**
               * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
               *
               * @example 1234567890123
               */
              value: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The parent resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** The `CustomField` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description The unique numeric ID of the custom field; increments sequentially.
           * Read-Only
           * @example 6
           */
          id?: number;
          /**
           * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
           *
           * @example ISBN
           */
          name: string;
          /**
           * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
           *
           * @example 1234567890123
           */
          value: string;
        };
      };
    };
  };
  /** Returns a single *Custom Field*. Optional parameters can be passed in. */
  getCustomFieldById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `CustomField`. */
        custom_field_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['productCustomField_Base'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Custom Field*.
   *
   * **Required Fields**
   * - none
   *
   * **Read-Only**
   * - id
   */
  updateCustomField: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `CustomField`. */
        custom_field_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Custom Field
             * @description Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product’s page, such as a book’s ISBN or a DVD’s release date.
             */
            data?: {
              /**
               * @description The unique numeric ID of the custom field; increments sequentially.
               * Read-Only
               * @example 6
               */
              id?: number;
              /**
               * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
               *
               * @example ISBN
               */
              name: string;
              /**
               * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
               *
               * @example 1234567890123
               */
              value: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** The `CustomField` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description The unique numeric ID of the custom field; increments sequentially.
           * Read-Only
           * @example 6
           */
          id?: number;
          /**
           * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
           *
           * @example ISBN
           */
          name: string;
          /**
           * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
           *
           * @example 1234567890123
           */
          value: string;
        };
      };
    };
  };
  /** Deletes a product *Custom Field*. */
  deleteCustomFieldById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `CustomField`. */
        custom_field_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      /** `204 No Content`. Action has been enacted and no further information is to be supplied. `null` is returned. */
      204: never;
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /** Returns a list of *Bulk Pricing Rules*. Optional parameters can be passed in. */
  getBulkPricingRules: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['bulkPricingRule_Full'][];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
      /** The parent resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Creates a *Bulk Pricing Rule*.
   *
   * **Required Fields**
   * - quantity_min
   * - quantity_max
   * - type
   * - amount
   *
   * **Read-Only Fields**
   * - id
   *
   * **Limits**
   * - 50 bulk pricing rule per product limit.
   */
  createBulkPricingRule: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['bulkPricingRule_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The parent resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** The `BulkPricingRule` was in conflict with another bulk pricing rule. This is the result of quantity range overlapping with existing bulk pricing rules. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** The `BulkPricingRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['bulkPricingRule_Full'];
      };
    };
  };
  /** Returns a single *Bulk Pricing Rule*. Optional parameters can be passed in. */
  getBulkPricingRuleById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `BulkPricingRule`. */
        bulk_pricing_rule_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['bulkPricingRule_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource or parent resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Bulk Pricing Rule*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * - id
   */
  updateBulkPricingRule: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `BulkPricingRule`. */
        bulk_pricing_rule_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Bulk Pricing Rule
             * @description Common BulkPricingRule properties
             */
            data?: {
              /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
              id?: number;
              /**
               * @description The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero.
               * Required in /POST.
               *
               * @example 10
               */
              quantity_min: number;
              /**
               * @description The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.
               * Required in /POST.
               * @example 50
               */
              quantity_max: number;
              /**
               * @description The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.
               * Required in /POST.
               * @example price
               */
              type: 'price' | 'percent' | 'fixed';
              /**
               * @description The discount can be a fixed dollar amount or a percentage. For a fixed dollar amount enter it as an integer and the response will return as an integer. For percentage enter the amount as the percentage divided by 100 using string format. For example 10% percent would be “.10”. The response will return as an integer.
               * Required in /POST.
               */
              amount: number;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource or parent resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** The `BulkPricingRule` was in conflict with another bulk pricing rule. This is the result of quantity range overlapping with existing bulk pricing rules. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** The `BulkPricingRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['bulkPricingRule_Full'];
      };
    };
  };
  /** Deletes a *Bulk Pricing Rule*. */
  deleteBulkPricingRuleById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `BulkPricingRule`. */
        bulk_pricing_rule_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
      /** The resource or parent resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /** Returns a list of *Product Metafields*. Optional parameters can be passed in. */
  getProductMetafieldsByProductId: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      query: {
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Filter based on a metafield's key. */
        key?: string;
        /** Filter based on a metafield's namespace. */
        namespace?: string;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['metafield_Full'][];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Creates a *Product Metafield*.
   *
   * **Required Fields:**
   * * permission_set
   * * namespace
   * * key
   * * value
   *
   * **Read-Only Fields**
   * * id
   *
   * **Note:** The max number of metafields allowed on each product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  createProductMetafield: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['metafield_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combinations of the app's client id, namespace, key, resource_type, and resource_id. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['metafield_Post'];
      };
    };
  };
  /** Returns a single *Product Metafield*. Optional parameters can be passed in. */
  getProductMetafieldByProductId: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Metafield`. */
        metafield_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Metafield
             * @description Common Metafield properties.
             */
            data?: {
              /**
               * Format: date-time
               * @description Date and time of the metafield's creation. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date and time when the metafield was last updated. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_modified?: string;
              /**
               * @description Description for the metafields.
               *
               * @example Location in the warehouse
               */
              description?: string;
              /**
               * @description Unique ID of the *Metafield*. Read-Only.
               * @example 6
               */
              id?: number;
              /**
               * @description The name of the field, for example: `location_id`, `color`. Required for POST.
               *
               * @example Location
               */
              key: string;
              /**
               * @description Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST.
               *
               * @example Warehouse Locations
               */
              namespace: string;
              /**
               * @description Determines the visibility and writeability of the field by other API consumers.
               *
               * |Value|Description
               * |-|-|
               * |`app_only`|Private to the app that owns the field|
               * |`read`|Visible to other API consumers|
               * |`write`|Open for reading and writing by other API consumers|
               * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
               * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
               */
              permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
              /**
               * @description The ID for the resource with which the metafield is associated.
               *
               * @example 111
               */
              resource_id?: number;
              /**
               * @description The type of resource with which the metafield is associated.
               *
               * @example product
               */
              resource_type?: 'category' | 'brand' | 'product' | 'variant';
              /**
               * @description The value of the field, for example: `1`, `blue`. Required for POST.
               *
               * @example 4HG
               */
              value: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Product Metafield*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   * * These fields can only be modified using the API account that created the metafield:
   * 	* `namespace`
   * 	* `key`
   * 	* `permission_set`
   * 	* `value`
   *
   * **Usage Notes**
   * * Attempting to modify the `namespace`, `key`, `permission_set`, or `value` field using an API account different from the one used to create those metafields will result in a `403` error message.
   */
  updateProductMetafield: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Metafield`. */
        metafield_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Metafield
             * @description Common Metafield properties.
             */
            data?: {
              /**
               * Format: date-time
               * @description Date and time of the metafield's creation. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date and time when the metafield was last updated. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_modified?: string;
              /**
               * @description Description for the metafields.
               *
               * @example Location in the warehouse
               */
              description?: string;
              /**
               * @description Unique ID of the *Metafield*. Read-Only.
               * @example 6
               */
              id?: number;
              /**
               * @description The name of the field, for example: `location_id`, `color`. Required for POST.
               *
               * @example Location
               */
              key: string;
              /**
               * @description Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST.
               *
               * @example Warehouse Locations
               */
              namespace: string;
              /**
               * @description Determines the visibility and writeability of the field by other API consumers.
               *
               * |Value|Description
               * |-|-|
               * |`app_only`|Private to the app that owns the field|
               * |`read`|Visible to other API consumers|
               * |`write`|Open for reading and writing by other API consumers|
               * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
               * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
               */
              permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
              /**
               * @description The ID for the resource with which the metafield is associated.
               *
               * @example 111
               */
              resource_id?: number;
              /**
               * @description The type of resource with which the metafield is associated.
               *
               * @example product
               */
              resource_type?: 'category' | 'brand' | 'product' | 'variant';
              /**
               * @description The value of the field, for example: `1`, `blue`. Required for POST.
               *
               * @example 4HG
               */
              value: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['metafield_Put'];
      };
    };
  };
  /** Deletes a *Product Metafield*. */
  deleteProductMetafieldById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `Metafield`. */
        metafield_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of all *Product Reviews*. Optional parameters can be passed in. */
  getProductReviews: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Filter items by status. `1` for approved, `0` for pending. */
        status?: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: ({
              /**
               * @description The title for the product review.
               * Required in /POST.
               */
              title: string;
              /** @description The text for the product review. */
              text?: string;
              /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
              status?: string;
              /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
              rating?: number;
              /** @description The email of the reviewer. Must be a valid email, or an empty string. */
              email?: string;
              /** @description The name of the reviewer. */
              name?: string;
              /**
               * Format: date-time
               * @description Date the product was reviewed. Required in /POST.
               */
              date_reviewed: string;
            } & {
              /** @description The unique numeric ID of the product review; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the review is associated. */
              product_id?: number;
              /**
               * Format: date-time
               * @description Date the product review was created.
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date the product review was modified.
               */
              date_modified?: string;
            })[];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
      /** There are no reviews on this product. */
      204: never;
      /** The product ID does not exist. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Creates a *Product Review*.
   *
   * **Required Fields**
   * - title
   * - date_reviewed
   *
   * **Read-Only Fields**
   * * id
   */
  createProductReview: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Product Review
             * @description A product review model.
             */
            data?: {
              /**
               * @description The title for the product review.
               * Required in /POST.
               */
              title: string;
              /** @description The text for the product review. */
              text?: string;
              /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
              status?: string;
              /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
              rating?: number;
              /** @description The email of the reviewer. Must be a valid email, or an empty string. */
              email?: string;
              /** @description The name of the reviewer. */
              name?: string;
              /**
               * Format: date-time
               * @description Date the product was reviewed. Required in /POST.
               */
              date_reviewed: string;
            } & {
              /** @description The unique numeric ID of the product review; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the review is associated. */
              product_id?: number;
              /**
               * Format: date-time
               * @description Date the product review was created.
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date the product review was modified.
               */
              date_modified?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The product ID does not exist. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description The title for the product review.
           * Required in /POST.
           */
          title: string;
          /** @description The text for the product review. */
          text?: string;
          /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
          status?: string;
          /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
          rating?: number;
          /** @description The email of the reviewer. Must be a valid email, or an empty string. */
          email?: string;
          /** @description The name of the reviewer. */
          name?: string;
          /**
           * Format: date-time
           * @description Date the product was reviewed. Required in /POST.
           */
          date_reviewed: string;
        };
      };
    };
  };
  /** Returns a single *Product Review*. Optional parameters maybe passed in. */
  getProductReviewById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `review` that is being operated on. */
        review_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Product Review
             * @description A product review model.
             */
            data?: {
              /**
               * @description The title for the product review.
               * Required in /POST.
               */
              title: string;
              /** @description The text for the product review. */
              text?: string;
              /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
              status?: string;
              /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
              rating?: number;
              /** @description The email of the reviewer. Must be a valid email, or an empty string. */
              email?: string;
              /** @description The name of the reviewer. */
              name?: string;
              /**
               * Format: date-time
               * @description Date the product was reviewed. Required in /POST.
               */
              date_reviewed: string;
            } & {
              /** @description The unique numeric ID of the product review; increments sequentially. */
              id?: number;
              /**
               * Format: date-time
               * @description Date the product review was created.
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date the product review was modified.
               */
              date_modified?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Product Review*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   */
  updateProductReview: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `review` that is being operated on. */
        review_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Product Review
             * @description A product review model.
             */
            data?: {
              /**
               * @description The title for the product review.
               * Required in /POST.
               */
              title: string;
              /** @description The text for the product review. */
              text?: string;
              /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
              status?: string;
              /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
              rating?: number;
              /** @description The email of the reviewer. Must be a valid email, or an empty string. */
              email?: string;
              /** @description The name of the reviewer. */
              name?: string;
              /**
               * Format: date-time
               * @description Date the product was reviewed. Required in /POST.
               */
              date_reviewed: string;
            } & {
              /** @description The unique numeric ID of the product review; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the review is associated. */
              product_id?: number;
              /**
               * Format: date-time
               * @description Date the product review was created.
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date the product review was modified.
               */
              date_modified?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
    /** A BigCommerce `ProductReview` object. */
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description The title for the product review.
           * Required in /POST.
           */
          title: string;
          /** @description The text for the product review. */
          text?: string;
          /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
          status?: string;
          /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
          rating?: number;
          /** @description The email of the reviewer. Must be a valid email, or an empty string. */
          email?: string;
          /** @description The name of the reviewer. */
          name?: string;
          /**
           * Format: date-time
           * @description Date the product was reviewed. Required in /POST.
           */
          date_reviewed: string;
        };
      };
    };
  };
  /** Deletes a *Product Review*. */
  deleteProductReview: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Product` to which the resource belongs. */
        product_id: number;
        /** The ID of the `review` that is being operated on. */
        review_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of *Categories*. Optional filter parameters can be passed in. */
  getCategories: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** Filter items by id. */
        id?: number;
        'id:in'?: number[];
        'id:not_in'?: number[];
        'id:min'?: number[];
        'id:max'?: number[];
        'id:greater'?: number[];
        'id:less'?: number[];
        /** Filter items by name. */
        name?: string;
        'name:like'?: string[];
        /** Filter items by parent_id. If the category is a child or sub category it can be filtered with the parent_id. */
        parent_id?: number;
        'parent_id:in'?: number[];
        'parent_id:min'?: number[];
        'parent_id:max'?: number[];
        'parent_id:greater'?: number[];
        'parent_id:less'?: number[];
        /** Filter items by page_title. */
        page_title?: string;
        'page_title:like'?: string[];
        /** Filter items by keywords. eg. new, towel, bath */
        keyword?: string;
        /** Filter items by if visible on the storefront. */
        is_visible?: boolean;
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: { [key: string]: unknown }[];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
    };
  };
  /**
   * Creates a *Category*.
   *
   * Use this endpoint when an API only works with categories of a default BigCommerce storefront (`channel_id=1`).
   *
   * Use the [Create Categories](/api-reference/store-management/catalog/categories-batch/createcategories) endpoint when an API works with categories across different category trees that belong to different storefront channels.
   *
   * **Required Fields**:
   * - `parent_id`:
   * 	- To create a child category, set the `parent_id` to the parent category.
   * 	- To create a top level category, set the `parent_id` to `0`.
   * - `name`
   *
   * **Read-Only Fields**:
   * - `id`
   *
   * **Limits**:
   * - 16,000 categories per store limit.
   * - 1,000 categories per product limit.
   * - 50 characters category name length.
   * - 8 levels of category depth limit.
   * - 65,642 characters category description length limit.
   */
  createCategory: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['category_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        content: {
          'application/json': components['schemas']['error_Base'];
        };
      };
      /** The `Category` was in conflict with another category. This is the result of duplicate unique values, such as `name` or `custom_url`. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** The `Category` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description Unique ID of the *Category*. Increments sequentially.
           * Read-Only.
           */
          id?: number;
          /**
           * @description The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
           * Required in a POST if creating a child category.
           * @example 2
           */
          parent_id: number;
          /**
           * @description The name displayed for the category. Name is unique with respect to the category's siblings.
           * Required in a POST.
           * @example Bath
           */
          name: string;
          /**
           * @description The product description, which can include HTML formatting.
           *
           * @example <p>We offer a wide variety of products perfect for relaxing</p>
           */
          description?: string;
          /**
           * @description Number of views the category has on the storefront.
           *
           * @example 1050
           */
          views?: number;
          /**
           * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
           *
           * @example 3
           */
          sort_order?: number;
          /**
           * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
           *
           * @example Bath
           */
          page_title?: string;
          /** @description A comma-separated list of keywords that can be used to locate the category when searching the store. */
          search_keywords?: string;
          /** @description Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
          meta_keywords?: string[];
          /** @description Custom meta description for the category page. If not defined, the store's default meta description will be used. */
          meta_description?: string;
          /**
           * @description A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied.
           *
           * @example category.html
           */
          layout_file?: string;
          /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
          is_visible?: boolean;
          /** @description Determines how the products are sorted on category page load. */
          default_product_sort?:
            | 'use_store_settings'
            | 'featured'
            | 'newest'
            | 'best_selling'
            | 'alpha_asc'
            | 'alpha_desc'
            | 'avg_customer_review'
            | 'price_asc'
            | 'price_desc';
          /**
           * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field.
           *
           * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
           */
          image_url?: string;
          /**
           * Custom Url Category
           * @description The custom URL for the category on the storefront.
           */
          custom_url?: {
            /**
             * @description Category URL on the storefront.
             *
             * @example /shoes
             */
            url?: string;
            /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
            is_customized?: boolean;
          };
        };
      };
    };
  };
  /**
   * Deletes *Category* objects. At least one filter parameter is required to perform the `DELETE` operation.
   *
   * **Usage Notes**
   *
   * - Sending a `DELETE`request without specifying a filter parameter will result in a `422` error.
   * - Sending a `DELETE` request for a category that contains products will result in a `422` error. Move products to a new category by sending a `PUT` request to the `/catalog/products/{product_id}` endpoint before deleting a category.
   */
  deleteCategories: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** Filter items by id. */
        id?: number;
        'id:in'?: number[];
        'id:not_in'?: number[];
        'id:min'?: number[];
        'id:max'?: number[];
        'id:greater'?: number[];
        'id:less'?: number[];
        /** Filter items by name. */
        name?: string;
        /** Filter items by parent_id. If the category is a child or sub category it can be filtered with the parent_id. */
        parent_id?: number;
        /** Filter items by page_title. */
        page_title?: string;
        /** Filter items by keywords. eg. new, towel, bath */
        keyword?: string;
        /** Filter items by if visible on the storefront. */
        is_visible?: boolean;
        'name:like'?: string[];
        'parent_id:in'?: number[];
        'parent_id:min'?: number[];
        'parent_id:max'?: number[];
        'parent_id:greater'?: number[];
        'parent_id:less'?: number[];
        'page_title:like'?: string[];
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a single *Category*. Optional parameters can be passed in. */
  getCategoryById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Category` to which the resource belongs. */
        category_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['category_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Category*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * - id
   */
  updateCategory: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Category` to which the resource belongs. */
        category_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Category
             * @description Common Category object properties.
             */
            data?: {
              /**
               * @description Unique ID of the *Category*. Increments sequentially.
               * Read-Only.
               */
              id?: number;
              /**
               * @description The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
               * Required in a POST if creating a child category.
               * @example 2
               */
              parent_id: number;
              /**
               * @description The name displayed for the category. Name is unique with respect to the category's siblings.
               * Required in a POST.
               * @example Bath
               */
              name: string;
              /**
               * @description The product description, which can include HTML formatting.
               *
               * @example <p>We offer a wide variety of products perfect for relaxing</p>
               */
              description?: string;
              /**
               * @description Number of views the category has on the storefront.
               *
               * @example 1050
               */
              views?: number;
              /**
               * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
               *
               * @example 3
               */
              sort_order?: number;
              /**
               * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
               *
               * @example Bath
               */
              page_title?: string;
              /** @description A comma-separated list of keywords that can be used to locate the category when searching the store. */
              search_keywords?: string;
              /** @description Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
              meta_keywords?: string[];
              /** @description Custom meta description for the category page. If not defined, the store's default meta description will be used. */
              meta_description?: string;
              /**
               * @description A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied.
               *
               * @example category.html
               */
              layout_file?: string;
              /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
              is_visible?: boolean;
              /** @description Determines how the products are sorted on category page load. */
              default_product_sort?:
                | 'use_store_settings'
                | 'featured'
                | 'newest'
                | 'best_selling'
                | 'alpha_asc'
                | 'alpha_desc'
                | 'avg_customer_review'
                | 'price_asc'
                | 'price_desc';
              /**
               * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field.
               *
               * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
               */
              image_url?: string;
              /**
               * Custom Url Category
               * @description The custom URL for the category on the storefront.
               */
              custom_url?: {
                /**
                 * @description Category URL on the storefront.
                 *
                 * @example /shoes
                 */
                url?: string;
                /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
                is_customized?: boolean;
              };
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        content: {
          'application/json': components['schemas']['error_Base'];
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** The `Category` was in conflict with another category. This is the result of duplicate unique values, such as `name` or `custom_url`. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** The `Category` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description Unique ID of the *Category*. Increments sequentially.
           * Read-Only.
           */
          id?: number;
          /**
           * @description The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.
           * Required in a POST if creating a child category.
           * @example 2
           */
          parent_id: number;
          /**
           * @description The name displayed for the category. Name is unique with respect to the category's siblings.
           * Required in a POST.
           * @example Bath
           */
          name: string;
          /**
           * @description The product description, which can include HTML formatting.
           *
           * @example <p>We offer a wide variety of products perfect for relaxing</p>
           */
          description?: string;
          /**
           * @description Number of views the category has on the storefront.
           *
           * @example 1050
           */
          views?: number;
          /**
           * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
           *
           * @example 3
           */
          sort_order?: number;
          /**
           * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
           *
           * @example Bath
           */
          page_title?: string;
          /** @description A comma-separated list of keywords that can be used to locate the category when searching the store. */
          search_keywords?: string;
          /** @description Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
          meta_keywords?: string[];
          /** @description Custom meta description for the category page. If not defined, the store's default meta description will be used. */
          meta_description?: string;
          /**
           * @description A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied.
           *
           * @example category.html
           */
          layout_file?: string;
          /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
          is_visible?: boolean;
          /** @description Determines how the products are sorted on category page load. */
          default_product_sort?:
            | 'use_store_settings'
            | 'featured'
            | 'newest'
            | 'best_selling'
            | 'alpha_asc'
            | 'alpha_desc'
            | 'avg_customer_review'
            | 'price_asc'
            | 'price_desc';
          /**
           * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field.
           *
           * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
           */
          image_url?: string;
          /**
           * Custom Url Category
           * @description The custom URL for the category on the storefront.
           */
          custom_url?: {
            /**
             * @description Category URL on the storefront.
             *
             * @example /shoes
             */
            url?: string;
            /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
            is_customized?: boolean;
          };
        };
      };
    };
  };
  /** Deletes a *Category*. */
  deleteCategoryById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Category` to which the resource belongs. */
        category_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of *Metafields* on a *Category*. Optional filter parameters can be passed in. */
  getCategoryMetafieldsByCategoryId: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Category` to which the resource belongs. */
        category_id: number;
      };
      query: {
        /** Filter items by id. */
        id?: number;
        'id:in'?: number[];
        'id:not_in'?: number[];
        'id:min'?: number[];
        'id:max'?: number[];
        'id:greater'?: number[];
        'id:less'?: number[];
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Filter based on a metafield's key. */
        key?: string;
        /** Filter based on a metafield's namespace. */
        namespace?: string;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['metafield_Full'][];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Creates a *Category Metafield*.
   *
   * **Required Fields:**
   * - permission_set
   * - namespace
   * - key
   * - value
   *
   * **Read-Only Fields**
   * - id
   *
   * **Note:** The max number of metafields allowed on each product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  createCategoryMetafield: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Category` to which the resource belongs. */
        category_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Metafield
             * @description Common Metafield properties.
             */
            data?: {
              /**
               * Format: date-time
               * @description Date and time of the metafield's creation. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date and time when the metafield was last updated. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_modified?: string;
              /**
               * @description Description for the metafields.
               *
               * @example Location in the warehouse
               */
              description?: string;
              /**
               * @description Unique ID of the *Metafield*. Read-Only.
               * @example 6
               */
              id?: number;
              /**
               * @description The name of the field, for example: `location_id`, `color`. Required for POST.
               *
               * @example Location
               */
              key: string;
              /**
               * @description Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST.
               *
               * @example Warehouse Locations
               */
              namespace: string;
              /**
               * @description Determines the visibility and writeability of the field by other API consumers.
               *
               * |Value|Description
               * |-|-|
               * |`app_only`|Private to the app that owns the field|
               * |`read`|Visible to other API consumers|
               * |`write`|Open for reading and writing by other API consumers|
               * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
               * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
               */
              permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
              /**
               * @description The ID for the resource with which the metafield is associated.
               *
               * @example 111
               */
              resource_id?: number;
              /**
               * @description The type of resource with which the metafield is associated.
               *
               * @example product
               */
              resource_type?: 'category' | 'brand' | 'product' | 'variant';
              /**
               * @description The value of the field, for example: `1`, `blue`. Required for POST.
               *
               * @example 4HG
               */
              value: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate, unique key combinations of the app's client id, namespace, key, resource_type, and resource_id. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['metafield_Post'];
      };
    };
  };
  /** Returns a single *Category Metafield*. Optional parameters can be passed in. */
  getCategoryMetafieldByCategoryId: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Category` to which the resource belongs. */
        category_id: number;
        /** The ID of the `Metafield`. */
        metafield_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Metafield
             * @description Common Metafield properties.
             */
            data?: {
              /**
               * Format: date-time
               * @description Date and time of the metafield's creation. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date and time when the metafield was last updated. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_modified?: string;
              /**
               * @description Description for the metafields.
               *
               * @example Location in the warehouse
               */
              description?: string;
              /**
               * @description Unique ID of the *Metafield*. Read-Only.
               * @example 6
               */
              id?: number;
              /**
               * @description The name of the field, for example: `location_id`, `color`. Required for POST.
               *
               * @example Location
               */
              key: string;
              /**
               * @description Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST.
               *
               * @example Warehouse Locations
               */
              namespace: string;
              /**
               * @description Determines the visibility and writeability of the field by other API consumers.
               *
               * |Value|Description
               * |-|-|
               * |`app_only`|Private to the app that owns the field|
               * |`read`|Visible to other API consumers|
               * |`write`|Open for reading and writing by other API consumers|
               * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
               * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
               */
              permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
              /**
               * @description The ID for the resource with which the metafield is associated.
               *
               * @example 111
               */
              resource_id?: number;
              /**
               * @description The type of resource with which the metafield is associated.
               *
               * @example product
               */
              resource_type?: 'category' | 'brand' | 'product' | 'variant';
              /**
               * @description The value of the field, for example: `1`, `blue`. Required for POST.
               *
               * @example 4HG
               */
              value: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Category Metafield*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   * * These fields can only be modified by the app (API credentials) that created the metafield:
   * 	* namespace
   * 	* key
   * 	* permission_set
   *
   * **Usage Notes**
   * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
   */
  updateCategoryMetafield: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Category` to which the resource belongs. */
        category_id: number;
        /** The ID of the `Metafield`. */
        metafield_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Metafield
             * @description Common Metafield properties.
             */
            data?: {
              /**
               * Format: date-time
               * @description Date and time of the metafield's creation. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date and time when the metafield was last updated. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_modified?: string;
              /**
               * @description Description for the metafields.
               *
               * @example Location in the warehouse
               */
              description?: string;
              /**
               * @description Unique ID of the *Metafield*. Read-Only.
               * @example 6
               */
              id?: number;
              /**
               * @description The name of the field, for example: `location_id`, `color`. Required for POST.
               *
               * @example Location
               */
              key: string;
              /**
               * @description Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST.
               *
               * @example Warehouse Locations
               */
              namespace: string;
              /**
               * @description Determines the visibility and writeability of the field by other API consumers.
               *
               * |Value|Description
               * |-|-|
               * |`app_only`|Private to the app that owns the field|
               * |`read`|Visible to other API consumers|
               * |`write`|Open for reading and writing by other API consumers|
               * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
               * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
               */
              permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
              /**
               * @description The ID for the resource with which the metafield is associated.
               *
               * @example 111
               */
              resource_id?: number;
              /**
               * @description The type of resource with which the metafield is associated.
               *
               * @example product
               */
              resource_type?: 'category' | 'brand' | 'product' | 'variant';
              /**
               * @description The value of the field, for example: `1`, `blue`. Required for POST.
               *
               * @example 4HG
               */
              value: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['metafield_Put'];
      };
    };
  };
  /** Deletes a *Category Metafield*. */
  deleteCategoryMetafieldById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Category` to which the resource belongs. */
        category_id: number;
        /** The ID of the `Metafield`. */
        metafield_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /**
   * Create a *Category Image*.
   *
   *  **Required Fields**
   * - image_file: Form posts are the only accepted upload option.
   *
   * Only one image at a time can be created.
   * Limit image size to 1MB.
   * To update a *Category Image*, use the [PUT Categories](/api-reference/catalog/catalog-api/category/updatecategory) and an `image_url`.
   */
  createCategoryImage: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Category` to which the resource belongs. */
        category_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: {
              image_url?: string;
            };
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
      400: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** Image was not valid. This is the result of a missing `image_file` field or an incorrect file type. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          image_file?: string;
        };
      };
    };
  };
  /** Deletes a *Cateogory Image*. */
  deleteCategoryImage: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Category` to which the resource belongs. */
        category_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of *Brands*. Optional filter parameters can be passed in. */
  getBrands: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** Filter items by id. */
        id?: number;
        'id:in'?: number[];
        'id:not_in'?: number[];
        'id:min'?: number[];
        'id:max'?: number[];
        'id:greater'?: number[];
        'id:less'?: number[];
        /** Filter items by name. */
        name?: string;
        /** Filter items by page_title. */
        page_title?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['brand_Full'][];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
    };
  };
  /**
   * Creates a *Brand*.
   *
   * **Required Fields**
   * - name
   *
   * **Read-Only Fields**
   * - id
   *
   * **Limits**
   * - 30,000 brands per store limit
   */
  createBrand: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Brand
             * @description Common Brand properties.
             */
            data?: {
              /** @description Unique ID of the *Brand*. Read-Only. */
              id?: number;
              /**
               * @description The name of the brand. Must be unique.
               * Required in POST.
               * @example Common Good
               */
              name?: string;
              /**
               * @description The title shown in the browser while viewing the brand.
               *
               * @example Common Good
               */
              page_title?: string;
              /** @description Comma-separated list of meta keywords to include in the HTML. */
              meta_keywords?: string[];
              /**
               * @description A meta description to include.
               *
               * @example Common Good is a modern brand.
               */
              meta_description?: string;
              /**
               * @description A comma-separated list of keywords that can be used to locate this brand.
               *
               * @example kitchen, laundry, cart, storage
               */
              search_keywords?: string;
              /**
               * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
               *
               * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
               */
              image_url?: string;
              /**
               * Custom Url Brand
               * @description The custom URL for the brand on the storefront.
               */
              custom_url?: {
                /**
                 * @description Brand URL on the storefront.
                 *
                 * @example /shoes
                 */
                url?: string;
                /**
                 * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                 *
                 * @example true
                 */
                is_customized?: boolean;
              };
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        content: {
          'application/json': components['schemas']['error_Base'];
        };
      };
      /** Brand was in conflict with another brand. This is the result of duplicate unique fields such as name. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** Brand was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description Unique ID of the *Brand*. Read-Only. */
          id?: number;
          /**
           * @description The name of the brand. Must be unique.
           * Required in POST.
           * @example Common Good
           */
          name: string;
          /**
           * @description The title shown in the browser while viewing the brand.
           *
           * @example Common Good
           */
          page_title?: string;
          /** @description Comma-separated list of meta keywords to include in the HTML. */
          meta_keywords?: string[];
          /**
           * @description A meta description to include.
           *
           * @example Common Good is a modern brand.
           */
          meta_description?: string;
          /**
           * @description A comma-separated list of keywords that can be used to locate this brand.
           *
           * @example kitchen, laundry, cart, storage
           */
          search_keywords?: string;
          /**
           * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
           *
           * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
           */
          image_url?: string;
          /**
           * Custom Url Brand
           * @description The custom URL for the brand on the storefront.
           */
          custom_url?: {
            /**
             * @description Brand URL on the storefront.
             *
             * @example /shoes
             */
            url?: string;
            /**
             * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
             *
             * @example true
             */
            is_customized?: boolean;
          };
        };
      };
    };
  };
  /** By default, it deletes all *Brand* objects. A filter should be added to avoid deleting all *Brand* objects in a store. */
  deleteBrands: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** Filter items by name. */
        name?: string;
        /** Filter items by page_title. */
        page_title?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a single *Brand*. Optional filter parameters can be passed in. */
  getBrandById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Brand` to which the resource belongs. */
        brand_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        'Content-Type': string;
        Accept: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['brand_Full'];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Brand*.
   *
   * **Required Fields**
   * - None
   *
   * **Read-Only Fields**
   * - id
   *
   * To update a *Brand Image*, send a request with an `image_url`.
   */
  updateBrand: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Brand` to which the resource belongs. */
        brand_id: number;
      };
      header: {
        'Content-Type': string;
        Accept: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Brand
             * @description Common Brand properties.
             */
            data?: {
              /** @description Unique ID of the *Brand*. Read-Only. */
              id?: number;
              /**
               * @description The name of the brand. Must be unique.
               * Required in POST.
               * @example Common Good
               */
              name: string;
              /**
               * @description The title shown in the browser while viewing the brand.
               *
               * @example Common Good
               */
              page_title?: string;
              /**
               * @description Comma-separated list of meta keywords to include in the HTML.
               *
               * @example modern, clean, contemporary
               */
              meta_keywords?: string[];
              /**
               * @description A meta description to include.
               *
               * @example Common Good is a modern brand.
               */
              meta_description?: string;
              /**
               * @description A comma-separated list of keywords that can be used to locate this brand.
               *
               * @example kitchen, laundry, cart, storage
               */
              search_keywords?: string;
              /**
               * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
               *
               * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
               */
              image_url?: string;
              /**
               * Custom Url Brand
               * @description The custom URL for the brand on the storefront.
               */
              custom_url?: {
                /**
                 * @description Brand URL on the storefront.
                 *
                 * @example /shoes
                 */
                url?: string;
                /**
                 * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                 *
                 * @example true
                 */
                is_customized?: boolean;
              };
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        content: {
          'application/json': components['schemas']['error_Base'];
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** The `Brand` was in conflict with another product. This is the result of duplicate unique values, such as `name`. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** The `Brand` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description Unique ID of the *Brand*. Read-Only. */
          id?: number;
          /**
           * @description The name of the brand. Must be unique.
           * Required in POST.
           * @example Common Good
           */
          name: string;
          /**
           * @description The title shown in the browser while viewing the brand.
           *
           * @example Common Good
           */
          page_title?: string;
          /**
           * @description Comma-separated list of meta keywords to include in the HTML.
           *
           * @example modern, clean, contemporary
           */
          meta_keywords?: string[];
          /**
           * @description A meta description to include.
           *
           * @example Common Good is a modern brand.
           */
          meta_description?: string;
          /**
           * @description A comma-separated list of keywords that can be used to locate this brand.
           *
           * @example kitchen, laundry, cart, storage
           */
          search_keywords?: string;
          /**
           * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
           *
           * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
           */
          image_url?: string;
          /**
           * Custom Url Brand
           * @description The custom URL for the brand on the storefront.
           */
          custom_url?: {
            /**
             * @description Brand URL on the storefront.
             *
             * @example /shoes
             */
            url?: string;
            /**
             * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
             *
             * @example true
             */
            is_customized?: boolean;
          };
        };
      };
    };
  };
  /** Deletes a *Brand*. */
  deleteBrandById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Brand` to which the resource belongs. */
        brand_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of *Brand Metafields*. Optional filter parameters can be passed in. */
  getBrandMetafieldsByBrandId: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Brand` to which the resource belongs. */
        brand_id: number;
      };
      query: {
        /** Filter items by id. */
        id?: number;
        'id:in'?: number[];
        'id:not_in'?: number[];
        'id:min'?: number[];
        'id:max'?: number[];
        'id:greater'?: number[];
        'id:less'?: number[];
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Filter based on a metafield's key. */
        key?: string;
        /** Filter based on a metafield's namespace. */
        namespace?: string;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        'Content-Type': string;
        Accept: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['metafield_Full'][];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Creates a *Brand Metafield*.
   *
   * **Required Fields**
   * - permission_set
   * - namespace
   * - key
   * - value
   *
   * **Read-Only Fields**
   * - id
   *
   * **Note:** The max number of metafields allowed on each product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  createBrandMetafield: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Brand` to which the resource belongs. */
        brand_id: number;
      };
      header: {
        'Content-Type': string;
        Accept: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Metafield
             * @description Common Metafield properties.
             */
            data?: {
              /**
               * Format: date-time
               * @description Date and time of the metafield's creation. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date and time when the metafield was last updated. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_modified?: string;
              /**
               * @description Description for the metafields.
               *
               * @example Location in the warehouse
               */
              description?: string;
              /**
               * @description Unique ID of the *Metafield*. Read-Only.
               * @example 6
               */
              id?: number;
              /**
               * @description The name of the field, for example: `location_id`, `color`. Required for POST.
               *
               * @example Location
               */
              key: string;
              /**
               * @description Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST.
               *
               * @example Warehouse Locations
               */
              namespace: string;
              /**
               * @description Determines the visibility and writeability of the field by other API consumers.
               *
               * |Value|Description
               * |-|-|
               * |`app_only`|Private to the app that owns the field|
               * |`read`|Visible to other API consumers|
               * |`write`|Open for reading and writing by other API consumers|
               * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
               * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
               */
              permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
              /**
               * @description The ID for the resource with which the metafield is associated.
               *
               * @example 111
               */
              resource_id?: number;
              /**
               * @description The type of resource with which the metafield is associated.
               *
               * @example product
               */
              resource_type?: 'category' | 'brand' | 'product' | 'variant';
              /**
               * @description The value of the field, for example: `1`, `blue`. Required for POST.
               *
               * @example 4HG
               */
              value: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combination of the app's client id, namespace, key, resource_type, and resource_id. */
      409: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['metafield_Post'];
      };
    };
  };
  /** Returns a *Brand Metafield*. Optional filter parameters can be passed in. */
  getBrandMetafieldByBrandId: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Brand` to which the resource belongs. */
        brand_id: number;
        /** The ID of the `Metafield`. */
        metafield_id: number;
      };
      query: {
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Metafield
             * @description Common Metafield properties.
             */
            data?: {
              /**
               * Format: date-time
               * @description Date and time of the metafield's creation. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date and time when the metafield was last updated. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_modified?: string;
              /**
               * @description Description for the metafields.
               *
               * @example Location in the warehouse
               */
              description?: string;
              /**
               * @description Unique ID of the *Metafield*. Read-Only.
               * @example 6
               */
              id?: number;
              /**
               * @description The name of the field, for example: `location_id`, `color`. Required for POST.
               *
               * @example Location
               */
              key: string;
              /**
               * @description Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST.
               *
               * @example Warehouse Locations
               */
              namespace: string;
              /**
               * @description Determines the visibility and writeability of the field by other API consumers.
               *
               * |Value|Description
               * |-|-|
               * |`app_only`|Private to the app that owns the field|
               * |`read`|Visible to other API consumers|
               * |`write`|Open for reading and writing by other API consumers|
               * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
               * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
               */
              permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
              /**
               * @description The ID for the resource with which the metafield is associated.
               *
               * @example 111
               */
              resource_id?: number;
              /**
               * @description The type of resource with which the metafield is associated.
               *
               * @example product
               */
              resource_type?: 'category' | 'brand' | 'product' | 'variant';
              /**
               * @description The value of the field, for example: `1`, `blue`. Required for POST.
               *
               * @example 4HG
               */
              value: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Updates a *Brand Metafield*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   * * These fields can only be modified by the app (API credentials) that created the metafield:
   * 	* namespace
   * 	* key
   * 	* permission_set
   *
   * **Usage Notes**
   * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
   * * The max number of metafields allowed on each product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  updateBrandMetafield: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Brand` to which the resource belongs. */
        brand_id: number;
        /** The ID of the `Metafield`. */
        metafield_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Metafield
             * @description Common Metafield properties.
             */
            data?: {
              /**
               * Format: date-time
               * @description Date and time of the metafield's creation. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date and time when the metafield was last updated. Read-Only.
               *
               * @example 2018-05-07T20:14:17.000Z
               */
              date_modified?: string;
              /**
               * @description Description for the metafields.
               *
               * @example Location in the warehouse
               */
              description?: string;
              /**
               * @description Unique ID of the *Metafield*. Read-Only.
               * @example 6
               */
              id?: number;
              /**
               * @description The name of the field, for example: `location_id`, `color`. Required for POST.
               *
               * @example Location
               */
              key: string;
              /**
               * @description Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for POST.
               *
               * @example Warehouse Locations
               */
              namespace: string;
              /**
               * @description Determines the visibility and writeability of the field by other API consumers.
               *
               * |Value|Description
               * |-|-|
               * |`app_only`|Private to the app that owns the field|
               * |`read`|Visible to other API consumers|
               * |`write`|Open for reading and writing by other API consumers|
               * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
               * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
               */
              permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
              /**
               * @description The ID for the resource with which the metafield is associated.
               *
               * @example 111
               */
              resource_id?: number;
              /**
               * @description The type of resource with which the metafield is associated.
               *
               * @example product
               */
              resource_type?: 'category' | 'brand' | 'product' | 'variant';
              /**
               * @description The value of the field, for example: `1`, `blue`. Required for POST.
               *
               * @example 4HG
               */
              value: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['metafield_Put'];
      };
    };
  };
  /** Deletes a *Brand Metafield*. */
  deleteBrandMetafieldById: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Brand` to which the resource belongs. */
        brand_id: number;
        /** The ID of the `Metafield`. */
        metafield_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /**
   * Creates a *Brand Image*.
   *
   * **Required Fields**
   * - image_file: Form posts are the only accepted upload option.
   *
   * **Read-Only Fields**
   * - id
   *
   * Only one image at a time can be created. To update a *Brand Image*, use the [PUT Brands](/api-reference/catalog/catalog-api/brands/updatebrand) and an `image_url`.
   */
  createBrandImage: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Brand` to which the resource belongs. */
        brand_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: {
              image_url?: string;
            };
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
      400: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** Image was not valid. This is the result of a missing `image_file` field, or of an incorrect file type. See the response for more details. */
      422: {
        content: {
          'application/json': {
            /** Detailed Errors */
            errors?: {
              additionalProperties?: string;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          image_file?: string;
        };
      };
    };
  };
  /** Deletes a *Brand Image*. */
  deleteBrandImage: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Brand` to which the resource belongs. */
        brand_id: number;
      };
      header: {
        'Content-Type': string;
        Accept: string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of all variants in your catalog. Optional parameters can be passed in. */
  getVariants: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** Filter items by id. */
        id?: number;
        /** Filter items by sku. */
        sku?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** A comma-separated list of IDs of products whose variants were requested. For example:`?product_id=:id``?product_id:in=77,80,81` */
        product_id?: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: ({
              /**
               * Format: double
               * @description The cost price of the variant. Not affected by Price List prices.
               */
              cost_price?: number;
              /**
               * Format: double
               * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
               */
              price?: number;
              /**
               * Format: double
               * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
               */
              sale_price?: number;
              /**
               * Format: double
               * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
               */
              retail_price?: number;
              /**
               * Format: double
               * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
               */
              weight?: number;
              /**
               * Format: double
               * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.
               */
              width?: number;
              /**
               * Format: double
               * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.
               */
              height?: number;
              /**
               * Format: double
               * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.
               */
              depth?: number;
              /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
              is_free_shipping?: boolean;
              /**
               * Format: double
               * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
               */
              fixed_cost_shipping_price?: number;
              /** @description If `true`, this variant will not be purchasable on the storefront. */
              purchasing_disabled?: boolean;
              /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
              purchasing_disabled_message?: string;
              /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
              upc?: string;
              /** @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. */
              inventory_level?: number;
              /** @description When the variant hits this inventory level, it is considered low stock. */
              inventory_warning_level?: number;
              /** @description Identifies where in a warehouse the variant is located. */
              bin_picking_number?: string;
            } & {
              id?: number;
              product_id?: number;
              sku?: string;
              /** @description Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
              sku_id?: number;
              /** @description Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
              option_values?: ({
                /**
                 * @description The name of the option.
                 *
                 * @example Color
                 */
                option_display_name?: string;
                /**
                 * @description The label of the option value.
                 *
                 * @example Beige
                 */
                label?: string;
              } & {
                id?: number;
                option_id?: number;
              })[];
              /**
               * Format: double
               * @description The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.
               */
              calculated_price?: number;
            })[];
            meta?: components['schemas']['metaCollection_Full'];
          };
        };
      };
      /** The resource was not found. */
      404: {
        content: {
          'application/json': {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /** Updates a batch of `variant` objects. At the time of writing, the limit is 50 variants. This limit is subject to change. */
  updateVariantsBatch: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: ({
              /**
               * Format: double
               * @description The cost price of the variant. Not affected by Price List prices.
               */
              cost_price?: number;
              /**
               * Format: double
               * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
               */
              price?: number;
              /**
               * Format: double
               * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
               */
              sale_price?: number;
              /**
               * Format: double
               * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
               */
              retail_price?: number;
              /**
               * Format: double
               * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
               */
              weight?: number;
              /**
               * Format: double
               * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.
               */
              width?: number;
              /**
               * Format: double
               * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.
               */
              height?: number;
              /**
               * Format: double
               * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.
               */
              depth?: number;
              /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
              is_free_shipping?: boolean;
              /**
               * Format: double
               * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
               */
              fixed_cost_shipping_price?: number;
              /** @description If `true`, this variant will not be purchasable on the storefront. */
              purchasing_disabled?: boolean;
              /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
              purchasing_disabled_message?: string;
              /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
              upc?: string;
              /** @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. */
              inventory_level?: number;
              /** @description When the variant hits this inventory level, it is considered low stock. */
              inventory_warning_level?: number;
              /** @description Identifies where in a warehouse the variant is located. */
              bin_picking_number?: string;
            } & {
              id?: number;
              product_id?: number;
              sku?: string;
              /** @description Read-only reference to v2 API's SKU ID. Null if it is a base variant. */
              sku_id?: number;
              /** @description Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
              option_values?: ({
                /**
                 * @description The name of the option.
                 *
                 * @example Color
                 */
                option_display_name?: string;
                /**
                 * @description The label of the option value.
                 *
                 * @example Beige
                 */
                label?: string;
              } & {
                id?: number;
                option_id?: number;
              })[];
              /**
               * Format: double
               * @description The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.
               */
              calculated_price?: number;
            })[];
            /**
             * Collection Meta
             * @description Data about the response, including pagination and collection totals.
             */
            meta?: {
              /**
               * Pagination
               * @description Data about the response, including pagination and collection totals.
               */
              pagination?: {
                /**
                 * @description Total number of items in the result set.
                 *
                 * @example 36
                 */
                total?: number;
                /**
                 * @description Total number of items in the collection response.
                 *
                 * @example 36
                 */
                count?: number;
                /**
                 * @description The amount of items returned in the collection per page, controlled by the limit parameter.
                 *
                 * @example 50
                 */
                per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 *
                 * @example 1
                 */
                current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 *
                 * @example 1
                 */
                total_pages?: number;
                /** @description Pagination links for the previous and next parts of the whole collection. */
                links?: {
                  /** @description Link to the previous page returned in the response. */
                  previous?: string;
                  /**
                   * @description Link to the current page returned in the response.
                   *
                   * @example ?page=1&limit=50
                   */
                  current?: string;
                  /** @description Link to the next page returned in the response. */
                  next?: string;
                };
              };
            };
          };
        };
      };
      413: {
        content: {
          'application/json': unknown;
        };
      };
      /** This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': {
            batch_errors?: ({
              /** @description The HTTP status code. */
              status?: number;
              /** @description The error title describing the particular error. */
              title?: string;
              type?: string;
              instance?: string;
            } & {
              /** Detailed Errors */
              errors?: {
                additionalProperties?: string;
              };
            })[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': ({
          /**
           * Format: double
           * @description The cost price of the variant. Not affected by Price List prices.
           */
          cost_price?: number;
          /**
           * Format: double
           * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
           */
          price?: number;
          /**
           * Format: double
           * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
           */
          sale_price?: number;
          /**
           * Format: double
           * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
           */
          retail_price?: number;
          /**
           * Format: double
           * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
           */
          weight?: number;
          /**
           * Format: double
           * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.
           */
          width?: number;
          /**
           * Format: double
           * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.
           */
          height?: number;
          /**
           * Format: double
           * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.
           */
          depth?: number;
          /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
          is_free_shipping?: boolean;
          /**
           * Format: double
           * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
           */
          fixed_cost_shipping_price?: number;
          /** @description If `true`, this variant will not be purchasable on the storefront. */
          purchasing_disabled?: boolean;
          /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
          purchasing_disabled_message?: string;
          /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
          upc?: string;
          /** @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. */
          inventory_level?: number;
          /** @description When the variant hits this inventory level, it is considered low stock. */
          inventory_warning_level?: number;
          /** @description Identifies where in a warehouse the variant is located. */
          bin_picking_number?: string;
        } & {
          id?: number;
        })[];
      };
    };
  };
  /**
   * Returns a lightweight inventory summary from the BigCommerce Catalog.
   *
   * The inventory summary includes:
   * * "inventory_count"
   * * "variant_count"
   * * "inventory_value"
   * * "highest_variant_price"
   * * "average_variant_price"
   * * "lowest_variant_price"
   * * "oldest_variant_date"
   * * "newest_variant_date"
   * * "primary_category_id"
   * * "primary_category_name"
   */
  getCatalogSummary: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            /**
             * Catalog Summary
             * @description Catalog Summary object describes a lightweight summary of the catalog.
             */
            data?: {
              /**
               * @description A count of all inventory items in the catalog.
               *
               * @example 2000
               */
              inventory_count?: number;
              /**
               * Format: double
               * @description Total value of store's inventory.
               *
               * @example 267000
               */
              inventory_value?: number;
              /**
               * @description ID of the category containing the most products.
               *
               * @example 23
               */
              primary_category_id?: number;
              /**
               * @description Name of the category containing the most products.
               *
               * @example Shop All
               */
              primary_category_name?: string;
              /**
               * @description Total number of variants
               * @example 46
               */
              variant_count?: number;
              /**
               * Format: double
               * @description Highest priced variant
               * @example 249
               */
              highest_variant_price?: number;
              /**
               * Format: double
               * @description Average price of all variants
               * @example 83.07978261
               */
              average_variant_price?: number;
              /**
               * @description Lowest priced variant in the store
               * @example 7
               */
              lowest_variant_price?: string;
              /** @example 2018-08-15T00:00:00.000Z */
              oldest_variant_date?: string;
              /** @example 2018-08-16T00:00:00.000Z */
              newest_variant_date?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: { [key: string]: unknown };
          };
        };
      };
    };
  };
  /**
   * Returns a list of products and their sort order for a specific category.
   *
   * **Usage Notes**
   * * Data pairs are displayed in ascending order based on products' `sort_order` values.
   * * `null` values are allowed for products without specified `sort_order` values.
   * * Products with `sort_order` value of `null` will be displayed after products with valid numerical values.
   * * The priorities for determining product sort order on a storefront are the following:
   *   - Priority 1: Manually specified sort order on Category Level (API).
   *   - Priority 2: Manually specified sort order on Product (Global) Level (UI/API).
   *   - Priority 3: Default sorting by Product ID (newly added products go first) (UI/API).
   */
  getsortorders: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Category` to which the resource belongs. */
        category_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
      /** The requested category was not found. */
      404: {
        content: {
          'application/json': components['schemas']['error_Base'];
        };
      };
    };
  };
  /** Updates sort order of products within a specific category. */
  updatesortorder: {
    parameters: {
      path: {
        store_hash: string;
        /** The ID of the `Category` to which the resource belongs. */
        category_id: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['productSortOrder'][];
        };
      };
      /** The requested category was not found. */
      404: {
        content: {
          'application/json': components['schemas']['error_Base'];
        };
      };
      /**
       * Unprocessable entity.
       *
       * Please verify if all requested products are assigned to the category.
       *
       * Please verify if all required fields are present in the request body and are filled with values correctly.
       */
      422: {
        content: {
          'application/json': components['schemas']['error_Base'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['productSortOrder'][];
      };
    };
  };
  /**
   * Returns a list of categories.
   *
   * To get a specific category in a tree, provide a category id.
   */
  getAllCategories: {
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
      query: {
        'category_uuid:in'?: string;
        'category_uuid:not_in'?: string;
        'category_id:in'?: string;
        'category_id:not_in'?: string;
        'tree_id:in'?: string;
        'tree_id:not_in'?: string;
        'parent_id:in'?: string;
        'parent_id:not_in'?: string;
        name?: string;
        'name:like'?: string;
        page_title?: string;
        'page_title:like'?: string;
        keyword?: string;
        is_visible?: boolean;
        page?: number;
        limit?: number;
        include_fields?: string;
        exclude_fields?: string;
      };
    };
    responses: {
      /** List of categories. */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Category'][];
            meta?: components['schemas']['MetaPagination'];
          };
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorRequest'];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorRequest'];
        };
      };
    };
  };
  /**
   * Updates existing categories.
   *
   *  To update a specific category in a tree, provide a category id.
   */
  updateCategories: {
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
    };
    responses: {
      /** No Content */
      204: {
        content: {
          'application/json': components['schemas']['SuccessNoContentResponse'];
        };
      };
      /** Partical success */
      207: {
        content: {
          'application/json': components['schemas']['PartialSuccessNoContentResponse'];
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorRequest'];
        };
      };
      /** The Category was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorRequest'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCategories'];
      };
    };
  };
  /**
   * Creates new categories.
   *
   *  `tree_id` or `parent_id` are required to create a category.
   */
  createCategories: {
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['SuccessResponse'];
        };
      };
      /** Multi-Status */
      207: {
        content: {
          'application/json': components['schemas']['PartialSuccessResponse'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorRequest'];
        };
      };
      /** The Category was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorRequest'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCategories'];
      };
    };
  };
  /**
   * Deletes categories.
   *
   * To delete a specific category in a tree, provide a category id.
   */
  deleteTreeCategories: {
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
      query: {
        'category_uuid:in'?: string;
        'category_id:in'?: string;
        'tree_id:in'?: string;
        'parent_id:in'?: string;
      };
    };
    responses: {
      /** Categories are deleted */
      204: {
        content: {
          'application/json': components['schemas']['SuccessNoContentResponse'];
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorRequest'];
        };
      };
      /** Server error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorRequest'];
        };
      };
    };
  };
  /** Returns a list of *Category Trees*. */
  GetCategoryTrees: {
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
      query: {
        'id:in'?: string;
        'channel_id:in'?: string;
      };
    };
    responses: {
      /** List of category trees. */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Tree'][];
            meta?: components['schemas']['MetaPaginationObject'];
          };
        };
      };
    };
  };
  /**
   * Upserts *Category Trees*.
   *
   * If a tree object contains an ID, it is processed as an update operation using that ID. If no ID is provided, a new tree is created.
   *
   * **Usage Notes**
   * * `channel_id` is required to create a *Category Tree*.
   */
  UpsertCategoryTrees: {
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
    };
    responses: {
      /** Created a category tree. */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Tree'];
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The Channel was not valid. See the response for more details. */
      422: {
        content: {
          'application/json': components['schemas']['beta4ErrorResponse'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Tree'][];
      };
    };
  };
  /** Deletes *Category Trees*. A filter must be supplied with the endpoint. */
  DeleteCategoryTrees: {
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
      query: {
        'id:in'?: string;
      };
    };
    responses: {
      /** Deleted */
      204: never;
    };
  };
  /** Returns a *Category Tree*. */
  GetCategoryTreeByTreeId: {
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
        tree_id: number;
      };
      query: {
        /** Max depth for a tree of categories. */
        depth?: number;
      };
    };
    responses: {
      /** Categories tree */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['CategoryNode'][];
            meta?: { [key: string]: unknown };
          };
        };
      };
      /** The tree was not found. */
      404: {
        content: {
          'application/json': components['schemas']['beta4ErrorResponse'];
        };
      };
    };
  };
  /** Returns a list of products channel assignments. */
  GetProductsChannelAssignments: {
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
      query: {
        page?: number;
        limit?: number;
        'product_id:in'?: string;
        'channel_id:in'?: string;
      };
    };
    responses: {
      /** Collection of channel assignments. */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['ProductChannelAssignment'][];
            meta?: components['schemas']['MetaPaginationObject'];
          };
        };
      };
    };
  };
  /** Creates products channel assignments. */
  CreateProductsChannelAssignments: {
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
    };
    responses: {
      /** Updated */
      204: never;
      /** Error response for batch PUT of Channel Assignments. Includes the errors for each reference id. */
      422: {
        content: {
          'application/json': components['schemas']['beta5ErrorResponse'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProductChannelAssignment'][];
      };
    };
  };
  /** Delete products channel assignments. A filter must be supplied. */
  DeleteProductsChannelAssignments: {
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
      query: {
        'product_id:in'?: string;
        'channel_id:in'?: string;
      };
    };
    responses: {
      /** Deleted */
      204: never;
      /** At least one filter must be provided in order to delete channel assignments */
      422: {
        content: {
          'application/json': components['schemas']['beta5ErrorResponse'];
        };
      };
    };
  };
  /** Returns a list of products category assignments. */
  GetProductsCategoryAssignments: {
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
      query: {
        page?: number;
        limit?: number;
        'product_id:in'?: string;
        'category_id:in'?: string;
      };
    };
    responses: {
      /** Collection of category assignments. */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['ProductCategoryAssignment'][];
            meta?: components['schemas']['MetaPaginationObject'];
          };
        };
      };
    };
  };
  /** Creates products category assignments. */
  CreateProductsCategoryAssignments: {
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
    };
    responses: {
      /** Updated */
      204: never;
      /** Error response for batch PUT of Category Assignments. Includes the errors for each reference id. */
      422: {
        content: {
          'application/json': components['schemas']['beta5ErrorResponse'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProductCategoryAssignment'][];
      };
    };
  };
  /** Deletes products category assignments. A filter must be supplied. */
  DeleteProductsCategoryAssignments: {
    parameters: {
      path: {
        store_hash: components['parameters']['StoreHashParam'];
      };
      query: {
        'product_id:in'?: string;
        'category_id:in'?: string;
      };
    };
    responses: {
      /** Deleted */
      204: never;
      /** At least one filter must be provided in order to delete category assignments */
      422: {
        content: {
          'application/json': components['schemas']['beta5ErrorResponse'];
        };
      };
    };
  };
}

export interface external {
  'https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml': {
    paths: {
      '/users/{userId}': {
        /** Retrieve the information of the user with the matching user ID. */
        get: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['operations']['get-users-userId'];
        /** Update the information of an existing user. */
        patch: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['operations']['patch-users-userId'];
        parameters: {
          path: {
            /** Id of an existing user. */
            userId: number;
          };
        };
      };
      '/user': {
        /** Create a new user. */
        post: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['operations']['post-user'];
      };
    };
    components: {
      schemas: {
        /** User */
        User: {
          /** @description Unique identifier for the given user. */
          id: number;
          firstName: string;
          lastName: string;
          /** Format: email */
          email: string;
          /**
           * Format: date
           * @example 1997-10-31
           */
          dateOfBirth?: string;
          /** @description Set to true if the user's email has been verified. */
          emailVerified: boolean;
          /**
           * Format: date
           * @description The date that the user was created.
           */
          createDate?: string;
        };
        /** meta_Empty */
        meta_Empty: {
          meta?: { [key: string]: unknown };
        };
      };
      parameters: {
        /** @description Hash of your store */
        store_hash: string;
      };
    };
    operations: {
      /** Retrieve the information of the user with the matching user ID. */
      'get-users-userId': {
        parameters: {
          path: {
            /** Id of an existing user. */
            userId: number;
          };
        };
        responses: {
          /** User Found */
          200: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['components']['schemas']['User'];
            };
          };
          /** User Not Found */
          404: unknown;
        };
      };
      /** Update the information of an existing user. */
      'patch-users-userId': {
        parameters: {
          path: {
            /** Id of an existing user. */
            userId: number;
          };
        };
        responses: {
          /** User Updated */
          200: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['components']['schemas']['User'];
            };
          };
          /** User Not Found */
          404: unknown;
          /** Email Already Taken */
          409: unknown;
        };
        /** Patch user properties to update. */
        requestBody: {
          content: {
            'application/json': {
              firstName?: string;
              lastName?: string;
              /** @description If a new email is given, the user's email verified property will be set to false. */
              email?: string;
              dateOfBirth?: string;
            };
          };
        };
      };
      /** Create a new user. */
      'post-user': {
        responses: {
          /** User Created */
          200: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['components']['schemas']['User'];
            };
          };
          /** Missing Required Information */
          400: unknown;
          /** Email Already Taken */
          409: unknown;
        };
        /** Post the necessary fields for the API to create a new user. */
        requestBody: {
          content: {
            'application/json': {
              firstName: string;
              lastName: string;
              email: string;
              /** Format: date */
              dateOfBirth: string;
            };
          };
        };
      };
    };
  };
  'https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml': {
    paths: {
      '/stores/{store_hash}/v3/settings/analytics': {
        /** Returns a list of web analytics providers. */
        get: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['AnalyticsProviders'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
        };
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/analytics/{id}': {
        /** Returns a single web analytics provider data for a default channel. */
        get: {
          parameters: {
            path: {
              /** Web Analytics Provider ID. */
              id: number;
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** Successful operation. */
            200: {
              content: {
                'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['AnalyticsProvider'];
              };
            };
            /** Bad request. Authentication Required. */
            400: {
              content: {
                'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ErrorResponse400'];
              };
            };
            /** The requested resource was not found. Please specify valid Web Analytics Provider ID. */
            404: {
              content: {
                'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ErrorResponse404'];
              };
            };
          };
        };
        /** Updates a single web analytics provider data for a default channel. */
        put: {
          parameters: {
            path: {
              /** Web Analytics Provider ID. */
              id: number;
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** Successful operation. */
            200: {
              content: {
                'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['AnalyticsProvider'];
              };
            };
            /** Bad request. Authentication Required. */
            400: {
              content: {
                'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ErrorResponse400'];
              };
            };
            /** The requested resource was not found. Please specify valid Web Analytics Provider ID. */
            404: {
              content: {
                'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ErrorResponse404'];
              };
            };
            /** Web Analytics Provider was in conflict with another Web Analytics Provider. This can be caused by duplicated unique values (such as ID). */
            409: {
              content: {
                'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ErrorResponse409'];
              };
            };
            /** Web Analytics Provider data was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
              content: {
                'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ErrorResponse422'];
              };
            };
          };
          requestBody: {
            content: {
              'application/json': {
                channel_id?: number;
                code?: string;
                data_tag_enabled?: boolean;
                enabled?: boolean;
                id?: number;
                is_oauth_connected?: unknown;
                name?: string;
                version?: number;
              };
            };
          };
        };
        parameters: {
          path: {
            id: number;
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/catalog': {
        /**
         * Returns catalog settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['CatalogSettings'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
        };
        /**
         * Updates catalog settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['CatalogSettings'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
          /** null set for a particular field removes override on a channel level and means inheritance from a global level */
          requestBody: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['CatalogSettings'];
            };
          };
        };
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/email-statuses': {
        /** Get global transactional email settings or channel specific overrides by `channel_id`. */
        get: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['operations']['get-settings-emails-enabled'];
        /** Update global transactional email settings or create channel specific overrides by `channel_id`. */
        put: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['operations']['put-settings-transactional-emails-enabled'];
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/favicon/image': {
        /**
         * Uploads an image file to use as the storefront favicon. Supported MIME types include GIF, JPEG, and PNG.
         *
         *   - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         */
        post: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['operations']['post-favicon-logo-image'];
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/inventory/notifications': {
        /**
         * Returns inventory notification settings.
         * * `channel_id` can be used as a query parameter to get inventory notification settings per channel. If omitted, you will interact with the global setting only.
         */
        get: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['InventoryNotificationsSettings'];
                } & external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['components']['schemas']['meta_Empty'];
              };
            };
          };
        };
        /**
         * Updates inventory notification settings.
         * * `channel_id` can be used as a query parameter to get inventory notification settings per channel. If omitted, you will interact with the global setting only.
         * * Supplying `null` settings values per channel will delete overrides per given channel and values will be inherited from global level.
         * * Partial updates are not supported within the given endpoint. In order to delete overrides per channel, `null` should be supplied for all the settings within the given endpoint.
         */
        put: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK */
            200: unknown;
          };
          /** null set for a particular field removes override on a channel level and means inheritance from a global level */
          requestBody: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['InventoryNotificationsSettings'];
            };
          };
        };
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/logo': {
        /**
         * Returns store logo settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['operations']['get-settings-logo'];
        /**
         * Updates the logo type and logo text for a textual logo. To upload new images, use the dedicated image POST endpoints.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['operations']['put-settings-logo'];
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/logo/image': {
        /**
         * Uploads an image file to use as the storefront logo. Supported MIME types include GIF, JPEG, and PNG.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         */
        post: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['operations']['post-settings-logo-image'];
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/search/filters': {
        /** Returns a list of enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. These filters will be used if a store does not have contextual overrides. */
        get: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['operations']['getEnabled'];
        /** Updates enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. */
        put: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['operations']['updateEnabled'];
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/search/filters/available': {
        /** Returns a list of filters available to power [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings). */
        get: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['operations']['getAvailable'];
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/search/filters/contexts': {
        /**
         * Returns a list of contextual filters enabled for a particular channel or category.
         *
         * **Usage Notes**
         *
         * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
         *
         * The order of the returned filters will match the sort order of the filters on the storefront.
         */
        get: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['operations']['getContexts'];
        /**
         * Upserts contextual filters for a particular channel or category.
         *
         * **Usage Notes**
         *
         * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
         *
         * You can change the order of the filters on the live site by changing the order of the filters you send.
         */
        put: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['operations']['upsertContexts'];
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/store/locale': {
        /** Returns global locale settings. */
        get: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
          };
          responses: {
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['Locale'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
        };
        /** Updates global locale settings. */
        put: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
          };
          responses: {
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['Locale'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
            /** Provided settings could not be applied for some reason - detailed errors in the response. */
            422: {
              content: {
                'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ErrorResponse'];
              };
            };
          };
          requestBody: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['Locale'];
            };
          };
        };
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/store/profile': {
        /**
         * Returns store profile settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StoreProfile'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
        };
        /**
         * Updates store profile settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StoreProfile'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
            /** Provided settings could not be applied for some reason - detailed errors in the response. */
            422: {
              content: {
                'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ErrorResponse'];
              };
            };
          };
          requestBody: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StoreProfile'];
            };
          };
        };
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/storefront/category': {
        /**
         * Returns category settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StorefrontCategorySettings'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
        };
        /**
         * Updates category settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StorefrontCategorySettings'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
            422: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['responses']['422ErrorResp'];
          };
          requestBody: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StorefrontCategorySettings'];
            };
          };
        };
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/storefront/product': {
        /**
         * Returns product settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['operations']['get-settings-storefront-product'];
        /**
         * Updates product settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['operations']['put-settings-storefront-product'];
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/storefront/robotstxt': {
        /**
         * Returns Robots.txt settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['RobotsTxtSettings'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
        };
        /**
         * Updates Robots.txt settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['RobotsTxtSettings'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
          requestBody: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['RobotsTxtSettings'];
            };
          };
        };
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/storefront/search': {
        /**
         * Returns search settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StorefrontSearchSettings'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
        };
        /**
         * Updates search settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StorefrontSearchSettings'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
          requestBody: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StorefrontSearchSettings'];
            };
          };
        };
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/storefront/security': {
        /**
         * Returns security settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StorefrontSecuritySettings'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
        };
        /**
         * Updates security settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StorefrontSecuritySettings'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
          requestBody: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StorefrontSecuritySettings'];
            };
          };
        };
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/storefront/seo': {
        /**
         * Returns SEO settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['SEOSettings'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
        };
        /**
         * Updates SEO settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['SEOSettings'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
            422: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['responses']['422ErrorResp'];
          };
          requestBody: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['SEOSettings'];
            };
          };
        };
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
      };
      '/stores/{store_hash}/v3/settings/storefront/status': {
        /**
         * Returns storefront status-related settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StorefrontStatus'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
        };
        /**
         * Updates storefront status-related settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
          parameters: {
            path: {
              /** Hash of your store */
              store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['components']['parameters']['store_hash'];
            };
            query: {
              /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
              channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
            };
          };
          responses: {
            /** OK */
            200: {
              content: {
                'application/json': {
                  data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StorefrontStatus'];
                  meta?: { [key: string]: unknown };
                };
              };
            };
          };
          requestBody: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StorefrontStatus'];
            };
          };
        };
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['components']['parameters']['store_hash'];
          };
        };
      };
    };
    components: {
      schemas: {
        /**
         * AddressTypeEnumValues
         * @description Only supports manipulation on a global level.
         * @default Home Office
         */
        AddressTypeEnumValues: 'Home Office' | 'Commercial Office' | 'Retail' | 'Warehouse';
        AnalyticsProvider: {
          /** @description Web Analytics Provider code. */
          code?: string;
          /** @description Flag indicates if Web Analytics Provider is enabled or not. */
          enabled?: boolean;
          /** @description Web Analytics Provider ID. */
          id?: number;
          /** @description Web Analytics Provider title. */
          name?: string;
        };
        AnalyticsProviders: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['AnalyticsProvider'][];
        /** AvailableFilter */
        AvailableFilter:
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['AvailableNormalFilter']
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['AvailablePriceFilter']
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['AvailableOtherFilter'];
        /** AvailableNormalFilter */
        AvailableNormalFilter: {
          id?: string;
          name?: string;
          product_count?: number;
          type?: 'category' | 'brand' | 'rating' | 'product';
        };
        /** AvailableOtherFilter */
        AvailableOtherFilter: {
          id?: string;
          name?: string;
          type?: 'other';
        };
        /** AvailablePriceFilter */
        AvailablePriceFilter: {
          id?: string;
          name?: string;
          price_range_max?: number;
          price_range_min?: number;
          type?: 'price';
        };
        /** @description Error payload for the BigCommerce API. */
        BaseError: {
          instance?: string;
          /** @description The HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
        };
        CatalogSettings: {
          auto_approve_reviews?: boolean;
          enable_product_comparisons?: boolean;
        };
        /** CategoryListingModeEnumValues */
        CategoryListingModeEnumValues:
          | 'current_category_only'
          | 'child_categories'
          | 'child_categories_if_category_empty';
        /** ConfiguredFilter */
        ConfiguredFilter:
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledProductFilter']
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledPriceFilter']
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledCategoryFilter']
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledBrandFilter']
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledRatingFilter']
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledMiscFilter'];
        /** ConfiguredFilters */
        ConfiguredFilters: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ConfiguredFilter'][];
        /**
         * ConfiguredFiltersOverride
         * @description A new set of enabled Product Filtering filters which should display in a particular context, such as on a particular Channel, or while viewing a particular Category. Array order indicates the display order on the storefront.
         */
        ConfiguredFiltersOverride: {
          context?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['SearchFilterOverrideContextIdentifier'];
          data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ConfiguredFilters'];
        };
        /**
         * ContentSortEnumValues
         * @default relevance
         */
        ContentSortEnumValues: 'relevance' | 'atoz' | 'ztoa';
        DetailedErrors: { [key: string]: string };
        /**
         * EnabledBrandFilter
         * @description A storefront filter for product brand
         */
        EnabledBrandFilter: {
          collapsed_by_default?: boolean;
          display_name?: string;
          display_product_count?: boolean;
          id?: string;
          is_enabled?: boolean;
          items_to_show?: 5 | 10 | 15;
          sort_by?: 'alpha' | 'item_count';
          type?: 'brand';
        };
        /**
         * EnabledCategoryFilter
         * @description A storefront filter for product category
         */
        EnabledCategoryFilter: {
          collapsed_by_default?: boolean;
          display_name?: string;
          display_product_count?: boolean;
          id?: string;
          is_enabled?: boolean;
          items_to_show?: 5 | 10 | 15;
          type?: 'category';
        };
        /** EnabledFilter */
        EnabledFilter:
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledProductFilter']
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledPriceFilter']
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledCategoryFilter']
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledBrandFilter']
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledRatingFilter']
          | external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledMiscFilter'];
        /** EnabledFilters */
        EnabledFilters: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledFilter'][];
        /**
         * EnabledFiltersOverride
         * @description A new set of enabled Product Filtering filters which should display in a particular context, such as on a particular Channel, or while viewing a particular Category. Array order indicates the display order on the storefront.
         */
        EnabledFiltersOverride: {
          data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledFilters'];
          scope?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['SearchFilterOverrideScopeIdentifier'];
        };
        /**
         * EnabledMiscFilter
         * @description Miscellaneous Filters which appear as a group.
         */
        EnabledMiscFilter: {
          collapsed_by_default?: boolean;
          display_name?: string;
          display_product_count?: boolean;
          id?: number;
          is_enabled?: boolean;
          show_free_shipping_filter?: boolean;
          show_in_stock_filter?: boolean;
          show_is_featured_filter?: boolean;
          show_product_count?: boolean;
          type?: 'other';
        };
        /**
         * EnabledPriceFilter
         * @description A filter based on the product’s price, shown as a price range on the storefront.
         */
        EnabledPriceFilter: {
          collapsed_by_default?: boolean;
          display_name?: string;
          id?: string;
          is_enabled?: boolean;
          type?: 'price';
        };
        /**
         * EnabledProductFilter
         * @description A filter that uses product options and custom field data.
         */
        EnabledProductFilter: {
          collapsed_by_default?: boolean;
          display_name?: string;
          display_product_count?: boolean;
          id?: string;
          is_enabled?: boolean;
          items_to_show?: 5 | 10 | 15;
          sort_by?: 'alpha' | 'option_values' | 'item_count';
          type?: 'product';
        };
        /**
         * EnabledRatingFilter
         * @description A filter based on product review ratings.
         */
        EnabledRatingFilter: {
          collapsed_by_default?: boolean;
          display_name?: string;
          id?: string;
          is_enabled?: boolean;
          type?: 'rating';
        };
        EnabledTransactionalEmails: {
          abandoned_cart_email?: boolean;
          account_details_changed_email?: boolean;
          combined_order_status_email?: boolean;
          create_account_email?: boolean;
          create_guest_account_email?: boolean;
          gift_certificate_email?: boolean;
          invoice_email?: boolean;
          order_message_notification_email?: boolean;
          product_review_email?: boolean;
          return_confirmation_email?: boolean;
          return_statuschange_email?: boolean;
        };
        /** @description A standard error object. */
        Error: {
          code: string;
          message?: string;
        };
        ErrorResponse: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['BaseError'] & {
          errors?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['DetailedErrors'];
        };
        ErrorResponse400: {
          schema?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['Error'];
        };
        ErrorResponse404: {
          schema?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['Error'];
        };
        ErrorResponse409: {
          schema?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['Error'];
        };
        ErrorResponse422: {
          schema?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['Error'];
        };
        /** HSTSMaxAgeEnumValues */
        HSTSMaxAgeEnumValues: 'zero_seconds' | 'five_minutes' | 'one_year';
        InventoryNotificationsSettings: {
          low_stock_notification_addresses?: string[];
          out_of_stock_notification_addresses?: string[];
        };
        /** @description The basic locale settings for a store, used to give shopper information about languages, countries, etc. */
        Locale: {
          /**
           * @default en
           * @example en, en-us
           */
          default_shopper_language: string;
          /**
           * @description Determines whether to display the storefront content in the shopper's browser language or the shopper's selected default language.
           *
           * Available values:
           * * `browser` - language updates automatically based on the shopper browser language. Multiple languages are supported.
           * * `default_shopper_language` - content is displayed in a single language based on the set `default_shopper_language`. Only the selected language is supported.
           * @default default_shopper_language
           * @example default_shopper_language
           */
          shopper_language_selection_method?: 'browser' | 'default_shopper_language';
          /** @default United States */
          store_country?: string;
        };
        LogoSettings: {
          favicon_url?: string;
          logo_image_url?: string;
          logo_text?: string;
          type?: 'image' | 'text';
        };
        LogoSettingsUpdate: {
          logo_text?: string;
          type?: 'image' | 'text';
        };
        MetaPaginationObject: {
          pagination?: {
            /** @example 5 */
            count?: number;
            /** @example 1 */
            current_page?: number;
            links?: {
              /** @example ?limit=5&page=1 */
              current?: string;
              /** @example ?limit=5&page=2 */
              next?: string;
            };
            /** @example 5 */
            per_page?: number;
            /** @example 246 */
            total?: number;
            /** @example 50 */
            total_pages?: number;
          };
        };
        /**
         * ProductSortEnumValues
         * @description The available sorts for PLP pages.
         * @default bestselling
         */
        ProductSortEnumValues:
          | 'featured'
          | 'bestselling'
          | 'newest'
          | 'atoz'
          | 'ztoa'
          | 'highestprice'
          | 'lowestprice'
          | 'bestreviewed';
        RobotsTxtSettings: {
          robots_txt_ssl?: string;
        };
        SEOSettings: {
          meta_description?: string;
          meta_keywords?: string;
          page_title?: string;
          www_redirect?: 'www' | 'no-www' | 'none';
        };
        /** ContextIdentifier */
        SearchFilterOverrideContextIdentifier: {
          category_id?: number;
          channel_id?: number;
        };
        /** ScopeIdentifier */
        SearchFilterOverrideScopeIdentifier: {
          category_id?: number;
          channel_id?: number;
        };
        /** @description The basic profile settings for a store, used to give the shopper information about the business from which they are purchasing. */
        StoreProfile: {
          store_address?: string;
          store_address_type?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['AddressTypeEnumValues'];
          store_email?: string;
          store_name?: string;
          store_phone?: string;
        };
        StorefrontCategorySettings: {
          category_tree_depth?: number;
          default_product_sort?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ProductSortEnumValues'];
          listing_mode?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['CategoryListingModeEnumValues'];
        };
        /** StorefrontProductSettings */
        StorefrontProductSettings: {
          /** @example preorder message */
          default_preorder_message?: string;
          show_add_to_cart_link?: boolean;
          show_add_to_cart_qty_box?: boolean;
          show_add_to_wishlist?: boolean;
          show_breadcrumbs_product_pages?: 'show_one' | 'show_none';
          show_product_brand?: boolean;
          show_product_price?: boolean;
          show_product_rating?: boolean;
          show_product_shipping?: boolean;
          show_product_sku?: boolean;
          show_product_weight?: boolean;
        };
        StorefrontSearchSettings: {
          content_product_sort?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ContentSortEnumValues'];
          default_product_sort?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ProductSortEnumValues'];
          /** @description Controls whether Product Filtering feature is active on the storefront. Only supports manipulation on a global level. */
          product_filtering_enabled?: boolean;
          search_suggest?: boolean;
        };
        /** StorefrontSecuritySettings */
        StorefrontSecuritySettings: {
          csp_header?: {
            enabled?: boolean;
            header_value?: string;
          };
          hsts?: {
            enabled?: boolean;
            include_preload?: boolean;
            include_subdomains?: boolean;
            max_age?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['HSTSMaxAgeEnumValues'];
          };
          sitewide_https_enabled?: boolean;
          x_frame_options_header?: {
            allowed_url?: string;
            enabled?: boolean;
            setting?: 'deny' | 'same_origin' | 'allow_from_url';
          };
        };
        StorefrontStatus: {
          down_for_maintenance_message?: string;
          prelaunch_message?: string;
          /** @description A read-only value representing the auto-generated storefront password. */
          prelaunch_password?: string;
        };
      };
      responses: {
        /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
        '200-storefront-product-settings': {
          content: {
            'application/json': {
              data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StorefrontProductSettings'];
              meta?: { [key: string]: unknown };
            };
          };
        };
        /** `422 Unprocessable Entity` Provided settings could not be applied for some reason - detailed errors in the response. */
        '422ErrorResp': {
          content: {
            'application/json': {
              errors?: {
                /** @example Incorrect value [current__only], it should match one of: current_category_only,child_categories_if_category_empty,child_categories; Incorrect value [besling], it should match one of: featured,newest,bestselling,atoz,ztoa,bestreviewed,lowestprice,highestprice */
                ''?: string;
              };
              /** @example 422 */
              status?: number;
              /** @example JSON data is missing or invalid */
              title?: string;
              /** @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes */
              type?: string;
            };
          };
        };
      };
      parameters: {
        /** @description Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
        ChannelIdParam: number;
        /** @description Array of strings (CSV) representing which configuration keys should be cleared (un-overridden) for the Channel. */
        KeysToDelete: string[];
        /** @description Required Channel ID. This delete operation will delete overridden settings for this channel, thus restoring them to the global defaults. */
        RequiredChannelIdParamForDelete: number;
        /** @description Hash of your store */
        store_hash: string;
      };
    };
    operations: {
      /** Get global transactional email settings or channel specific overrides by `channel_id`. */
      'get-settings-emails-enabled': {
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
          query: {
            /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
            channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
          };
        };
        responses: {
          /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
          200: {
            content: {
              'application/json': {
                data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledTransactionalEmails'];
                meta?: { [key: string]: unknown };
              };
            };
          };
        };
      };
      /** Update global transactional email settings or create channel specific overrides by `channel_id`. */
      'put-settings-transactional-emails-enabled': {
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
          query: {
            /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
            channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
          };
        };
        responses: {
          /** OK */
          200: {
            content: {
              'application/json': {
                data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledTransactionalEmails'];
                meta?: { [key: string]: unknown };
              };
            };
          };
        };
        requestBody: {
          content: {
            'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['EnabledTransactionalEmails'];
          };
        };
      };
      /**
       * Uploads an image file to use as the storefront favicon. Supported MIME types include GIF, JPEG, and PNG.
       *
       *   - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
       */
      'post-favicon-logo-image': {
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
          query: {
            /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
            channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
          };
        };
        responses: {
          /** OK */
          204: never;
        };
        requestBody: {
          content: {
            'multipart/form-data': {
              /** Format: binary */
              FaviconFile?: string;
            };
          };
        };
      };
      /**
       * Returns store logo settings.
       *
       *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
       *
       *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
       */
      'get-settings-logo': {
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
          query: {
            /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
            channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
          };
        };
        responses: {
          /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
          200: {
            content: {
              'application/json': {
                data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['LogoSettings'];
                meta?: { [key: string]: unknown };
              };
            };
          };
        };
      };
      /**
       * Updates the logo type and logo text for a textual logo. To upload new images, use the dedicated image POST endpoints.
       *
       *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
       *
       *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
       */
      'put-settings-logo': {
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
          query: {
            /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
            channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
          };
        };
        responses: {
          /** OK */
          200: {
            content: {
              'application/json': {
                data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['LogoSettings'];
                meta?: { [key: string]: unknown };
              };
            };
          };
        };
        requestBody: {
          content: {
            'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['LogoSettingsUpdate'];
          };
        };
      };
      /**
       * Uploads an image file to use as the storefront logo. Supported MIME types include GIF, JPEG, and PNG.
       *
       *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
       */
      'post-settings-logo-image': {
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
          query: {
            /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
            channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
          };
        };
        responses: {
          /** OK */
          204: never;
        };
        requestBody: {
          content: {
            'multipart/form-data': {
              /** Format: binary */
              LogoFile?: string;
            };
          };
        };
      };
      /** Returns a list of enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. These filters will be used if a store does not have contextual overrides. */
      getEnabled: {
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
        responses: {
          200: {
            content: {
              'application/json': {
                data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ConfiguredFilters'];
                meta?: { [key: string]: unknown };
              };
            };
          };
        };
      };
      /** Updates enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. */
      updateEnabled: {
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
        responses: {
          200: {
            content: {
              'application/json': {
                data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ConfiguredFilters'];
                meta?: { [key: string]: unknown };
              };
            };
          };
        };
        requestBody: {
          content: {
            'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ConfiguredFilters'];
          };
        };
      };
      /** Returns a list of filters available to power [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings). */
      getAvailable: {
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
          query: {
            /** Narrows the list of available filters based on channel ID. Only products currently assigned to the given Channel will be considered. */
            channel_id?: number;
            /** Narrows the list of available filters based on category ID. You can display settings to show products from the provided category, subcategories only, or both the category and its child categories. */
            category_id?: number;
          };
        };
        responses: {
          200: {
            content: {
              'application/json': {
                data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['AvailableFilter'][];
                meta?: { [key: string]: unknown };
              };
            };
          };
        };
      };
      /**
       * Returns a list of contextual filters enabled for a particular channel or category.
       *
       * **Usage Notes**
       *
       * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
       *
       * The order of the returned filters will match the sort order of the filters on the storefront.
       */
      getContexts: {
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
          query: {
            /** Only return contextual overrides related to a particular Channel. */
            channel_id?: number;
            /** Only return contextual overrides related to a particular Category. */
            category_id?: number;
          };
        };
        responses: {
          /** OK */
          200: {
            content: {
              'application/json': {
                data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ConfiguredFiltersOverride'][];
                meta?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['MetaPaginationObject'];
              };
            };
          };
        };
      };
      /**
       * Upserts contextual filters for a particular channel or category.
       *
       * **Usage Notes**
       *
       * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
       *
       * You can change the order of the filters on the live site by changing the order of the filters you send.
       */
      upsertContexts: {
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
        };
        responses: {
          /** OK */
          200: {
            content: {
              'application/json': {
                data?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ConfiguredFiltersOverride'][];
                meta?: { [key: string]: unknown };
              };
            };
          };
        };
        requestBody: {
          content: {
            'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['ConfiguredFiltersOverride'][];
          };
        };
      };
      /**
       * Returns product settings.
       *
       *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
       *
       *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
       */
      'get-settings-storefront-product': {
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
          query: {
            /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
            channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
          };
        };
        responses: {
          200: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['responses']['200-storefront-product-settings'];
        };
      };
      /**
       * Updates product settings.
       *
       *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
       *
       *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
       */
      'put-settings-storefront-product': {
        parameters: {
          path: {
            /** Hash of your store */
            store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['store_hash'];
          };
          query: {
            /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
            channel_id?: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['parameters']['ChannelIdParam'];
          };
        };
        responses: {
          200: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['responses']['200-storefront-product-settings'];
          422: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['responses']['422ErrorResp'];
        };
        requestBody: {
          content: {
            'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/settings.v3.yml']['components']['schemas']['StorefrontProductSettings'];
          };
        };
      };
    };
  };
}
