/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v2/blog/tags': {
    /** Returns a list of *Blog Tags*. */
    get: operations['getAllBlogTags'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/blog/posts': {
    /** Returns all *Blog Posts*. Default sorting is by published_date, beginning with the most recent post. */
    get: operations['getAllBlogPosts'];
    /**
     * Creates a *Blog Post*.
     *
     * **Required Fields**
     * *   title
     * *   body
     *
     * **Read Only Fields**
     * *   id
     * *   preview_url
     * *   summary
     *
     * **Notes**
     *
     * * When including `published_date` in a request, supply it as a flat date string (not an object) in valid <a href="http://tools.ietf.org/html/rfc2822#section-3.3" target="_blank">RFC 2822</a>. The&#160;example request below includes a `published_date` in RFC 2822 format.
     *
     * * Blog posts default to draft status. To publish blog posts to the storefront, set their `is_published` property to `true`.
     * * If a custom URL is not provided, the post’s URL will be generated based on the value of `title`.
     */
    post: operations['createABlogPosts'];
    /** Deletes a page of `Blog Posts`. */
    delete: operations['deleteAllBlogPosts'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/blog/posts/{id}': {
    /** Returns a single *Blog Post*. */
    get: operations['getABlogPost'];
    /**
     * Updates a *Blog Post*.
     *
     * **Read Only Fields**
     * *   id
     * *   preview_url
     *
     * **Notes**
     *
     * * When including `published_date` in a request, supply it as a flat date string (not an object) in valid <a href="http://tools.ietf.org/html/rfc2822#section-3.3" target="_blank">RFC 2822</a>. The&#160;example request below includes a `published_date` in RFC 2822 format.
     */
    put: operations['updateABlogPost'];
    /** Deletes a *Blog Post*. */
    delete: operations['deleteABlogPost'];
    parameters: {
      path: {
        id: string;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/blog/posts/count': {
    /** Returns a count of all *Blog Posts*. */
    get: operations['getACountOfAllBlogPosts'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/pages': {
    /** Returns a list of *Pages*. Default sorting is by auto-generated ID from oldests to newest. This endpoint is deprecated. */
    get: operations['getAllPages'];
    /**
     * Creates a *Page*. The payload limit is 1MB. This endpoint is deprecated.
     *
     * **Required Fields**
     * *   `type`
     * *   `name`
     * *   `link` (for a page of `type: link`)
     * *   `feed` (for a page of `type: rss_feed`)
     * *   `body` (for a page of `type: raw`)
     *
     * **Read Only Fields**
     * *   `id`
     *
     * ## Content Type
     *
     * The default value for `content_type` is `text/html`; however, if `page_type` is set to `raw`, `content_type` can be changed to `text/javascript` or `application/json`. Updating this field allows you to place a JavaScript or a JSON file in the root directory.
     */
    post: operations['createAPage'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/pages/{id}': {
    /** Returns a *Page*. This endpoint is deprecated. */
    get: operations['getAPage'];
    /**
     * Updates a *Page*. The payload limit is 1MB. This endpoint is deprecated.
     *
     * **Read Only Fields**
     * * id
     */
    put: operations['updateAPage'];
    /** Deletes a *Page*. This endpoint is deprecated. */
    delete: operations['deleteAPage'];
    parameters: {
      path: {
        id: string;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/redirects': {
    /**
     * Returns a list all *Redirect URLs*.
     *
     * <!-- theme: warning -->
     * > #### Deprecated
     * > Avoid using this API operation if possible. It will be removed in a future version.
     * > For the most up-to-date version of this API, see  [Get Redirects v3](/api-reference/storefront/redirects/redirects/getredirects) to manage redirects URLs.
     */
    get: operations['getAListofRedirects'];
    /**
     * Creates a *Redirect URL*.
     *
     * **Required Fields**
     * *   path
     * *   forward
     *
     * **Read Only**
     * *   url
     *
     *
     * <!-- theme: warning -->
     * > #### Deprecated
     * > Avoid using this API operation if possible. It will be removed in a future version.
     * > For the most up-to-date version of this API, see [Upsert Redirects v3](/api-reference/store-management/redirects/redirects/upsertredirects) to upsert new redirect data.
     */
    post: operations['createARedirect'];
    /**
     * By default, it deletes all *Redirect URLs* in a store.
     *
     * <!-- theme: warning -->
     *
     * > #### Deprecated
     *
     * > Avoid using this API operation if possible. It will be removed in a future version.
     *
     * > For the most up-to-date version of this API, see [Delete Redirects v3](/api-reference/store-management/redirects/redirects/deleteredirects) to delete redirects URLs.
     */
    delete: operations['deleteAllRedirects'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/redirects/{id}': {
    /**
     * Returns a single *Redirect URL*.
     *
     * <!-- theme: warning -->
     * > #### Deprecated
     * > Avoid using this API operation if possible. It will be removed in a future version.
     * > For the most up-to-date version of this API, see [Get Redirects v3](/api-reference/storefront/redirects/redirects/getredirects) to get a redirect URL.
     */
    get: operations['getARedirectURL'];
    /**
     * Updates a *Redirect URL*.
     *
     * **Required Fields**
     * *   path
     * *   forward
     *
     * **Read Only Fields**
     * *   url
     *
     *
     * <!-- theme: warning -->
     * > #### Deprecated
     * > Avoid using this API operation if possible. It will be removed in a future version.
     * > For the most up-to-date version of this API, see [Upsert Redirects v3](/api-reference/storefront/redirects/redirects/upsertredirects) to update redirect data.
     */
    put: operations['updateARedirectURL'];
    /**
     * Deletes a *Redirect URL*.
     *
     * <!-- theme: warning -->
     * > #### Deprecated
     * > Avoid using this API operation if possible. It will be removed in a future version.
     * > For the most up-to-date version of this API, see [Delete Redirects v3](/api-reference/store-management/redirects/redirects/deleteredirects) to delete a redirect URL.
     */
    delete: operations['deleteARedirect'];
    parameters: {
      path: {
        id: string;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/redirects/count': {
    /**
     * Gets a count of *Redirect URLs* in a store.
     *
     * <!-- theme: warning -->
     * > #### Deprecated
     * > Avoid using this API operation if possible. It will be removed in a future version.
     * > For the most up-to-date version of this API, see  [Get Redirects v3](/api-reference/storefront/redirects/redirects/getredirects) to get a count of redirects.
     */
    get: operations['getACountOfRedirects'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
}

export interface definitions {
  /** blogPost_Full */
  blogPost_Full: {
    /**
     * @description ID of this blog post. (READ-ONLY)
     * @example 3
     */
    id?: number;
  } & definitions['blogPost_Base'];
  /** addresses */
  addresses: {
    /**
     * @description Full URL of where the resource is located.
     * @example https://api.bigcommerce.com/stores/{$$.env.store_hash}/v2/customers/5/addresses
     */
    url?: string;
    /**
     * @description Resource being accessed.
     * @example /customers/5/addresses
     */
    resource?: string;
  };
  /** formField */
  formField: {
    /**
     * @description Name of the form field
     * @example License Id
     */
    name?: string;
    /**
     * @description Value of the form field
     * @example 123BAF
     */
    value?: string;
  };
  /** page_Full */
  page_Full: {
    /**
     * @description ID of the page.
     * @example 44
     */
    id?: number;
  } & definitions['page_Base'];
  /**
   * redirect
   * @example [object Object]
   */
  redirect: {
    /**
     * @description Numeric ID of the redirect.
     * @example 1
     */
    id?: number;
    /**
     * @description The path from which to redirect.
     * @example /smith-journal-13/
     */
    path: string;
    forward: definitions['forward'];
    /**
     * @description URL of the redirect. READ-ONLY
     * @example http://store-url.mybigcommerce.com/towels/bath-towels/hand-towels/
     */
    url?: string;
  };
  /** forward */
  forward: {
    /**
     * @description The type of redirect. If it is a `manual` redirect then type will always be manual. Dynamic redirects will have the type of the page. Such as product or category.
     * @example product
     */
    type?: string;
    /**
     * @description Reference of the redirect. Dynamic redirects will have the category or product number. Manual redirects will have the url that is being directed to.
     * @example 111
     */
    ref?: number;
  };
  /** customer_Full */
  customer_Full: {
    /**
     * @description Unique numeric ID of this customer. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     * @example 1
     */
    id?: number;
    /** @description Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If a password is not supplied, it is generated automatically. For further information about using this object, please see the Customers resource documentation. */
    _authentication?: {
      force_reset?: string;
      password?: string;
      password_confirmation?: string;
    };
    /**
     * @description The name of the company for which the customer works.
     * @example BigCommerce
     */
    company?: string;
    /**
     * @description First name of the customer.
     * @example Jane
     */
    first_name: string;
    /**
     * @description Last name of the customer.
     * @example Doe
     */
    last_name: string;
    /**
     * @description Email address of the customer.
     * @example janedoe@example.com
     */
    email: string;
    /**
     * @description Phone number of the customer.
     * @example 1234567890
     */
    phone?: string;
    /**
     * Format: date-time
     * @description Date on which the customer registered from the storefront or was created in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     * @example Thu, 11 Jan 2018 20:57:52 +0000
     */
    date_created?: string;
    /**
     * Format: date-time
     * @description Date on which the customer updated their details in the storefront or was updated in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     *
     * @example Tue, 10 Apr 2018 18:59:05 +0000
     */
    date_modified?: string;
    /** @description The amount of credit the customer has. (Float, Float as String, Integer) */
    store_credit?: string;
    /**
     * @description The customer’s IP address when they signed up.
     * @example 12.345.678.910
     */
    registration_ip_address?: string;
    /**
     * @description The group to which the customer belongs.
     * @example 2
     */
    customer_group_id?: number;
    /** @description Store-owner notes on the customer. */
    notes?: string;
    /** @description If applicable, the tax-exempt category of the shopper's customer account. You can apply a tax-exempt category to multiple customers. This code should match the exemption codes provided by the third-party integration. */
    tax_exempt_category?: string;
    /**
     * @description Records whether the customer would like to receive marketing content from this store. READ-ONLY.This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     *
     * @example true
     */
    accepts_marketing?: boolean;
    addresses?: definitions['addresses'];
    /** @description Array of custom fields. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
    form_fields?: definitions['formField'][];
    /** @description Force a password change on next login. */
    reset_pass_on_login?: boolean;
  };
  /** categoryAccessLevel */
  categoryAccessLevel: {
    /**
     * @description + `all` - Customers can access all categories
     *  + `specific`  - Customers can access a specific list of categories
     * + `none` - Customers are prevented from viewing any of the categories in this group.
     */
    type?: 'all' | 'specific' | 'none';
    /**
     * @description Is an array of category IDs and should be supplied only if `type` is specific.
     * @example 18,19,23,34
     */
    categories?: string[];
  };
  /** timeZone */
  timeZone: {
    /**
     * @description A string identifying the time zone, in the format: <Continent-name>/<City-name>.
     * @example America/Chicago
     */
    name?: string;
    /**
     * @description A negative or positive number, identifying the offset from UTC/GMT, in seconds, during winter/standard time.
     * @example -21600
     */
    raw_offset?: number;
    /**
     * @description “-/+” offset from UTC/GMT, in seconds, during summer/daylight saving time.
     * @example -18000
     */
    dst_offset?: number;
    /**
     * @description A boolean indicating whether this time zone observes daylight saving time.
     * @example true
     */
    dst_correction?: boolean;
    date_format?: definitions['dateFormat'];
  };
  /**
   * count_Response
   * @example [object Object]
   */
  count_Response: {
    /** @example 27 */
    count?: number;
  };
  /** dateFormat */
  dateFormat: {
    /**
     * @description A string that defines dates’ display formats, in the pattern: M jS Y
     * @example M jS Y
     */
    display?: string;
    /**
     * @description A string that defines the CSV export format for orders, customers, and products, in the pattern: M jS Y
     * @example M jS Y
     */
    export?: string;
    /**
     * @description A string that defines dates’ extended-display format, in the pattern: M jS Y @ g:i A.
     * @example M jS Y @ g:i A
     */
    extended_display?: string;
  };
  /** blogTags */
  blogTags: {
    /** @example Blog */
    tag?: string;
    /** @example 1,2,4 */
    post_ids?: number[];
  }[];
  /** blogPost_Base */
  blogPost_Base: {
    /**
     * @description Title of this blog post.
     * @example Welcome to BigCommerce
     */
    title: string;
    /**
     * @description URL for the public blog post.
     * @example /blog/welcome-bigcommerce/
     */
    url?: string;
    /**
     * @description URL to preview the blog post. (READ-ONLY)
     * @example /blog/welcome-bigcommerce/
     */
    preview_url?: string;
    /**
     * @description Text body of the blog post.
     * @example <p>Customize your site, manage shipping and payments, and list your products on Amazon, eBay, and Facebook with the #1 ecommerce platform. </p>
     */
    body: string;
    /** @description Tags to characterize the blog post. */
    tags?: string[];
    /**
     * @description Summary of the blog post. (READ-ONLY)
     * @example <p>We power ecommerce websites for successful retailers all over the world</p>
     */
    summary?: string;
    /**
     * @description Whether the blog post is published.
     * @example true
     */
    is_published?: boolean;
    published_date?: definitions['publishedDate'];
    /**
     * @description Published date in `ISO 8601` format.
     * @example 5/18/2018 1:26:42 PM
     */
    published_date_iso8601?: string;
    /**
     * @description Description text for this blog post’s `<meta/>` element.
     * @example Welcome Post
     */
    meta_description?: string;
    /**
     * @description Keywords for this blog post’s `<meta/>` element.
     * @example BigCommerce, welcome, ecommerce
     */
    meta_keywords?: string;
    /**
     * @description Name of the blog post’s author.
     * @example BigCommerce
     */
    author?: string;
    /** @description Local path to a thumbnail uploaded to `/product_images/` via [WebDav](https://support.bigcommerce.com/s/article/File-Access-WebDAV). */
    thumbnail_path?: string;
  };
  publishedDate: {
    /** @example 1 */
    timezone_type?: string;
    /**
     * Format: date-time
     * @example 2018-05-18T08:26:42.000Z
     */
    date?: string;
    /**
     * Format: time
     * @example +00:00
     */
    timezone?: string;
  };
  /** @description Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If a password is not supplied, it is generated automatically. For further information about using this object, please see the Customers resource documentation. */
  authentication: {
    force_reset?: string;
    password?: string;
    password_confirmation?: string;
  };
  /** customer_Base */
  customer_Base: { [key: string]: unknown };
  /** page_Base */
  page_Base: {
    /**
     * @description ID of any parent Web page.
     * @example 5
     */
    parent_id?: number;
    /**
     * @description `page`: free-text page
     * `link`: link to another web address
     * `rss_feed`: syndicated content from an RSS feed
     * `contact_form`: When the store's contact form is used.
     */
    type: 'page' | 'rss_feed' | 'contact_form' | 'raw' | 'link';
    /**
     * @description Where the page’s type is a contact form: object whose members are the fields enabled (in the control panel) for storefront display. Possible members are:`fullname`: full name of the customer submitting the form; `phone`: customer’s phone number, as submitted on the form; `companyname`: customer’s submitted company name; `orderno`: customer’s submitted order number; `rma`: customer’s submitted RMA (Return Merchandise Authorization) number.
     * @example fullname,companyname,phone,orderno,rma
     */
    contact_fields?: string;
    /**
     * @description Where the page’s type is a contact form: email address that receives messages sent via the form.
     * @example janedoes@example.com
     */
    email?: string;
    /**
     * @description Page name, as displayed on the storefront.
     * @example Contact Form
     */
    name: string;
    /**
     * @description Relative URL on the storefront for this page.
     * @example /contact-us/
     */
    url?: string;
    /** @description Description contained within this page’s `<meta/>` element. */
    meta_description?: string;
    /**
     * @description HTML or variable that populates this page’s `<body>` element, in default/desktop view. Required in POST if page type is `raw`.
     * @example <p>We're happy to answer questions or help you with returns.<br />Please fill out the form below if you need assistance.</p>
     */
    body: string;
    /** @description HTML to use for this page's body when viewed in the mobile template (deprecated). */
    mobile_body?: string;
    /** @description If true, this page has a mobile version. */
    has_mobile_version?: boolean;
    /**
     * @description If true, this page appears in the storefront’s navigation menu.
     * @example true
     */
    is_visible?: boolean;
    /** @description If true, this page is the storefront’s home page. */
    is_homepage?: boolean;
    /** @description Text specified for this page’s `<title>` element. (If empty, the value of the name property is used.) */
    meta_title?: string;
    /**
     * @description Layout template for this page. This field is writable only for stores with a Blueprint theme applied.
     * @example page.html
     */
    layout_file?: string;
    /**
     * @description Order in which this page should display on the storefront. (Lower integers specify earlier display.)
     * @example 3
     */
    sort_order?: number;
    /** @description Comma-separated list of keywords that shoppers can use to locate this page when searching the store. */
    search_keywords?: string;
    /** @description Comma-separated list of SEO-relevant keywords to include in the page’s `<meta/>` element. */
    meta_keywords?: string;
    /** @description If page type is `rss_feed` the n this field is visisble. Required in POST required for `rss page` type. */
    feed: string;
    /** @description If page type is `link` this field is returned. Required in  POST to create a `link` page. */
    link: string;
    /** @example text/html */
    content_type?: 'application/json' | 'text/javascript' | 'text/html';
  };
}

export interface responses {}

export interface operations {
  /** Returns a list of *Blog Tags*. */
  getAllBlogTags: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        schema: definitions['blogTags'][];
      };
    };
  };
  /** Returns all *Blog Posts*. Default sorting is by published_date, beginning with the most recent post. */
  getAllBlogPosts: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** Filter param. */
        is_published?: string;
        /** Filter param. Value must be URL encoded. */
        url?: string;
        /** Filter param. */
        tag?: string;
        /** Filter param. */
        published_date?: string;
        /** Filter param. */
        page?: number;
        /** Filter param. */
        limit?: number;
      };
    };
    responses: {
      200: {
        schema: definitions['blogPost_Full'][];
      };
    };
  };
  /**
   * Creates a *Blog Post*.
   *
   * **Required Fields**
   * *   title
   * *   body
   *
   * **Read Only Fields**
   * *   id
   * *   preview_url
   * *   summary
   *
   * **Notes**
   *
   * * When including `published_date` in a request, supply it as a flat date string (not an object) in valid <a href="http://tools.ietf.org/html/rfc2822#section-3.3" target="_blank">RFC 2822</a>. The&#160;example request below includes a `published_date` in RFC 2822 format.
   *
   * * Blog posts default to draft status. To publish blog posts to the storefront, set their `is_published` property to `true`.
   * * If a custom URL is not provided, the post’s URL will be generated based on the value of `title`.
   */
  createABlogPosts: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: definitions['blogPost_Base'];
      };
    };
    responses: {
      200: {
        schema: definitions['blogPost_Base'];
      };
      /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        schema: { [key: string]: unknown };
      };
    };
  };
  /** Deletes a page of `Blog Posts`. */
  deleteAllBlogPosts: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** Filter param. */
        page?: number;
        /** Filter param. */
        limit?: number;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a single *Blog Post*. */
  getABlogPost: {
    parameters: {
      path: {
        /** Id of the blog post. */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        schema: definitions['blogPost_Full'];
      };
    };
  };
  /**
   * Updates a *Blog Post*.
   *
   * **Read Only Fields**
   * *   id
   * *   preview_url
   *
   * **Notes**
   *
   * * When including `published_date` in a request, supply it as a flat date string (not an object) in valid <a href="http://tools.ietf.org/html/rfc2822#section-3.3" target="_blank">RFC 2822</a>. The&#160;example request below includes a `published_date` in RFC 2822 format.
   */
  updateABlogPost: {
    parameters: {
      path: {
        /** Id of the blog post. */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: definitions['blogPost_Base'];
      };
    };
    responses: {
      200: {
        schema: definitions['blogPost_Base'];
      };
      /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        schema: { [key: string]: unknown };
      };
    };
  };
  /** Deletes a *Blog Post*. */
  deleteABlogPost: {
    parameters: {
      path: {
        /** Id of the blog post. */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a count of all *Blog Posts*. */
  getACountOfAllBlogPosts: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        schema: definitions['count_Response'];
      };
    };
  };
  /** Returns a list of *Pages*. Default sorting is by auto-generated ID from oldests to newest. This endpoint is deprecated. */
  getAllPages: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** Filter param. */
        page?: number;
        /** Filter param. */
        limit?: number;
      };
    };
    responses: {
      200: {
        schema: definitions['page_Full'][];
      };
    };
  };
  /**
   * Creates a *Page*. The payload limit is 1MB. This endpoint is deprecated.
   *
   * **Required Fields**
   * *   `type`
   * *   `name`
   * *   `link` (for a page of `type: link`)
   * *   `feed` (for a page of `type: rss_feed`)
   * *   `body` (for a page of `type: raw`)
   *
   * **Read Only Fields**
   * *   `id`
   *
   * ## Content Type
   *
   * The default value for `content_type` is `text/html`; however, if `page_type` is set to `raw`, `content_type` can be changed to `text/javascript` or `application/json`. Updating this field allows you to place a JavaScript or a JSON file in the root directory.
   */
  createAPage: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: definitions['page_Base'];
      };
    };
    responses: {
      200: {
        schema: definitions['page_Full'];
      };
      /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        schema: { [key: string]: unknown };
      };
    };
  };
  /** Returns a *Page*. This endpoint is deprecated. */
  getAPage: {
    parameters: {
      path: {
        /** Id of the page. */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        schema: definitions['page_Full'];
      };
    };
  };
  /**
   * Updates a *Page*. The payload limit is 1MB. This endpoint is deprecated.
   *
   * **Read Only Fields**
   * * id
   */
  updateAPage: {
    parameters: {
      path: {
        id: string;
        store_hash: string;
      };
      body: {
        body?: definitions['page_Base'];
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      200: {
        schema: definitions['page_Base'];
      };
      /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        schema: { [key: string]: unknown };
      };
    };
  };
  /** Deletes a *Page*. This endpoint is deprecated. */
  deleteAPage: {
    parameters: {
      path: {
        /** Id of the page. */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /**
   * Returns a list all *Redirect URLs*.
   *
   * <!-- theme: warning -->
   * > #### Deprecated
   * > Avoid using this API operation if possible. It will be removed in a future version.
   * > For the most up-to-date version of this API, see  [Get Redirects v3](/api-reference/storefront/redirects/redirects/getredirects) to manage redirects URLs.
   */
  getAListofRedirects: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** Filter param. */
        page?: number;
        /** Filter param. */
        limit?: number;
      };
    };
    responses: {
      200: {
        schema: definitions['redirect'][];
      };
    };
  };
  /**
   * Creates a *Redirect URL*.
   *
   * **Required Fields**
   * *   path
   * *   forward
   *
   * **Read Only**
   * *   url
   *
   *
   * <!-- theme: warning -->
   * > #### Deprecated
   * > Avoid using this API operation if possible. It will be removed in a future version.
   * > For the most up-to-date version of this API, see [Upsert Redirects v3](/api-reference/store-management/redirects/redirects/upsertredirects) to upsert new redirect data.
   */
  createARedirect: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: definitions['redirect'];
      };
    };
    responses: {
      200: {
        schema: definitions['redirect'];
      };
    };
  };
  /**
   * By default, it deletes all *Redirect URLs* in a store.
   *
   * <!-- theme: warning -->
   *
   * > #### Deprecated
   *
   * > Avoid using this API operation if possible. It will be removed in a future version.
   *
   * > For the most up-to-date version of this API, see [Delete Redirects v3](/api-reference/store-management/redirects/redirects/deleteredirects) to delete redirects URLs.
   */
  deleteAllRedirects: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /**
   * Returns a single *Redirect URL*.
   *
   * <!-- theme: warning -->
   * > #### Deprecated
   * > Avoid using this API operation if possible. It will be removed in a future version.
   * > For the most up-to-date version of this API, see [Get Redirects v3](/api-reference/storefront/redirects/redirects/getredirects) to get a redirect URL.
   */
  getARedirectURL: {
    parameters: {
      path: {
        /** Id of the redirect url */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        schema: definitions['redirect'];
      };
    };
  };
  /**
   * Updates a *Redirect URL*.
   *
   * **Required Fields**
   * *   path
   * *   forward
   *
   * **Read Only Fields**
   * *   url
   *
   *
   * <!-- theme: warning -->
   * > #### Deprecated
   * > Avoid using this API operation if possible. It will be removed in a future version.
   * > For the most up-to-date version of this API, see [Upsert Redirects v3](/api-reference/storefront/redirects/redirects/upsertredirects) to update redirect data.
   */
  updateARedirectURL: {
    parameters: {
      path: {
        /** Id of the redirect url */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: {
          /**
           * @description Numeric ID of the redirect.
           * @example 1
           */
          id?: number;
          /**
           * @description The path from which to redirect.
           * @example /smith-journal-13/
           */
          path: string;
          forward: {
            /**
             * @description The type of redirect. If it is a manual redirect then type will always be manual. Dynamic redirects will have the type of the page. Such as product or category.
             *
             * @example product
             */
            type?: string;
            /**
             * @description Reference of the redirect. Dynamic redirects will have the category or product number. Manual redirects will have the url that is being directed to.
             * @example 111
             */
            ref?: string;
          };
          /**
           * @description URL of the redirect. READ-ONLY
           * @example http://store-url.mybigcommerce.com/towels/bath-towels/hand-towels/
           */
          url?: string;
        };
      };
    };
    responses: {
      200: {
        schema: definitions['redirect'];
      };
    };
  };
  /**
   * Deletes a *Redirect URL*.
   *
   * <!-- theme: warning -->
   * > #### Deprecated
   * > Avoid using this API operation if possible. It will be removed in a future version.
   * > For the most up-to-date version of this API, see [Delete Redirects v3](/api-reference/store-management/redirects/redirects/deleteredirects) to delete a redirect URL.
   */
  deleteARedirect: {
    parameters: {
      path: {
        /** Id of the redirect url */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /**
   * Gets a count of *Redirect URLs* in a store.
   *
   * <!-- theme: warning -->
   * > #### Deprecated
   * > Avoid using this API operation if possible. It will be removed in a future version.
   * > For the most up-to-date version of this API, see  [Get Redirects v3](/api-reference/storefront/redirects/redirects/getredirects) to get a count of redirects.
   */
  getACountOfRedirects: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        schema: definitions['count_Response'];
      };
    };
  };
}

export interface external {}
