/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v2/orders/{order_id}': {
    /** Gets an *Order*. To learn more about creating or updating orders, see [Orders Overview](/api-docs/orders/orders-api-overview). */
    get: operations['getAnOrder'];
    /**
     * Updates an *Order*.
     *
     * To add a product to an existing order, don't include `id` in the body. Include `product_options` if adding a product with variants.
     *
     * To update a product in an order, include `id` in the body. The body should only contain the fields that need to be updated. Those fields that are omitted will not be changed.
     *
     * To remove a product from an order, set that productâ€™s `quantity` to `0`.
     *
     * To learn more about creating or updating orders, see [Orders Overview](/api-docs/orders/orders-api-overview).
     */
    put: operations['updateAnOrder'];
    /** Archives an order. To remove a single product from an order, see `PUT /orders/{order_id}`. */
    delete: operations['deleteAnOrder'];
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/orders/count': {
    /** Gets an array of orders in the store organized by order status. */
    get: operations['getCountOrder'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/orders': {
    /**
     * Gets a list of orders using the filter query.
     *
     * **Notes**
     *
     * The default sort is by order id, from lowest to highest.
     */
    get: operations['getAllOrders'];
    /**
     * Creates an *Order*. To learn more about creating or updating orders, see [Orders Overview](/api-docs/orders/orders-api-overview).
     *
     * An order can be created with an existing catalog product or a custom product.
     *
     * **Required Fields**
     *
     * *   products
     * *   billing_address
     */
    post: operations['createAnOrder'];
    /** Archives all orders. */
    delete: operations['deleteAllOrders'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/orders/{order_id}/coupons': {
    /**
     * Lists all order coupons. Optional parameters can be passed in.
     *
     * |Type `int`|Type Name|
     * |-|-|
     * |`0`|`per_item_discount`|
     * |`1`|`percentage_discount`|
     * |`2`|`per_total_discount`|
     * |`3`|`shipping_discount`|
     * |`4`|`free_shipping`|
     * |`5`|`promotion`|
     */
    get: operations['getAllOrderCoupons'];
    parameters: {
      path: {
        store_hash: string;
        order_id: string;
      };
    };
  };
  '/stores/{store_hash}/v2/orders/{order_id}/products': {
    /** Lists all order products on an order using `order_id`. By default, items sort from lowest to highest according to a newly created ID, separate from the `order_id` and the `product_id`. */
    get: operations['getAllOrderProducts'];
    parameters: {
      path: {
        store_hash: string;
        order_id: string;
      };
    };
  };
  '/stores/{store_hash}/v2/orders/{order_id}/shipping_addresses': {
    /**
     * Get all shipping addresses on an order using the `order_id`.
     *
     * Returned in the response is shipping_quotes object. Please use the Get Shipping Quotes Endpoint. Using the response will return a 204 for the shipping quote.
     */
    get: operations['getAllShippingAddresses'];
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/order_statuses': {
    /**
     * Returns a Collection of All Order Statuses.
     *
     * **Order Status Descriptions:**
     * |Status ID | Name  | Description |
     * |--|--|--|
     * | 0 | Incomplete  | An incomplete order happens when a shopper reached the payment page, but did not complete the transaction. |
     * | 1 | Pending |Customer started the checkout process, but did not complete it. |
     * | 2 | Shipped | Order has been shipped, but receipt has not been confirmed; seller has used the Ship Items action. |
     * | 3 | Partially Shipped | Only some items in the order have been shipped, due to some products being pre-order only or other reasons. |
     * | 4 | Refunded | Seller has used the Refund action. |
     * | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency or other reasons. |
     * | 6 |Declined | Seller has marked the order as declined for lack of manual payment, or other reasons. |
     * | 7 | Awaiting Payment | Customer has completed checkout process, but payment has yet to be confirmed. |
     * | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup from a seller-specified location. |
     * | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting collection from a shipping provider. |
     * | 10 | Completed | Client has paid for their digital product and their file(s) are available for download. |
     * | 11 | Awaiting Fulfillment | Customer has completed the checkout process and payment has been confirmed. |
     * | 12 | Manual Verification Required | Order on hold while some aspect needs to be manually confirmed. |
     * | 13 | Disputed | Customer has initiated a dispute resolution process for the PayPal transaction that paid for the order. |
     * | 14 | Partially Refunded | Seller has partially refunded the order. |
     */
    get: operations['getOrderStatus'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/order_statuses/{status_id}': {
    /**
     * Returns a single order status.
     *
     * **Order Status Descriptions:**
     * |Status ID | Name  | Description |
     * |--|--|--|
     * | 0 | Incomplete  | An incomplete order happens when a shopper reached the payment page, but did not complete the transaction. |
     * | 1 | Pending |Customer started the checkout process, but did not complete it. |
     * | 2 | Shipped | Order has been shipped, but receipt has not been confirmed; seller has used the Ship Items action. |
     * | 3 | Partially Shipped | Only some items in the order have been shipped, due to some products being pre-order only or other reasons. |
     * | 4 | Refunded | Seller has used the Refund action. |
     * | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency or other reasons. |
     * | 6 |Declined | Seller has marked the order as declined for lack of manual payment, or other reasons. |
     * | 7 | Awaiting Payment | Customer has completed checkout process, but payment has yet to be confirmed. |
     * | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup from a seller-specified location. |
     * | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting collection from a shipping provider. |
     * | 10 | Completed | Client has paid for their digital product and their file(s) are available for download. |
     * | 11 | Awaiting Fulfillment | Customer has completed the checkout process and payment has been confirmed. |
     * | 12 | Manual Verification Required | Order on hold while some aspect needs to be manually confirmed. |
     * | 13 | Disputed | Customer has initiated a dispute resolution process for the PayPal transaction that paid for the order. |
     * | 14 | Partially Refunded | Seller has partially refunded the order. |
     */
    get: operations['getAOrderStatus'];
    parameters: {
      path: {
        store_hash: string;
        status_id: string;
      };
    };
  };
  '/stores/{store_hash}/v2/orders/{order_id}/taxes': {
    /**
     * Gets all order taxes using `order_id`.
     * Each tax applied to an order. This information can be useful for reporting purposes.
     * Pass in the query parameter `?details=true` to return extra details about order taxes.
     * `order_product_id` and `line_item_type` are also returned.
     *
     * All values are read-only.
     */
    get: operations['getOrderTaxes'];
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/orders/{order_id}/shipments': {
    /** Gets a list of all shipments on an order. */
    get: operations['getAllOrderShipments'];
    /**
     * Creates an *Order Shipment*. For more details, see [Shipping an Order](/api-docs/orders/orders-api-overview#shipping-an-order).
     *
     * **Required Fields**
     * *   order_address_id
     * *   items
     *
     * **Usage Notes**
     *
     * Presuming that a valid carrier code is used, a tracking link is generated if either `shipping_provider` or `tracking_carrier` is supplied alongside a tracking number. Providing only the tracking number will result in an unclickable text in the customer facing email.
     *
     * Acceptable values for `shipping_provider` include an empty string (`""`), auspost, canadapost, endicia, usps, fedex, royalmail, ups, upsready, upsonline, or shipperhq.
     *
     * Acceptable values for `tracking_carrier` include an empty string (`""`) or one of the valid tracking-carrier values viewable [here](https://github.com/bigcommerce/dev-docs/blob/development/assets/csv/tracking_carrier_values.csv) and downloadable as a .CSV file [here](https://raw.githubusercontent.com/bigcommerce/dev-docs/development/assets/csv/tracking_carrier_values.csv).
     */
    post: operations['createOrderShipments'];
    /** Deletes all shipments associated with an order. */
    delete: operations['deleteAllOrderShipments'];
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/orders/{order_id}/shipments/count': {
    /** Gets a count of the number of shipments that have been made for a single order. */
    get: operations['getCountShipments'];
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/orders/{order_id}/shipments/{shipment_id}': {
    /** Gets an order shipment. */
    get: operations['getOrderShipment'];
    /** Updates an existing shipment associated with an order. */
    put: operations['updateOrderShipment'];
    /** Deletes a shipment associated with an order. */
    delete: operations['deleteOrderShipment'];
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        /** Shipment ID. */
        shipment_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/orders/{order_id}/messages': {
    /** Gets the messages associated with an order. */
    get: operations['getOrderMessages'];
    parameters: {
      path: {
        /** ID of the order */
        order_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/orders/{order_id}/products/{product_id}': {
    /** Gets a product line item associated with the order. */
    get: operations['getAnOrderProduct'];
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        /** ID of the product. */
        product_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/orders/{order_id}/shipping_addresses/{id}': {
    /**
     * Gets a shipping address associated with an order.
     *
     * Returned in the response is shipping_quotes object. Please use the Get Shipping Quotes Endpoint. Using the response will return a 204 for the shipping quote.
     */
    get: operations['getAShippingAddress'];
    /**
     * Update a shipping address associated with an order.
     *
     * **Note**: Updating will NOT trigger the recalculation of shipping cost and tax
     */
    put: operations['updateAShippingAddress'];
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        id: string;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/orders/{order_id}/shipping_addresses/{shipping_address_id}/shipping_quotes': {
    /**
     * Gets all shipping quotes persisted on an order.
     *
     * This is a read only endpoint and the output can vary based on the shipping quote. A shipping quote can only be generated using the storefront at this time. Orders that are created in the control panel or using the API return a 204 for this endpoint since a shipping quote is not generated during that process.
     */
    get: operations['getShippingQuotes'];
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        /** Shipping address ID. */
        shipping_address_id: number;
        store_hash: string;
      };
    };
  };
}

export interface components {
  schemas: {
    /**
     * order_Resp
     * @description Order object returned in responses.
     */
    order_Resp: components['schemas']['order_RespOnly'] & components['schemas']['order_Shared'];
    /** ordersCount_Full */
    ordersCount_Full: {
      statuses?: components['schemas']['ordersCountStatus'][];
      /**
       * @description Total number of orders in the store.
       * @example 45
       */
      count?: number;
    };
    /** orderCoupons_Base */
    orderCoupons_Base: {
      /**
       * @description Numeric ID of the coupon code.
       * @example 3
       */
      id?: number;
      /**
       * @description Numeric ID of the associated coupon.
       * @example 1
       */
      coupon_id?: number;
      /**
       * @description Numeric ID of the associated order.
       * @example 120
       */
      order_id?: number;
      /**
       * @description Coupon code, as a string.
       * @example S2549JM0Y
       */
      code?: unknown;
      /**
       * Format: float
       * @description Amount of the discount. This information is returned as in integer. Dollar and percentage discounts will return the same. For example, $3 returns as '3' while 5% will return as 5. Check the discount type to see what type of discount is available.
       * @example 5
       */
      amount?: unknown;
      /**
       * Order Coupon Discount Type
       * @description 0: per_item_discount
       * 1: percentage_discount
       * 2: per_total_discount
       * 3: shipping_discount
       * 4: free_shipping
       * 5: promotions
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5;
      /**
       * @description The amount off the order the discount is worth. For example, if an order subtotal is $90 and the discount is $3 then it will return as 3.000. If the discount is
       * 3% then will return as 2.7000 or the amount of the order.  (Float, Float-As-String, Integer)
       * @example 2.7
       */
      discount?: number;
    };
    /** orderProducts */
    orderProducts: {
      /**
       * @description Numeric ID of this product within this order.
       * @example 25
       */
      id?: number;
      /**
       * @description Numeric ID of the associated order.
       * @example 120
       */
      order_id?: number;
      /**
       * @description Numeric ID of the product.
       * @example 20
       */
      product_id?: number;
      /**
       * @description Numeric ID of the associated order address.
       * @example 20
       */
      order_address_id?: number;
      /**
       * @description Alias for name_customer - The product name that is shown to customer in storefront.
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name?: string;
      /**
       * @description User-defined product code/stock keeping unit (SKU).
       * @example S-GREE
       */
      sku?: string;
      /**
       * @description Type of product.
       * @example physical
       */
      type?: 'physical' | 'digital';
      /**
       * @description The productâ€™s base price. (Float, Float-As-String, Integer)
       * @example 54.0000
       */
      base_price?: string;
      /**
       * @description The productâ€™s price excluding tax. (Float, Float-As-String, Integer)
       * @example 54.0000
       */
      price_ex_tax?: string;
      /**
       * @description The productâ€™s price including tax. (Float, Float-As-String, Integer)
       * @example 54.0000
       */
      price_inc_tax?: string;
      /**
       * @description Amount of tax applied to a single product.
       *
       * Price tax is calculated as:
       * `price_tax = price_inc_tax - price_ex_tax`
       *
       * (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      price_tax?: string;
      /**
       * @description Total base price. (Float, Float-As-String, Integer)
       * @example 54.0000
       */
      base_total?: string;
      /**
       * @description Total base price excluding tax. (Float, Float-As-String, Integer)
       * @example 54.0000
       */
      total_ex_tax?: string;
      /**
       * @description Total base price including tax. (Float, Float-As-String, Integer)
       * @example 54.0000
       */
      total_inc_tax?: string;
      /**
       * @description Total tax applied to products.
       * For example, if quantity if 2, base price is 5 and tax rate is 10%. price_tax will be $.50 and total_tax will be $1.00.
       *
       * If there is a manual discount applied total_tax is calcuted as the following:
       * `(price_ex_tax - discount)*tax_rate=total_tax`.
       * (Float, Float-As-String, Integer)
       * @example 0.5200
       */
      total_tax?: string;
      /**
       * @description Quantity of the product ordered.
       * @example 1
       */
      quantity?: number;
      /**
       * @description The productâ€™s cost price.  This can be set using the Catalog API. (Float, Float-As-String, Integer) Read Only
       * @example 0.0000
       */
      base_cost_price?: string;
      /**
       * @description The productâ€™s cost price including tax. (Float, Float-As-String, Integer)
       * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
       * @example 0.0000
       */
      cost_price_inc_tax?: string;
      /**
       * @description The products cost price excluding tax. (Float, Float-As-String, Integer)
       * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
       * @example 0.0000
       */
      cost_price_ex_tax?: string;
      /**
       * @description Weight of the product. (Float, Float-As-String, Integer)
       * @example 1
       */
      weight?: unknown;
      /**
       * @description Tax applied to the productâ€™s cost price. (Float, Float-As-String, Integer)
       * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
       * @example 54.0000
       */
      cost_price_tax?: string;
      /** @description Whether the product has been refunded. */
      is_refunded?: boolean;
      /**
       * @deprecated
       * @description The amount refunded from this transaction; always returns `0`. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      refunded_amount?: string;
      /** @description Numeric ID for the refund. */
      return_id?: number;
      /**
       * @description Name of gift-wrapping option.
       * @example null
       */
      wrapping_name?: string;
      /**
       * @description The value of the base wrapping cost. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      base_wrapping_cost?: string | number;
      /**
       * @description The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      wrapping_cost_ex_tax?: string;
      /**
       * @description The value of the wrapping cost, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      wrapping_cost_inc_tax?: string;
      /**
       * @description Tax applied to gift-wrapping option. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      wrapping_cost_tax?: string;
      /** @description Message to accompany gift-wrapping option. */
      wrapping_message?: string;
      /** @description Quantity of this item shipped. */
      quantity_shipped?: number;
      /**
       * @description Name of promotional event/delivery date.
       * @example null
       */
      event_name?: string | null;
      /**
       * Format: date
       * @description Date of the promotional event/scheduled delivery.
       */
      event_date?: string | null;
      /**
       * @description Fixed shipping cost for this product. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      fixed_shipping_cost?: string;
      /** @description Item ID for this product on eBay. */
      ebay_item_id?: string;
      /** @description Transaction ID for this product on eBay. */
      ebay_transaction_id?: string;
      /**
       * @description Numeric ID of the option set applied to the product.
       * @example 5
       */
      option_set_id?: number | null;
      /** @description ID of a parent product. */
      parent_order_product_id?: number | null;
      /** @description Whether this product is bundled with other products. */
      is_bundled_product?: boolean;
      /** @description Bin picking number for the physical product. */
      bin_picking_number?: string;
      /** @description Array of objects containing discounts applied to the product. */
      applied_discounts?: components['schemas']['orderProductAppliedDiscounts'][];
      /** @description Array of product option objects. */
      product_options?: components['schemas']['orderProductOptions'][];
      /** @description ID of the order in another system. For example, the Amazon Order ID if this is an Amazon order.This field can be updated in a /POST, but using a /PUT to update the order will return a 400 error. The field 'external_id' cannot be written to. Please remove it from your request before trying again. It can not be overwritten once set. */
      external_id?: string | null;
      /** @description Universal Product Code. Can be written to for custom products and catalog products. */
      upc?: string;
      /** @description Products `variant_id`. PUT or POST. This field is not available for custom products. */
      variant_id?: number;
      /**
       * @description The product name that is shown to customer in storefront.
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name_customer?: string;
      /**
       * @description The product name that is shown to merchant in Control Panel.
       * @example Towel Type 1
       */
      name_merchant?: string;
    };
    /**
     * orderCount
     * @example [object Object]
     */
    orderCount: {
      /** @example 27 */
      count?: number;
    };
    /** orderShippingAddress */
    orderShippingAddress: {
      /**
       * @description ID of this shipping address.
       * @example 1
       */
      id?: number;
      /**
       * @description ID of the order.
       * @example 100
       */
      order_id?: number;
      /**
       * @description The total number of items in the order.
       * @example 1
       */
      items_total?: number;
      /** @description The number of items that have been shipped. */
      items_shipped?: number;
      /**
       * @description The base value of the orderâ€™s items. (Float, Float-As-String, Integer)
       * @example 5.0000
       */
      base_cost?: string;
      /**
       * @description The value of the orderâ€™s items, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      cost_ex_tax?: string;
      /**
       * @description The value of the orderâ€™s items, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      cost_inc_tax?: string;
      /**
       * @description The tax amount on the order. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      cost_tax?: string;
      /**
       * @description The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)
       * @example 2
       */
      cost_tax_class_id?: number;
      /**
       * @description The base handling charge. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      base_handling_cost?: string;
      /**
       * @description The handling charge, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      handling_cost_ex_tax?: string;
      /**
       * @description The handling charge, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      handling_cost_inc_tax?: string;
      /** @example 0.0000 */
      handling_cost_tax?: string;
      /**
       * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
       * @example 2
       */
      handling_cost_tax_class_id?: number;
      /**
       * @description Numeric ID of the shipping zone.
       * @example 1
       */
      shipping_zone_id?: number;
      /**
       * @description Name of the shipping zone.
       * @example United States
       */
      shipping_zone_name?: string;
      form_fields?: components['schemas']['formFields'][];
      shipping_quotes?: components['schemas']['shippingQuotes_Resource'];
    } & components['schemas']['shippingAddress_Base'];
    /** orderTaxes_Base */
    orderTaxes_Base: {
      /**
       * @description The unique numeric identifier of the taxes object.
       * @example 1
       */
      id?: number;
      /**
       * @description The unique numeric identifier of the order to which the tax was applied. NOTE: Not included if the store was using the automatic tax feature.
       * @example 129
       */
      order_id?: number;
      /**
       * @description The unique numeric identifier of the order address object associated with the order. NOTE: Not included if the store was using the automatic tax feature.
       * @example 29
       */
      order_address_id?: number;
      /**
       * @description The unique numeric identifier of the tax rate.
       * @example 1
       */
      tax_rate_id?: number;
      /** @description The unique numeric identifier of the tax class object. NOTE: Will be 0 if automatic tax was enabled, or if the default tax class was used. */
      tax_class_id?: number;
      /**
       * @description The name of the tax class object.
       * @example "State Tax"
       */
      name?: string;
      /**
       * @description The name of the type of tax that was applied. NOTE: will be "Automatic Tax" if automatic tax was enabled. Will be "API Tax Override" if the order was created with V2 Orders API.
       * @example Gift Wrapping
       */
      class?: string;
      /**
       * @description The tax rate.  The priority order in which the tax is applied (Float, Float-As-String, Integer)
       * @example 8.0000
       */
      rate?: string;
      /** @description The order in which the tax is applied. */
      priority?: number;
      /**
       * @description The amount of tax calculated on the order.   (Float, Float-As-String, Integer)
       * @example 1.5200
       */
      priority_amount?: string;
      /**
       * @description (Float, Float-As-String, Integer)
       * @example 1.5200
       */
      line_amount?: string;
      /** @description If the `line_item_type` is `item` or `handling` then this field will be the order product id. Otherwise the field will return as null. */
      order_product_id?: string;
      /** @description Type of tax on item. */
      line_item_type?: 'item' | 'shipping' | 'handling' | 'gift-wrapping';
    };
    /** orderShipment */
    orderShipment: {
      /**
       * @description Shipment ID.
       * @example 1
       */
      id?: number;
      /**
       * @description ID of the order associated with this shipment.
       * @example 120
       */
      order_id?: number;
      /**
       * @description ID of this orderâ€™s customer.
       * @example 5
       */
      customer_id?: number;
      /**
       * @description ID of the desired `shipping_address` associated with the shipment.
       * @example 20
       */
      order_address_id?: number;
      /** @description Creation date for the shipment. */
      date_created?: string;
      /**
       * @description Tracking number of the shipment.
       * @example w4se4b6ASFEW4T
       */
      tracking_number?: string;
      /**
       * @description Additional information to describe the method of shipment (ex. Standard, Ship by Weight, Custom Shipment). Can be used for live quotes from certain shipping providers.
       * If different from `shipping_provider`, `shipping_method` should correspond to `tracking_carrier`.
       * @example Ship by Weight
       */
      shipping_method?: string;
      /** @description Enum of the BigCommerce shipping-carrier integration/module. */
      shipping_provider?:
        | 'auspost'
        | 'canadapost'
        | 'endicia'
        | 'usps'
        | 'fedex'
        | 'ups'
        | 'upsready'
        | 'upsonline'
        | 'shipperhq'
        | ' ';
      /**
       * Tracking Carrier
       * @description Tracking carrier for the shipment.
       * Acceptable values include an empty string (`""`) or one of the valid tracking-carrier values that you can view and download as a .CSV file [here](https://github.com/bigcommerce/dev-docs/blob/master/assets/csv/tracking_carrier_values.csv).
       */
      tracking_carrier?: string;
      /** @description Returns a tracking link from the shipping service. */
      tracking_link?: string;
      /** @description Comments the shipper wishes to add. */
      comments?: string;
      billing_address?: components['schemas']['billingAddress_Base'];
      shipping_address?: components['schemas']['shippingAddress_Base'];
      /** @description The items in the shipment. This object has the following members, all integer: order_product_id (required), quantity (required), product_id (read-only). A sample items value might be: [ {"order_product_id":16,"product_id": 0,"quantity":2} ] */
      items?: {
        /** @example 5 */
        order_product_id?: number;
        /** @example 87 */
        product_id?: number;
        /** @example 2 */
        quantity?: number;
      }[];
    };
    /**
     * billingAddress_Full
     * @description Required to create an order.
     */
    billingAddress_Full: components['schemas']['billingAddress_Base'] & {
      form_fields?: components['schemas']['formFields'][];
    };
    /** products_Resource */
    products_Resource: {
      /** @example https://api.bigcommerce.com/stores/{store_hash}/v2/orders/129/products */
      url?: string;
      /** @example /orders/129/products */
      resource?: string;
    };
    /** shippingAddress_Resource */
    shippingAddresses_Resource: {
      /**
       * @description URL of the shipping address for api requests.
       * @example https://api.bigcommerce.com/stores/{store_hash}/v2/orders/129/shippingaddresses
       */
      url?: string;
      /** @example /orders/129/shippingaddresses */
      resource?: string;
    };
    /** coupons_Resource */
    coupons_Resource: {
      /**
       * @description URL of the coupons for api requests.
       * @example https://api.bigcommerce.com/stores/{store_hash}/v2/orders/129/coupons
       */
      url?: string;
      /**
       * @description resource of the coupons.
       * @example /orders/129/coupons
       */
      resource?: string;
    };
    /**
     * orderProductAppliedDiscounts
     * @description When applying a manual discount to an order (not a product level discount), the discount is distributed across products in proportion to the products price.
     * `(total_manual_discount*price_ex_tax)/subtotal_ex_tax`
     */
    orderProductAppliedDiscounts: {
      /**
       * @description Name of the coupon applied to order.
       * @example total-coupon
       */
      id?: string;
      /**
       * @description Amount of the discount.(Float, Float-As-String, Integer)
       * @example 1.2100
       */
      amount?: string;
      /**
       * @description Name of the coupon.
       * `Manual Discount` when creating a manual discount.
       * @example $5 off
       */
      name?: string;
      /**
       * @description Coupon Code.
       * There is no code when creating a manual discount.
       * @example S2549JM0Y
       */
      code?: unknown;
      /** @description Determines if the discount if discount was applied at the Order or Product level. Read Only. */
      target?: 'order' | 'product';
    };
    /** orderProductOptions */
    orderProductOptions: {
      /**
       * @description The unique numerical ID of the option; increments sequentially.
       * @example 16
       */
      id?: number;
      /**
       * @description Numeric ID of the associated option.
       * @example 18
       */
      option_id?: number;
      /** @example 53 */
      order_product_id?: number;
      /**
       * @description Numeric ID of an option applied to the product from a list of options available to the product.
       * @example 120
       */
      product_option_id?: number;
      /**
       * @description Alias for display_name_customer. The product option name that is shown to customer in the storefront.
       * @example Size
       */
      display_name?: string;
      /**
       * @description Alias for display_value_customer. The product option value that is shown to customer in storefront.
       * @example S
       */
      display_value?: string;
      /**
       * @description This value is used to access the Customer File Upload.
       * @example 70
       */
      value?: string;
      /**
       * @description Option Type
       * @example Checkbox
       */
      type?:
        | 'Checkbox'
        | 'Date field'
        | 'File Upload'
        | 'Multi-line text field'
        | 'Multiple choice'
        | 'Product Pick List'
        | 'Swatch'
        | 'Text field';
      /**
       * @description The optionâ€™s name, as used internally. Must be unique.
       * @example Apparel sizes
       */
      name?: string;
      /**
       * @description How it is displayed on the storefront. Examples include Drop-down, radio buttons, or rectangles.
       * @example Rectangle
       */
      display_style?: string;
      /**
       * @description The product option name that is shown to customer in storefront.
       * @example couleur
       */
      display_name_customer?: string;
      /**
       * @description The product option name that is shown to merchant in Control Panel.
       * @example color
       */
      display_name_merchant?: string;
      /**
       * @description The product option value that is shown to customer in storefront.
       * @example bleu
       */
      display_value_customer?: string;
      /**
       * @description The product option value that is shown to merchant in Control Panel.
       * @example blue
       */
      display_value_merchant?: string;
    };
    /**
     * formFields
     * @description Read-Only. If you have required address form fields they will need to be set as optional before creating an order with the API.
     */
    formFields: {
      /**
       * @description Read-Only. If you have required address form fields they will need to be set as optional before creating an order with the API.
       * @example License Id
       */
      name?: string;
      /**
       * @description Read-Only. If you have required address form fields they will need to be set as optional before creating an order with the API.
       * @example 123BAF
       */
      value?: string;
    };
    /** orderMessages */
    orderMessages: {
      id?: number;
      order_id?: number;
      staff_id?: number;
      customer_id?: number;
      type?: string;
      subject?: string;
      message?: string;
      status?: string;
      is_flagged?: boolean;
      date_created?: string;
      customer?: { [key: string]: unknown };
    }[];
    /** shippingQuotes_Resource */
    shippingQuotes_Resource: {
      /**
       * @description This URL will return a 204 for shipping quotes. To return shipping quotes:
       * `/shipping_addresses/shipping_address_id/shipping_quotes`
       * @example https://api.bigcommerce.com/stores/{store_hash}/v2/orders/163/shippingaddresses/64/shippingquotes
       */
      url?: string;
      /**
       * @description This URL will return a 204 for shipping quotes. To return shipping quotes:
       * `/shipping_addresses/shipping_address_id/shipping_quotes`
       * @example orders/163/shippingaddresses/64/shippingquotes
       */
      resource?: string;
    };
    /** shippingQuotes_Base */
    shippingQuotes_Base: {
      /**
       * @description ID of the shipping quote.
       * @example 24
       */
      id?: string;
      /**
       * @description uuid of the shipping quote.
       * @example a72acc8d-504b-4a40-8534-7c54d997ed59
       */
      uuid?: string;
      /**
       * Format: date-time
       * @description Time the order was created in RFC 2822 format.
       */
      timestamp?: string;
      /**
       * @description ID of the shipping provider.
       * @example bcstatic
       */
      shipping_provider_id?: string;
      /** @description This can vary based on the shipping provider. Manual shipping methods such as fixed will return an empty array. Shipping providers such as UPS will return an object with the shipping information. Since the shipping quote is tied to a shipping address only one quote will return in the response. */
      shipping_provider_quote?: unknown[];
      /**
       * @description Code of the shipping provider.
       * @example shipping_byweight
       */
      provider_code?: string;
      /** @description Code of the shipping carrier. */
      carrier_code?: string;
      /** @description Type of delivery. This can vary based on shipping quote. */
      rate_code?: string;
      /** @description This can vary based on shipping quote. */
      rate_id?: string;
      /** @description Shipping method ID */
      method_id?: number;
    };
    /** orderShipment_Post */
    orderShipment_Post: {
      /**
       * @description ID of the desired `shipping_address` associated with the shipment.
       * @example 20
       */
      order_address_id?: number;
      /**
       * @description Tracking number of the shipment.
       * @example w4se4b6ASFEW4T
       */
      tracking_number?: string;
      /**
       * @description Additional information to describe the method of shipment (ex. Standard, Ship by Weight, Custom Shipment). Can be used for live quotes from certain shipping providers.
       * If different from `shipping_provider`, `shipping_method` should correspond to `tracking_carrier`.
       *
       * @example Ship by Weight
       */
      shipping_method?: string;
      /** @description Enum of the BigCommerce shipping-carrier integration/module. */
      shipping_provider?:
        | 'auspost'
        | 'canadapost'
        | 'endicia'
        | 'usps'
        | 'fedex'
        | 'ups'
        | 'upsready'
        | 'upsonline'
        | 'shipperhq';
      /**
       * Tracking Carrier
       * @description Tracking carrier for the shipment.
       * Acceptable values include an empty string (`""`) or one of the valid tracking-carrier values viewable [here](https://docs.google.com/spreadsheets/d/1w9c_aECSCGyf-oOrvGeUniDl-ARGKemfZl0qSsav8D4/pubhtml?gid=0&single=true) and downloadable as a .CSV file [here](https://docs.google.com/spreadsheets/d/1mTueEynfcEmwsU2y2Jd2MX-8GKwNZrmlRMBcIElg9aY/pub?gid=0&single=true&output=csv).
       */
      tracking_carrier?: string;
      /** @description Comments the shipper wishes to add. */
      comments?: string;
      /** @description The items in the shipment. This object has the following members, all integer: order_product_id (required), quantity (required), product_id (read-only). A sample items value might be: [ {"order_product_id":16,"product_id": 0,"quantity":2} ] */
      items?: {
        /** @example 5 */
        order_product_id?: number;
        /** @example 2 */
        quantity?: number;
      }[];
    };
    /** orderShipment_Put */
    orderShipment_Put: {
      /**
       * @description ID of the desired `shipping_address` associated with the shipment.
       * @example 20
       */
      order_address_id?: number;
      /**
       * @description Tracking number of the shipment.
       * @example w4se4b6ASFEW4T
       */
      tracking_number?: string;
      /**
       * @description Additional information to describe the method of shipment (ex. Standard, Ship by Weight, Custom Shipment). Can be used for live quotes from certain shipping providers.
       * If different from `shipping_provider`, `shipping_method` should correspond to `tracking_carrier`.
       *
       * @example Ship by Weight
       */
      shipping_method?: string;
      /** @description Enum of the BigCommerce shipping-carrier integration/module. */
      shipping_provider?:
        | 'auspost'
        | 'canadapost'
        | 'endicia'
        | 'usps'
        | 'fedex'
        | 'ups'
        | 'upsready'
        | 'upsonline'
        | 'shipperhq';
      /**
       * Tracking Carrier
       * @description Tracking carrier for the shipment.
       * Acceptable values include an empty string (`""`) or one of the valid tracking-carrier values viewable and downloadable as a .CSV file [here](https://github.com/bigcommerce/dev-docs/blob/master/assets/csv/tracking_carrier_values.csv).
       */
      tracking_carrier?: string;
      /** @description Comments the shipper wishes to add. */
      comments?: string;
    };
    /** orderStatus_Base */
    orderStatus_Base: {
      /** @description The id of the type of order status. */
      id?: number;
      /**
       * @description Name of the type of order status.
       * @example Incomplete
       */
      name?: string;
      /**
       * @description System name of the type of order status.
       * @example Incomplete
       */
      system_label?: string;
      /**
       * @description Custom order status label given in the Control Panel.
       * @example Incomplete- Waiting on Shipment
       */
      custom_label?: string;
      /**
       * @description System description of the order status.
       * @example An incomplete order happens when a shopper reached the payment page, but did not complete the transaction.
       */
      system_description?: string;
    };
    /** ordersCountStatus */
    ordersCountStatus: components['schemas']['orderStatus_Base'] & {
      /**
       * @description Number of orders that exist with this status.
       * @example 6
       */
      count?: number;
      /** @description The sort order of the order status from the Control Panel. */
      sort_order?: number;
    };
    /**
     * order_Shared
     * @description Order properties used in `PUT` and `POST` requests and responses.
     */
    order_Shared: {
      /**
       * @description The value of the base handling cost. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      base_handling_cost?: string;
      /**
       * @description The value of the base shipping cost. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      base_shipping_cost?: string;
      /**
       * @description The value of the base wrapping cost. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      base_wrapping_cost?: string | number;
      billing_address?: components['schemas']['billingAddress_Full'];
      /**
       * @description Shows where the order originated. The channel_id will default to 1.
       * @example 1
       */
      channel_id?: number;
      customer_id?: number;
      /**
       * @description Message that the customer entered (number, options) -o the `Order Comments` box during checkout.
       * @example Thank you
       */
      customer_message?: string;
      /** @description The date the order was created, formatted in the RFC-2822 standard. You set this attribute on Order creation (POST) to support the migration of historical orders. If you do not provide a value, then it will default to the current date/time. e.g., `Tue, 20 Nov 2012 00:00:00 +0000` */
      date_created?: string;
      /** @description The currency code of the transactional currency the shopper pays in; writeable when multi-currency is enabled. */
      default_currency_code?: string;
      /**
       * @description Amount of discount for this transaction. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      discount_amount?: string;
      /**
       * @description If the order was placed through eBay, the eBay order number will be included. Otherwise, the value will be `0`.
       * @example 0
       */
      ebay_order_id?: string;
      /** @description The order ID in another system, such as the Amazon Order ID if this is an Amazon order. After setting it, you can not write to or update the `external_id`. You can update this field using a /POST request, but a /PUT request to update the order will return a 400 error.  Please remove it from your request before trying again. */
      external_id?: string | unknown;
      /** @description The merchant ID represents an upstream order from an external system. It is the source of truth for orders. After setting it, you can not write to or update the `external_merchant_id`. For example, you can update the Facebook page ID in a /POST request, but a /PUT request to update the order will return a 400 error. Please remove it from your request before trying again. */
      external_merchant_id?: string | unknown;
      /**
       * @description This value identifies an external system that generated the order and submitted it to BigCommerce with the the Orders API.
       * * When supplying the value, we recommend combining the type of system and vendor, e.g., ERP (Acumatica) or POS (Square).
       * * If you are migrating historical orders processed on another eCommerce platform to BigCommerce, supply the following code as the value: M-MIG. This code will exclude historical orders from the storeâ€™s GMV/order count, which factors into pricing.
       * * If you do not provide a value, then it will default to null.
       * @example null
       */
      external_source?: string | unknown;
      /**
       * @description The full name of the country where the customer made the purchase, based on the IP.
       * @example United States
       */
      geoip_country?: string;
      /**
       * @description The country where the customer made the purchase, in ISO2 format, based on the IP.
       * @example US
       */
      geoip_country_iso2?: string;
      /**
       * @description The value of the handling cost, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      handling_cost_ex_tax?: string;
      /**
       * @description The value of the handling cost, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      handling_cost_inc_tax?: string;
      /**
       * @description IPv4 Address of the customer, if known.
       *
       * Note: You can set either `ip_address` or `ip_address_v6`. Setting the `ip_address` value will reset the `ip_address_v6` value and vice versa.
       * @example 12.345.678.910
       */
      ip_address?: string;
      /**
       * @description IPv6 Address of the customer, if known.
       *
       * Note: You can set either `ip_address` or `ip_address_v6`. Setting the `ip_address_v6` value will reset the `ip_address` value and vice versa.
       * @example 2001:db8:3333:4444:5555:6666:7777:8888
       */
      ip_address_v6?: string;
      /** @description Indicates whether the order was deleted (archived). Set to to true, to archive an order. */
      is_deleted?: boolean;
      /** @description The number of items that have been shipped. */
      items_shipped?: number;
      /**
       * @description The total number of items in the order.
       * @example 1
       */
      items_total?: number;
      /** @description Whether this is an order for digital products. */
      order_is_digital?: boolean;
      /** @description The payment method for this order. Can be one of the following: `Manual`, `Credit Card`, `cash`, `Test Payment Gateway`, etc. */
      payment_method?: 'Credit Card' | 'Cash' | 'Test Payment Gateway' | 'Manual';
      /** @description The external Transaction ID/Payment ID within this orderâ€™s payment provider (if a payment provider was used). */
      payment_provider_id?: unknown;
      /**
       * @description The amount refunded from this transaction; always returns `0`. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      refunded_amount?: string;
      /**
       * @description The value of shipping cost, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      shipping_cost_ex_tax?: string;
      /**
       * @description The value of shipping cost, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      shipping_cost_inc_tax?: string;
      /**
       * @description Any additional notes for staff.
       * @example Send Saturday
       */
      staff_notes?: string;
      /** @description The status ID of the order. */
      status_id?: number;
      /**
       * @description Override value for subtotal excluding tax. If specified, the field `subtotal_inc_tax` is also required. (Float, Float-As-String, Integer)
       * @example 225.0000
       */
      subtotal_ex_tax?: string;
      /**
       * @description Override value for subtotal including tax. If specified, the field `subtotal_ex_tax` is also required. (Float, Float-As-String, Integer)
       * @example 225.0000
       */
      subtotal_inc_tax?: string;
      /**
       * @description BasicTaxProvider - Tax is set to manual and order is created in the store.
       *
       * AvaTaxProvider - Tax is set to automatic and order is created in the store. Used for Avalara.
       *
       * "" (empty string) - The order is created with the API, or the tax provider is unknown.
       */
      tax_provider_id?: 'BasicTaxProvider' | 'AvaTaxProvider' | '';
      /**
       * @description The customerâ€™s locale.
       * @example en
       */
      customer_locale?: string;
      /**
       * @description Override value for the total, excluding tax. If specified, the field `total_inc_tax` is also required. (Float, Float-As-String, Integer)
       * @example 225.0000
       */
      total_ex_tax?: string;
      /**
       * @description Override value for the total, including tax. If specified, the field `total_ex_tax` is also required. (Float, Float-As-String, Integer)
       * @example 225.0000
       */
      total_inc_tax?: string;
      /**
       * @description The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      wrapping_cost_ex_tax?: string;
      /**
       * @description The value of the wrapping cost, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      wrapping_cost_inc_tax?: string;
    };
    /** billingAddress_Base */
    billingAddress_Base: {
      /** @example Jane */
      first_name?: string;
      /** @example Doe */
      last_name?: string;
      company?: string;
      /** @example 123 Main Street */
      street_1?: string;
      street_2?: string;
      /** @example Austin */
      city?: string;
      /** @example TX */
      state?: string;
      /**
       * @description The billing address must include the zip code. The zip code must be two or more characters.
       * @example 12345
       */
      zip: string;
      /** @example United States */
      country?: string;
      /** @example US */
      country_iso2?: string;
      phone?: string;
      /** @example janedoe@example.com */
      email?: string;
    };
    /**
     * shippingAddress_Base
     * @description Shipping Address properties common to all requests and responses.
     */
    shippingAddress_Base: {
      /** @example Jane */
      first_name?: string;
      /** @example Doe */
      last_name?: string;
      company?: string;
      /**
       * @description Street address (first line).
       * @example 123 Main Street
       */
      street_1?: string;
      /** @description Street address (second line). */
      street_2?: string;
      /** @example Austin */
      city?: string;
      /** @example Texas */
      state?: string;
      /**
       * @description Zip or postal code, as a string.
       * @example 12345
       */
      zip?: string;
      /** @example United States */
      country?: string;
      /**
       * @description 2-letter ISO Alpha-2 code for the country.
       * @example US
       */
      country_iso2?: string;
      /** @description Recipientâ€™s telephone number. */
      phone?: string;
      /**
       * @description Recipientâ€™s email address.
       * @example janedoe@example.com
       */
      email?: string;
      /**
       * @description Text code identifying the BigCommerce shipping module selected by the customer.
       * @example Free Shipping
       */
      shipping_method?: string;
    };
    /**
     * order_RespOnly
     * @description Properties that are only for order response bodies.
     */
    order_RespOnly: {
      /**
       * @description Read-only. The ID of the order.
       * @example 118
       */
      id?: number;
      /** @description A read-only value representing the last modification of the order. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822 */
      date_modified?: string;
      /** @description A read-only value representing the date of shipment. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822 */
      date_shipped?: string;
      /**
       * @description The cart ID from which this order originated, if applicable. Correlates with the Cart API. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
       * @example a8458391-ef68-4fe5-9ec1-442e6a767364
       */
      cart_id?: string;
      /**
       * @description The status will include one of the (string, options) - values defined under Order Statuses. This value is read-only. Do not attempt to modify or set this value in a POST or PUT operation.
       * @example Awaiting Fulfillment
       */
      status?: string;
      /**
       * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      subtotal_tax?: string;
      /**
       * @description A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      shipping_cost_tax?: string;
      /**
       * @description Shipping-cost tax class. A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
       * @example 2
       */
      shipping_cost_tax_class_id?: number;
      /**
       * @description A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      handling_cost_tax?: string;
      /**
       * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
       * @example 2
       */
      handling_cost_tax_class_id?: number;
      /**
       * @description A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      wrapping_cost_tax?: string;
      /**
       * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
       * @example 3
       */
      wrapping_cost_tax_class_id?: number;
      /** @description A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. */
      payment_status?:
        | 'authorized'
        | 'captured'
        | 'capture pending'
        | 'declined'
        | 'held for review'
        | 'paid'
        | 'partially refunded'
        | 'pending'
        | 'refunded'
        | 'void'
        | 'void pending';
      /**
       * @description Represents the store credit that the shopper has redeemed on this individual order. This is a read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      store_credit_amount?: string;
      /**
       * @description A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      gift_certificate_amount?: string;
      /**
       * @description The display currency ID. Depending on the currency selected, the value can be different from the transactional currency. A read-only value. Do not pass in a POST or PUT. In v2 display currency is set to the transactional currency, 'default_currency_id'.
       * @example 1
       */
      currency_id?: number;
      /**
       * @description The currency code of the display currency used to present prices to the shopper on the storefront. Depending on the currency selected, the value can be different from the transactional currency. A read-only value. Do not pass in a POST or PUT.
       * @example USD
       */
      currency_code?: string;
      /**
       * @description The exchange rate between the storeâ€™s default currency and the display currency. A read-only value. Do not pass in a POST or PUT. For orders created using the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1). (Float, Float-As-String, Integer)
       * @example 1.0000000000
       */
      currency_exchange_rate?: string;
      /**
       * @description The transactional currency ID. A read-only value. Do not pass in a POST or PUT.
       * @example 1
       */
      default_currency_id?: number;
      /**
       * @description The currency code of the transactional currency the shopper pays in.
       * @example EUR
       */
      default_currency_code?: string;
      /**
       * @description The currency code of the store's default currency.
       * @example USD
       */
      store_default_currency_code?: string;
      /**
       * @description The exchange rate between the store's default currency and the transactional currency used in the order.
       * @example 100.0000000000
       */
      store_default_to_transactional_exchange_rate?: string;
      /**
       * @description A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
       * @example 5.0000
       */
      coupon_discount?: string;
      /** @description The number of shipping addresses associated with this transaction. A read-only value. Do not pass in a POST or PUT. */
      shipping_address_count?: number;
      /** @description Indicates whether the shopper has selected an opt-in check box (on the checkout page) to receive emails. A read-only value. Do not pass in a POST or PUT. */
      is_email_opt_in?: boolean;
      /**
       * @description Orders submitted from the storeâ€™s website will include a `www` value. Orders submitted with the API will be set to `external`. This value is read-only. Do not pass in a POST or PUT.
       * @example www
       */
      order_source?: string;
      products?: components['schemas']['products_Resource'];
      shipping_addresses?: components['schemas']['shippingAddresses_Resource'];
      coupons?: components['schemas']['coupons_Resource'];
      /**
       * @description The staus ID of the order.
       * @example 7
       */
      status_id?: number;
    };
    /**
     * orderCustomProduct_Put
     * @description To `add` a custom product to an existing order, don't include `id` in the payload. At least one of these fields `name`, `name_customer`, or `name_merchant` must be provided with non-empty value.
     *      To `update` an order product line, `id` is required. The payload should only contain the fields that needs to be updated. Those fields that are omitted will not be changed.
     *      Note:
     *      - Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer`, and `xxx_merchant`.
     *      - `name` and `name_customer` always hold the same value, updating either `name` or `name_customer` will change the value for both of those fields.
     *      - If both fields `name` and `name_customer` are present, they must have same value.
     *      - When updating an existing order product, if both fields `name` and `name_customer` are omitted from the request, they will not be updated.
     *      - When updating an existing order product, if `name_merchant` is omitted from the request, it will not be updated.
     *      - When adding product, if `name_merchant` is omitted, it will be set to the value of `name` (or `name_customer`).
     *      - When adding a new product to an existing order, if both fields `name` and `name_customer` are omitted, they will be set to the value of `name_merchant`.
     */
    orderCustomProduct_Put: {
      /**
       * @description Alias for name_customer. The product name that is shown to customer in storefront.
       *
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name: string;
      /**
       * @description The product name that is shown to customer in storefront.
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name_customer?: string;
      /**
       * @description The product name that is shown to merchant in control panel.
       * @example Towel Type 1
       */
      name_merchant?: string;
      quantity: number;
      price_ex_tax: number;
      price_inc_tax: number;
      sku?: string;
      upc?: string;
      /** @description ID of the product line. */
      id?: number;
    };
    /**
     * orderCatalogProduct_Put
     * @description To `add` product to an existing order, don't include `id` in the payload. And note that the `product_options` are required if adding a product with variants.
     * To `update` an order product line, `id` is required. The payload should only contain the fields that needs to be updated. Those fields that are omitted will not be changed.
     * Note:
     * - `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
     * - If both fields `xxx` and `xxx_customer` are present, they must have same value.
     * - Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer`, and `xxx_merchant`.
     * - When updating and existing order product without changing the variant, product or product options, if `xxx_merchant` is not part of the request it will not be updated.
     * - When updating an existing order product, if both fields `xxx` and `xxx_customer` not part of the request they will not be updated.
     * - When adding a product to and existing order or changing the variant, product, or product options.
     * - Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer, and `xxx_merchant` if `xxx_merchant` is omitted, it will default to have the catalog value.
     * - If both fields `xxx` and `xxx_customer` are omitted from the request, they will default to the catalog value.
     */
    orderCatalogProduct_Put: {
      /** @description The order product `id`. To add a product to an existing order, don't include `id` in the payload. `id` is required when updating an order product. */
      id?: number;
    } & components['schemas']['orderCatalogProduct_Post'];
    /**
     * orderCatalogProduct_Post
     * @description Note:
     * - `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
     * - If both fields `xxx` and `xxx_customer` are present, they must have same value.
     * - Empty strings `''` and `null` are invalid for `xxx` and `xxx_customer, and `xxx_merchant`.
     * - `xxx`, `xxx_customer`, and `xxx_merchant` default to the value from `catalog` if not supplied in the request.
     */
    orderCatalogProduct_Post: {
      product_id?: number;
      /**
       * @description Alias for `name_customer`. The product name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name?: string;
      /**
       * @description The product name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name_customer?: string;
      /**
       * @description The product name that is shown to merchant in control panel.
       * @example Towel Type 1
       */
      name_merchant?: string;
      /** @description List of product variant options and modifiers. `product_options` are required when adding a product with variants and not specifying the `variant_id`, or when products have mandatory modifiers. */
      product_options?: {
        /** @description Numeric ID of an option applied to the product from a list of options available to the product. This field has the same value as `product_option_id` when [retrieving products in an order](/api-reference/store-management/orders/order-products/getallorderproducts). */
        id?: number;
        /**
         * @description Depending on the option type, value can be one of the following:
         * - The variant option value id or the modifier value id for modifier types with a list of defined values, such as drop down or checkbox modifiers.
         * - The modifier value for modifier types without a list of defined values, such as text field or date field modifiers.
         *
         * Notes:
         * - The API does not currently support the following option types:
         *   - File upload
         *   - Pick list
         * - For date modifiers use either the `YYYY-MM-DDThh:mm:ssÂ±hh:mm` or the `YYYY-MM-DD` ISO-8601 formats. The date field modifier values are saved and retuned as timestamps. For values entered using the YYYY-MM-DD format, the store timezone is used when creating the timestamp.
         * - For multi-line text field modifiers, use the `\n` characters for separating the lines.
         */
        value?: string;
        /**
         * @description Alias for display_name_customer. The product option name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
         * @example couleur
         */
        display_name?: string;
        /**
         * @description The product option name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
         * @example couleur
         */
        display_name_customer?: string;
        /**
         * @description The product option name that is shown to merchant in Control Panel.
         * @example color
         */
        display_name_merchant?: string;
        /**
         * @description Alias for display_value_customer. The product option value that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
         * @example bleu
         */
        display_value?: string;
        /**
         * @description The product option value that is shown to merchant in Control Panel.
         * @example blue
         */
        display_value_merchant?: string;
        /**
         * @description The product option value that is shown to customer in storefront.`xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
         * @example bleu
         */
        display_value_customer?: string;
      }[];
      quantity?: number;
      price_inc_tax?: number;
      price_ex_tax?: number;
      upc?: string;
      /** @description "" */
      variant_id?: number;
      wrapping_name?: string;
      wrapping_message?: string;
      wrapping_cost_ex_tax?: number;
      wrapping_cost_inc_tax?: number;
    };
    /**
     * orderCustomProduct_Post
     * @description At least one of these fields `name`, `name_customer`, or `name_merchant` must be provided with non-empty value.
     * Note: `name` and `name_customer` always hold the same value, updating either `name` or `name_customer` will change value for both of those fields.
     * If both fields `name` and `name_customer` are present, they must have the same value.
     * Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer`, and `xxx_merchant`.
     * If both fields `name` and `name_customer` are omitted, they will be populated by the `name_merchant` value.
     * If field `name_merchant` is omitted it will be populated by the value of `name` (or `name_customer`).
     */
    orderCustomProduct_Post: {
      /**
       * @description Alias for name_customer. The product name that is shown to customer in storefront.
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name: string;
      /**
       * @description The product name that is shown to customer in storefront.
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name_customer?: string;
      /**
       * @description The product name that is shown to merchant in control panel.
       * @example Towel Type 1
       */
      name_merchant?: string;
      quantity: number;
      price_inc_tax: number;
      price_ex_tax: number;
      upc?: string;
      sku?: string;
    };
    /** order_Put */
    order_Put: {
      products?: (Partial<components['schemas']['orderCatalogProduct_Put']> &
        Partial<components['schemas']['orderCustomProduct_Put']>)[];
      shipping_addresses?: components['schemas']['shippingAddress_Base'];
    } & components['schemas']['order_Shared'];
    /**
     * order_Post
     * @description Products and Billing address only required for POST operation.
     */
    order_Post: {
      products?: (Partial<components['schemas']['orderCustomProduct_Post']> &
        Partial<components['schemas']['orderCatalogProduct_Post']>)[];
      shipping_addresses?: components['schemas']['shippingAddress_Base'][];
    } & components['schemas']['order_Shared'];
  };
  responses: {
    /** Get All Order Status Collection Response. */
    orderStatusCollection_Resp: {
      content: {
        'application/json': components['schemas']['orderStatus_Base'][];
      };
    };
    orderStatus_Resp: {
      content: {
        'application/json': components['schemas']['orderStatus_Base'];
      };
    };
    orderCollection_Resp: {
      content: {
        'application/json': components['schemas']['order_Resp'][];
      };
    };
    /** Order Countr response collection. */
    ordersCount_Resp: {
      content: {
        'application/json': components['schemas']['ordersCount_Full'];
      };
    };
    /** Order Response. */
    order_Resp: {
      content: {
        'application/json': components['schemas']['order_Resp'];
      };
    };
    orderCouponsCollection_Resp: {
      content: {
        'application/json': components['schemas']['orderCoupons_Base'][];
      };
    };
    orderMessagesCollection_Resp: {
      content: {
        'application/json': components['schemas']['orderMessages'];
      };
    };
    orderProductsCollection_Resp: {
      content: {
        'application/json': components['schemas']['orderProducts'][];
      };
    };
    orderProductLineItem_Resp: {
      content: {
        'application/json': components['schemas']['orderProducts'];
      };
    };
    orderShipmentCollection_Resp: {
      content: {
        'application/json': components['schemas']['orderShipment'][];
      };
    };
    orderShipment_Resp: {
      content: {
        'application/json': components['schemas']['orderShipment'];
      };
    };
    orderCount_Resp: {
      content: {
        'application/json': components['schemas']['orderCount'];
      };
    };
    orderShippingAddressCollection_Resp: {
      content: {
        'application/json': components['schemas']['orderShippingAddress'][];
      };
    };
    orderShippingAddress_Resp: {
      content: {
        'application/json': components['schemas']['orderShippingAddress'];
      };
    };
    /** This response can vary depending on the shipping provider. */
    shippingQuotes_Resp: {
      content: {
        'application/json': components['schemas']['shippingQuotes_Base'];
        'Fixed Shipping': unknown;
        'UPS Example': unknown;
      };
    };
    orderTaxes_Resp: {
      content: {
        'application/json': components['schemas']['orderTaxes_Base'][];
      };
    };
    'actual-order-response': {
      content: {
        'application/json': {
          /**
           * @description The ID of the order, a read-only value. Do not pass in PUT or POST.
           * @example 118
           */
          id?: number;
          /**
           * @description The ID of the customer placing the order; or 0 if it was a guest order.
           * @example 6
           */
          customer_id?: number;
          /** @description The date the order was created, formatted in the RFC-2822 standard. You set this attribute on Order creation (POST) to support the migration of historical orders. If you do not provide a value, then it will default to the current date/time. e.g., `Tue, 20 Nov 2012 00:00:00 +0000` */
          date_created?: string;
          /** @description A read-only value representing the last modification of the order. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822 */
          date_modified?: string;
          /** @description A read-only value representing the date of shipment. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822 */
          date_shipped?: string;
          /**
           * @description The status ID of the order.
           * @example 11
           */
          status_id?: number;
          /**
           * @description The cart ID from which this order originated, if applicable. Correlates with the Cart API. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
           * @example a8458391-ef68-4fe5-9ec1-442e6a767364
           */
          cart_id?: string;
          /**
           * @description The status will include one of the (string, optional) - values defined under Order Statuses. This value is read-only. Do not attempt to modify or set this value in a POST or PUT operation.
           * @example Awaiting Fulfillment
           */
          status?: string;
          /**
           * @description Contains the same (string, optional) - value as the Order Statuses objectâ€™s `custom_label` property.
           * @example Awaiting Fulfillment
           */
          custom_status?: string;
          /**
           * @description Override value for subtotal excluding tax. If specified, the field `subtotal_inc_tax` is also required. (Float, Float-As-String, Integer)
           * @example 225.0000
           */
          subtotal_ex_tax?: string;
          /**
           * @description Override value for subtotal including tax. If specified, the field `subtotal_ex_tax` is also required. (Float, Float-As-String, Integer)
           * @example 225.0000
           */
          subtotal_inc_tax?: string;
          /**
           * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          subtotal_tax?: string;
          /**
           * @description The value of the base shipping cost. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          base_shipping_cost?: string;
          /**
           * @description The value of shipping cost, excluding tax. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          shipping_cost_ex_tax?: string;
          /**
           * @description The value of shipping cost, including tax. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          shipping_cost_inc_tax?: string;
          /**
           * @description A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          shipping_cost_tax?: string;
          /**
           * @description Shipping-cost tax class. A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
           * @example 2
           */
          shipping_cost_tax_class_id?: number;
          /**
           * @description The value of the base handling cost. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          base_handling_cost?: string;
          /**
           * @description The value of the handling cost, excluding tax. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          handling_cost_ex_tax?: string;
          /** @description The value of the handling cost, including tax. (Float, Float-As-String, Integer) */
          handling_cost_inc_tax?: unknown;
          /**
           * @description A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          handling_cost_tax?: string;
          /**
           * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
           * @example 2
           */
          handling_cost_tax_class_id?: number;
          /** @description The value of the base wrapping cost. */
          base_wrapping_cost?: string | number;
          /**
           * @description The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          wrapping_cost_ex_tax?: string;
          /**
           * @description The value of the wrapping cost, including tax. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          wrapping_cost_inc_tax?: string;
          /**
           * @description A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          wrapping_cost_tax?: string;
          /**
           * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
           * @example 3
           */
          wrapping_cost_tax_class_id?: number;
          /**
           * @description Override value for the total, excluding tax. If specified, the field `total_inc_tax` is also required. (Float, Float-As-String, Integer)
           * @example 225.0000
           */
          total_ex_tax?: string;
          /**
           * @description Override value for the total, including tax. If specified, the field `total_ex_tax` is also required. (Float, Float-As-String, Integer)
           * @example 225.0000
           */
          total_inc_tax?: string;
          /**
           * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          total_tax?: string;
          /**
           * @description The total number of items in the order.
           * @example 1
           */
          items_total?: number;
          /** @description The number of items that have been shipped. */
          items_shipped?: number;
          /**
           * @description The payment method for this order. Can be one of the following: `Manual`, `Credit Card`, `cash`, `Test Payment Gateway`, etc.
           * @example Cash on Delivery
           */
          payment_method?: string;
          /** @description The external Transaction ID/Payment ID within this orderâ€™s payment provider (if a payment provider was used). */
          payment_provider_id?: string | null;
          /** @description A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. */
          payment_status?: string;
          /**
           * @description The amount refunded from this transaction; always returns `0`. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          refunded_amount?: string;
          /** @description Whether this is an order for digital products. */
          order_is_digital?: boolean;
          /**
           * @description Represents the store credit that the shopper has redeemed on this individual order. This is a read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          store_credit_amount?: string;
          /**
           * @description A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          gift_certificate_amount?: string;
          /**
           * @description IP Address of the customer, if known.
           * @example 12.345.678.910
           */
          ip_address?: string;
          /**
           * @description The full name of the country where the customer made the purchase, based on the IP.
           * @example United States
           */
          geoip_country?: string;
          /**
           * @description The country where the customer made the purchase, in ISO2 format, based on the IP.
           * @example US
           */
          geoip_country_iso2?: string;
          /**
           * @description The display currency ID. May be different from transactional currency. A read-only value. Do not pass in a POST or PUT.
           * @example 1
           */
          currency_id?: number;
          /**
           * @description The currency code of the display currency used to present prices on the storefront. May be different from transactional currency. A read-only value. Do not pass in a POST or PUT.
           * @example USD
           */
          currency_code?: string;
          /**
           * @description A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
           * @example 1.0000000000
           */
          currency_exchange_rate?: string;
          /**
           * @description The transactional currency ID. A read-only value. Do not pass in a POST or PUT.
           * @example 1
           */
          default_currency_id?: number;
          /**
           * @description The currency code of the transactional currency the shopper pays in. A read-only value. Do not pass in a POST or PUT.
           * @example USD
           */
          default_currency_code?: string;
          /**
           * @description Any additional notes for staff.
           * @example Send Saturday
           */
          staff_notes?: string;
          /**
           * @description Message that the customer entered (number, optional) -o the `Order Comments` box during checkout.
           * @example Thank you
           */
          customer_message?: string;
          /**
           * @description Amount of discount for this transaction. (Float, Float-As-String, Integer)
           * @example 0.0000
           */
          discount_amount?: string;
          /**
           * @description A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
           * @example 5.0000
           */
          coupon_discount?: string;
          /** @description The number of shipping addresses associated with this transaction. A read-only value. Do not pass in a POST or PUT. */
          shipping_address_count?: number;
          /** @description Indicates whether the order was deleted (archived). Set to to true, to archive an order. */
          is_deleted?: boolean;
          /** @description Indicates whether the shopper has selected an opt-in check box (on the checkout page) to receive emails. A read-only value. Do not pass in a POST or PUT. */
          is_email_opt_in?: boolean;
          /** @description Credit card type */
          credit_card_type?: number | null;
          /**
           * @description If the order was placed through eBay, the eBay order number will be included. Otherwise, the value will be `0`.
           * @example 0
           */
          ebay_order_id?: string;
          /**
           * Billing Address
           * @description Required to create an order.
           */
          billing_address?: {
            /** @example Jane */
            first_name?: string;
            /** @example Doe */
            last_name?: string;
            company?: string;
            /** @example 123 Main Street */
            street_1?: string;
            street_2?: string;
            /** @example Austin */
            city?: string;
            /** @example TX */
            state?: string;
            /** @example 12345 */
            zip?: number;
            /** @example United States */
            country?: string;
            /** @example US */
            country_iso2?: string;
            phone?: string;
            /** @example janedoe@example.com */
            email?: string;
            form_fields?: {
              /**
               * @description Name of the form field.
               * @example License Id
               */
              name?: string;
              /**
               * @description Value of the form field.
               * @example 123BAF
               */
              value?: string;
            }[];
          };
          /**
           * @description Orders submitted from the storeâ€™s website will include a `www` value. Orders submitted with the API will be set to `external`. A read-only value. Do not pass in a POST or PUT.
           * @example www
           */
          order_source?: string;
          /**
           * @description This value identifies an external system that generated the order and submitted it to BigCommerce using the Orders API.
           * * When supplying the value, we recommend combining the type of system and vendor, e.g., ERP (Acumatica) or POS (Square).
           * * If you are migrating historical orders processed on another eCommerce platform to BigCommerce, supply the following code as the value: M-MIG. This code will exclude historical orders from the storeâ€™s GMV/order count, which factors into pricing.
           * * If you do not provide a value, then it will default to null..
           * @example null
           */
          external_source?: string | unknown;
          products?: components['schemas']['products_Resource'];
          shipping_addresses?: components['schemas']['shippingAddresses_Resource'];
          coupons?: components['schemas']['coupons_Resource'];
          /**
           * @description ID of the order in another system. For example, the Amazon Order ID if this is an Amazon order.This field can be updated in a /POST, but using a /PUT to update the order will return a 400 error. The field 'external_id' cannot be written to. Please remove it from your request before trying again. It can not be overwritten once set.
           * @example null
           */
          external_id?: string | null;
          /**
           * @description ID of the merchant.
           * @example null
           */
          external_merchant_id?: string | null;
          /**
           * @description Shows where the order originated. The channel_id will default to 1. Read-Only.
           * @example 1
           */
          channel_id?: number;
          /**
           * @description BasicTaxProvider - Tax is set to manual and order is created in the store.
           *
           * AvaTaxProvider - Tax is set to automatic and order is created in the store. Used for Avalara.
           *
           * "" (empty string) - The order is created with the API, or the tax provider is unknown.
           */
          tax_provider_id?: 'BasicTaxProvider' | 'AvaTaxProvider' | '';
          /**
           * @description The customerâ€™s locale.
           * @example en
           */
          customer_locale?: unknown;
        };
      };
    };
  };
  parameters: {
    /** @description The minimum order ID. */
    min_id: number;
    /** @description The maximum order ID. */
    max_id: number;
    /** @description The minimum order total in float format. eg. 12.50 */
    min_total: number;
    /** @description The maximum order total in float format. eg. 12.50 */
    max_total: number;
    /** @description Customer ID. */
    customer_id: number;
    /** @description The email of the customer. */
    email: string;
    /** @description The staus ID of the order. You can get the status id from the `/orders` endpoints. */
    status_id: number;
    /** @description The staus ID of the order. You can get the status id from the `/orders` endpoints. */
    status_id_path: number;
    /** @description The cart ID of the order. */
    cart_id: string;
    /** @description If the order was deleted or archived. */
    is_deleted: boolean;
    /** @description The payment method used on the order. */
    payment_method: 'Manual' | 'Cash on Delivery' | 'Credit Card' | 'Test Payment Gateway' | 'Pay In Store';
    /**
     * @description Minimum date the order was created in RFC-2822 or ISO-8601.
     *
     * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
     *
     * ISO-8601: `2017-04-20T11:32:00.000-04:00`
     */
    min_date_created: string;
    /**
     * @description Maximum date the order was created in RFC-2822 or ISO-8601.
     *
     * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
     *
     * ISO-8601: `2017-04-20T11:32:00.000-04:00`
     */
    max_date_created: string;
    /**
     * @description Minimum date the order was modified in RFC-2822 or ISO-8601.
     *
     * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
     *
     * ISO-8601: `2017-04-20T11:32:00.000-04:00`
     */
    min_date_modified: string;
    /**
     * @description Maximum date the order was modified in RFC-2822 or ISO-8601.
     *
     * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
     *
     * ISO-8601: `2017-04-20T11:32:00.000-04:00`
     */
    max_date_modified: string;
    /** @description The page to return in the response. */
    page: number;
    /** @description Number of results to return. */
    limit: number;
    /** @description Field and direction to sort orders. To specify the direction, add `:asc` or `:desc` to the end of the query parameter. E.g. `sort=date_created:desc`. */
    sort: 'id' | 'customer_id' | 'date_created' | 'date_modified' | 'status_id' | 'channel_id' | 'external_id';
    Accept: string;
    'Content-Type': string;
    /** @description Status of the order message. */
    status: 'read' | 'unread';
    /** @description If the message is [flagged](https://support.bigcommerce.com/s/article/Communicating-with-Customers#Messages). */
    is_flagged: boolean;
    /** @description ID of the order. */
    order_id_path: number;
    /** @description ID of the product. */
    product_id: number;
    /** @description Shipping address ID. */
    shipping_address_id: number;
    /** @description Shipment ID. */
    shipment_id: number;
    /** @description The Channel ID of the Order. */
    channel_id: number;
  };
}

export interface operations {
  /** Gets an *Order*. To learn more about creating or updating orders, see [Orders Overview](/api-docs/orders/orders-api-overview). */
  getAnOrder: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: components['responses']['order_Resp'];
      /** "The requested resource was not found." */
      404: {
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  /**
   * Updates an *Order*.
   *
   * To add a product to an existing order, don't include `id` in the body. Include `product_options` if adding a product with variants.
   *
   * To update a product in an order, include `id` in the body. The body should only contain the fields that need to be updated. Those fields that are omitted will not be changed.
   *
   * To remove a product from an order, set that productâ€™s `quantity` to `0`.
   *
   * To learn more about creating or updating orders, see [Orders Overview](/api-docs/orders/orders-api-overview).
   */
  updateAnOrder: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      200: components['responses']['order_Resp'];
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['order_Put'];
      };
    };
  };
  /** Archives an order. To remove a single product from an order, see `PUT /orders/{order_id}`. */
  deleteAnOrder: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: components['parameters']['order_id_path'];
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      204: never;
    };
  };
  /** Gets an array of orders in the store organized by order status. */
  getCountOrder: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      200: components['responses']['ordersCount_Resp'];
    };
  };
  /**
   * Gets a list of orders using the filter query.
   *
   * **Notes**
   *
   * The default sort is by order id, from lowest to highest.
   */
  getAllOrders: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
      query: {
        /** The minimum order ID. */
        min_id?: components['parameters']['min_id'];
        /** The maximum order ID. */
        max_id?: components['parameters']['max_id'];
        /** The minimum order total in float format. eg. 12.50 */
        min_total?: components['parameters']['min_total'];
        /** The maximum order total in float format. eg. 12.50 */
        max_total?: components['parameters']['max_total'];
        /** Customer ID. */
        customer_id?: components['parameters']['customer_id'];
        /** The email of the customer. */
        email?: components['parameters']['email'];
        /** The staus ID of the order. You can get the status id from the `/orders` endpoints. */
        status_id?: components['parameters']['status_id'];
        /** The cart ID of the order. */
        cart_id?: components['parameters']['cart_id'];
        /** The payment method used on the order. */
        payment_method?: components['parameters']['payment_method'];
        /**
         * Minimum date the order was created in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        min_date_created?: components['parameters']['min_date_created'];
        /**
         * Maximum date the order was created in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        max_date_created?: components['parameters']['max_date_created'];
        /**
         * Minimum date the order was modified in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        min_date_modified?: components['parameters']['min_date_modified'];
        /**
         * Maximum date the order was modified in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        max_date_modified?: components['parameters']['max_date_modified'];
        /** The page to return in the response. */
        page?: components['parameters']['page'];
        /** Number of results to return. */
        limit?: components['parameters']['limit'];
        /** Field and direction to sort orders. To specify the direction, add `:asc` or `:desc` to the end of the query parameter. E.g. `sort=date_created:desc`. */
        sort?: components['parameters']['sort'];
        /** If the order was deleted or archived. */
        is_deleted?: components['parameters']['is_deleted'];
        /** The Channel ID of the Order. */
        channel_id?: components['parameters']['channel_id'];
      };
    };
    responses: {
      200: components['responses']['orderCollection_Resp'];
    };
  };
  /**
   * Creates an *Order*. To learn more about creating or updating orders, see [Orders Overview](/api-docs/orders/orders-api-overview).
   *
   * An order can be created with an existing catalog product or a custom product.
   *
   * **Required Fields**
   *
   * *   products
   * *   billing_address
   */
  createAnOrder: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      200: components['responses']['order_Resp'];
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['order_Post'];
      };
    };
  };
  /** Archives all orders. */
  deleteAllOrders: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      204: never;
    };
  };
  /**
   * Lists all order coupons. Optional parameters can be passed in.
   *
   * |Type `int`|Type Name|
   * |-|-|
   * |`0`|`per_item_discount`|
   * |`1`|`percentage_discount`|
   * |`2`|`per_total_discount`|
   * |`3`|`shipping_discount`|
   * |`4`|`free_shipping`|
   * |`5`|`promotion`|
   */
  getAllOrderCoupons: {
    parameters: {
      path: {
        store_hash: string;
        /** ID of the order. */
        order_id: components['parameters']['order_id_path'];
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** The page to return in the response. */
        page?: components['parameters']['page'];
        /** Number of results to return. */
        limit?: components['parameters']['limit'];
      };
    };
    responses: {
      200: components['responses']['orderCouponsCollection_Resp'];
    };
  };
  /** Lists all order products on an order using `order_id`. By default, items sort from lowest to highest according to a newly created ID, separate from the `order_id` and the `product_id`. */
  getAllOrderProducts: {
    parameters: {
      path: {
        store_hash: string;
        /** ID of the order. */
        order_id: components['parameters']['order_id_path'];
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
      query: {
        /** The page to return in the response. */
        page?: components['parameters']['page'];
        /** Number of results to return. */
        limit?: components['parameters']['limit'];
      };
    };
    responses: {
      200: components['responses']['orderProductsCollection_Resp'];
    };
  };
  /**
   * Get all shipping addresses on an order using the `order_id`.
   *
   * Returned in the response is shipping_quotes object. Please use the Get Shipping Quotes Endpoint. Using the response will return a 204 for the shipping quote.
   */
  getAllShippingAddresses: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
      query: {
        /** The page to return in the response. */
        page?: components['parameters']['page'];
        /** Number of results to return. */
        limit?: components['parameters']['limit'];
      };
    };
    responses: {
      200: components['responses']['orderShippingAddressCollection_Resp'];
    };
  };
  /**
   * Returns a Collection of All Order Statuses.
   *
   * **Order Status Descriptions:**
   * |Status ID | Name  | Description |
   * |--|--|--|
   * | 0 | Incomplete  | An incomplete order happens when a shopper reached the payment page, but did not complete the transaction. |
   * | 1 | Pending |Customer started the checkout process, but did not complete it. |
   * | 2 | Shipped | Order has been shipped, but receipt has not been confirmed; seller has used the Ship Items action. |
   * | 3 | Partially Shipped | Only some items in the order have been shipped, due to some products being pre-order only or other reasons. |
   * | 4 | Refunded | Seller has used the Refund action. |
   * | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency or other reasons. |
   * | 6 |Declined | Seller has marked the order as declined for lack of manual payment, or other reasons. |
   * | 7 | Awaiting Payment | Customer has completed checkout process, but payment has yet to be confirmed. |
   * | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup from a seller-specified location. |
   * | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting collection from a shipping provider. |
   * | 10 | Completed | Client has paid for their digital product and their file(s) are available for download. |
   * | 11 | Awaiting Fulfillment | Customer has completed the checkout process and payment has been confirmed. |
   * | 12 | Manual Verification Required | Order on hold while some aspect needs to be manually confirmed. |
   * | 13 | Disputed | Customer has initiated a dispute resolution process for the PayPal transaction that paid for the order. |
   * | 14 | Partially Refunded | Seller has partially refunded the order. |
   */
  getOrderStatus: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      200: components['responses']['orderStatusCollection_Resp'];
    };
  };
  /**
   * Returns a single order status.
   *
   * **Order Status Descriptions:**
   * |Status ID | Name  | Description |
   * |--|--|--|
   * | 0 | Incomplete  | An incomplete order happens when a shopper reached the payment page, but did not complete the transaction. |
   * | 1 | Pending |Customer started the checkout process, but did not complete it. |
   * | 2 | Shipped | Order has been shipped, but receipt has not been confirmed; seller has used the Ship Items action. |
   * | 3 | Partially Shipped | Only some items in the order have been shipped, due to some products being pre-order only or other reasons. |
   * | 4 | Refunded | Seller has used the Refund action. |
   * | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency or other reasons. |
   * | 6 |Declined | Seller has marked the order as declined for lack of manual payment, or other reasons. |
   * | 7 | Awaiting Payment | Customer has completed checkout process, but payment has yet to be confirmed. |
   * | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup from a seller-specified location. |
   * | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting collection from a shipping provider. |
   * | 10 | Completed | Client has paid for their digital product and their file(s) are available for download. |
   * | 11 | Awaiting Fulfillment | Customer has completed the checkout process and payment has been confirmed. |
   * | 12 | Manual Verification Required | Order on hold while some aspect needs to be manually confirmed. |
   * | 13 | Disputed | Customer has initiated a dispute resolution process for the PayPal transaction that paid for the order. |
   * | 14 | Partially Refunded | Seller has partially refunded the order. |
   */
  getAOrderStatus: {
    parameters: {
      path: {
        store_hash: string;
        /** The staus ID of the order. You can get the status id from the `/orders` endpoints. */
        status_id: components['parameters']['status_id_path'];
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      200: components['responses']['orderStatus_Resp'];
    };
  };
  /**
   * Gets all order taxes using `order_id`.
   * Each tax applied to an order. This information can be useful for reporting purposes.
   * Pass in the query parameter `?details=true` to return extra details about order taxes.
   * `order_product_id` and `line_item_type` are also returned.
   *
   * All values are read-only.
   */
  getOrderTaxes: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
      query: {
        /** The page to return in the response. */
        page?: components['parameters']['page'];
        /** Number of results to return. */
        limit?: components['parameters']['limit'];
        /** To return detailed tax information, pass in the details query. */
        details?: string;
      };
    };
    responses: {
      200: components['responses']['orderTaxes_Resp'];
    };
  };
  /** Gets a list of all shipments on an order. */
  getAllOrderShipments: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
      query: {
        /** The page to return in the response. */
        page?: components['parameters']['page'];
        /** Number of results to return. */
        limit?: components['parameters']['limit'];
      };
    };
    responses: {
      200: components['responses']['orderShipmentCollection_Resp'];
    };
  };
  /**
   * Creates an *Order Shipment*. For more details, see [Shipping an Order](/api-docs/orders/orders-api-overview#shipping-an-order).
   *
   * **Required Fields**
   * *   order_address_id
   * *   items
   *
   * **Usage Notes**
   *
   * Presuming that a valid carrier code is used, a tracking link is generated if either `shipping_provider` or `tracking_carrier` is supplied alongside a tracking number. Providing only the tracking number will result in an unclickable text in the customer facing email.
   *
   * Acceptable values for `shipping_provider` include an empty string (`""`), auspost, canadapost, endicia, usps, fedex, royalmail, ups, upsready, upsonline, or shipperhq.
   *
   * Acceptable values for `tracking_carrier` include an empty string (`""`) or one of the valid tracking-carrier values viewable [here](https://github.com/bigcommerce/dev-docs/blob/development/assets/csv/tracking_carrier_values.csv) and downloadable as a .CSV file [here](https://raw.githubusercontent.com/bigcommerce/dev-docs/development/assets/csv/tracking_carrier_values.csv).
   */
  createOrderShipments: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      201: components['responses']['orderShipment_Resp'];
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['orderShipment_Post'];
      };
    };
  };
  /** Deletes all shipments associated with an order. */
  deleteAllOrderShipments: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      204: never;
    };
  };
  /** Gets a count of the number of shipments that have been made for a single order. */
  getCountShipments: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      200: components['responses']['orderCount_Resp'];
    };
  };
  /** Gets an order shipment. */
  getOrderShipment: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        /** Shipment ID. */
        shipment_id: number;
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      200: components['responses']['orderShipment_Resp'];
    };
  };
  /** Updates an existing shipment associated with an order. */
  updateOrderShipment: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        /** Shipment ID. */
        shipment_id: number;
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      200: components['responses']['orderShipment_Resp'];
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['orderShipment_Put'];
      };
    };
  };
  /** Deletes a shipment associated with an order. */
  deleteOrderShipment: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        /** Shipment ID. */
        shipment_id: number;
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      204: never;
    };
  };
  /** Gets the messages associated with an order. */
  getOrderMessages: {
    parameters: {
      path: {
        /** ID of the order */
        order_id: number;
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
      query: {
        /** The minimum order ID. */
        min_id?: components['parameters']['min_id'];
        /** The maximum order ID. */
        max_id?: components['parameters']['max_id'];
        /** Customer ID. */
        customer_id?: components['parameters']['customer_id'];
        /**
         * Minimum date the order was created in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        min_date_created?: components['parameters']['min_date_created'];
        /**
         * Maximum date the order was created in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        max_date_created?: components['parameters']['max_date_created'];
        /** If the message is [flagged](https://support.bigcommerce.com/s/article/Communicating-with-Customers#Messages). */
        is_flagged?: components['parameters']['is_flagged'];
        /** Status of the order message. */
        status?: components['parameters']['status'];
        /** The page to return in the response. */
        page?: components['parameters']['page'];
        /** Number of results to return. */
        limit?: components['parameters']['limit'];
      };
    };
    responses: {
      200: components['responses']['orderMessagesCollection_Resp'];
    };
  };
  /** Gets a product line item associated with the order. */
  getAnOrderProduct: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        /** ID of the product. */
        product_id: number;
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      200: components['responses']['orderProductLineItem_Resp'];
    };
  };
  /**
   * Gets a shipping address associated with an order.
   *
   * Returned in the response is shipping_quotes object. Please use the Get Shipping Quotes Endpoint. Using the response will return a 204 for the shipping quote.
   */
  getAShippingAddress: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        id: string;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: components['responses']['orderShippingAddress_Resp'];
    };
  };
  /**
   * Update a shipping address associated with an order.
   *
   * **Note**: Updating will NOT trigger the recalculation of shipping cost and tax
   */
  updateAShippingAddress: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        id: string;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['orderShippingAddress'];
        };
      };
      /** Bad Request */
      400: {
        content: {
          'application/json': {
            status?: number;
            message?: string;
          }[];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/json': {
            status?: number;
            message?: string;
          }[];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['shippingAddress_Base'];
      };
    };
  };
  /**
   * Gets all shipping quotes persisted on an order.
   *
   * This is a read only endpoint and the output can vary based on the shipping quote. A shipping quote can only be generated using the storefront at this time. Orders that are created in the control panel or using the API return a 204 for this endpoint since a shipping quote is not generated during that process.
   */
  getShippingQuotes: {
    parameters: {
      path: {
        /** ID of the order. */
        order_id: number;
        /** Shipping address ID. */
        shipping_address_id: number;
        store_hash: string;
      };
      header: {
        Accept: components['parameters']['Accept'];
        'Content-Type': components['parameters']['Content-Type'];
      };
    };
    responses: {
      200: components['responses']['shippingQuotes_Resp'];
    };
  };
}

export interface external {}
