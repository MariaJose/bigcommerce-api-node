/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v3/checkouts/{checkoutId}': {
    /**
     * Returns a *Checkout*.
     *
     * **Notes**
     *
     * The cart ID and checkout ID are the same.
     */
    get: operations['CheckoutsByCheckoutIdGet'];
    /**
     * Change customer message to an existing *Checkout*.
     *
     * **Limits:**
     * * 2000 characters for customer message
     */
    put: operations['CheckoutsByCheckoutIdPut'];
    parameters: {
      path: {
        store_hash: string;
        checkoutId: string;
      };
    };
  };
  '/stores/{store_hash}/v3/checkouts/{checkoutId}/discounts': {
    /**
     * Adds a discount to an existing *checkout*.
     *
     * This discount only applies to `line_items`. When you call this API, you clear out all existing discounts applied to line items, including product and order-based discounts.
     *
     * This endpoint splits the discount between line items based on the item value.
     *
     * Required Fields
     * * discounted_amount
     */
    post: operations['post-store_hash-v3-checkouts-checkoutId-discounts'];
    parameters: {
      path: {
        store_hash: string;
        checkoutId: string;
      };
    };
  };
  '/stores/{store_hash}/v3/checkouts/{checkoutId}/billing-address': {
    /**
     * Adds a billing address to an existing *Checkout*.
     *
     * **Required Fields**
     * * email
     * * country_code
     */
    post: operations['CheckoutsBillingAddressByCheckoutIdPost'];
    parameters: {
      path: {
        store_hash: string;
        checkoutId: string;
      };
    };
  };
  '/stores/{store_hash}/v3/checkouts/{checkoutId}/billing-address/{addressId}': {
    /** Updates an existing billing address on *Checkout*. */
    put: operations['CheckoutsBillingAddressByCheckoutIdAndAddressIdPut'];
    parameters: {
      path: {
        store_hash: string;
        checkoutId: string;
        addressId: string;
      };
    };
  };
  '/stores/{store_hash}/v3/checkouts/{checkoutId}/consignments': {
    /**
     * Adds a new consignment to a checkout.
     *
     * **Limits:**
     * * 50 line item limit for guest shoppers
     * * 600 line item limit for logged-in shoppers
     *
     * For more information about working with consignments, see [Checkout consignment](/api-docs/checkouts/checkout-consignment).
     *
     * Though the only required `address` properties to create a consignment are `email` and `country_code`, to successfully [create an order](/api-reference/store-management/checkouts/checkout-orders/createanorder) the `address` requires the following properties:
     * * `first_name`
     * * `last_name`
     * * `address1`
     * * `city`
     * * `country`
     * * `email`
     * * `country_code`
     *
     * Depending on the country, the following `address` properties can also be required:
     *
     * * `postal_code`
     * * `state_or_province`
     */
    post: operations['CheckoutsConsignmentsByCheckoutIdPost'];
    parameters: {
      path: {
        store_hash: string;
        checkoutId: string;
      };
    };
  };
  '/stores/{store_hash}/v3/checkouts/{checkoutId}/consignments/{consignmentId}': {
    /**
     * Updates an existing consignment. Address, line item IDs or the shipping option ID can be updated using this endpoint.
     *
     * There are two steps to add a new address and shipping options with line items.
     * 1. Add a new [consignment](/api-reference/store-management/checkouts/checkout-consignments/checkoutsconsignmentsbycheckoutidpost) to a checkout.
     * 2. Assign a shipping option to the new consignment by sending a `PUT` request to update the consignment's `shipping_option_id` with a returned value from `data.consignments[N].available_shipping_option[N].id` in step one.
     */
    put: operations['CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPut'];
    /**
     * Removes an existing consignment from a checkout.
     *
     * Removing the last consigment will remove the Cart from the customer it is assigned to. Create a new redirect url for the customer to access it again.
     */
    delete: operations['CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDelete'];
    parameters: {
      path: {
        store_hash: string;
        checkoutId: string;
        consignmentId: string;
      };
    };
  };
  '/stores/{store_hash}/v3/checkouts/{checkoutId}/coupons': {
    /**
     * Adds a *Coupon Code* to *Checkout*.
     *
     * **Required Fields**
     * * coupon_code
     *
     * **Limits**
     * * Coupon codes have a 50 character limit.
     */
    post: operations['CheckoutsCouponsByCheckoutIdPost'];
    parameters: {
      path: {
        store_hash: string;
        checkoutId: string;
      };
    };
  };
  '/stores/{store_hash}/v3/checkouts/{checkoutId}/coupons/{couponCode}': {
    /** Deletes a *Coupon Code* from *Checkout*. */
    delete: operations['CheckoutsCouponsByCheckoutIdAndCouponCodeDelete'];
    parameters: {
      path: {
        store_hash: string;
        checkoutId: string;
        couponCode: string;
      };
    };
  };
  '/stores/{store_hash}/v3/checkouts/{checkoutId}/orders': {
    /**
     * Creates an order.
     *
     * ## Usage notes
     * * Orders created will be set to incomplete order status.
     * * You can create as many orders from the same order(cart) as you want.
     * * Order duplication creates the same order with a new order number with the incomplete status.
     * * Once the order is paid, then the cart is deleted.
     * * Cart deletion occurs if you are using BigCommerce to accept payments on orders.
     */
    post: operations['createAnOrder'];
    parameters: {
      path: {
        checkoutId: string;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v3/checkouts/settings': {
    /** Get checkout settings */
    get: {
      parameters: {
        path: {
          store_hash: string;
        };
      };
      responses: {
        200: responses['checkout_settings_resp'];
      };
    };
    /** Update checkout settings */
    put: {
      parameters: {
        path: {
          store_hash: string;
        };
        body: {
          body: definitions['CheckoutsSettingsRequest'];
        };
      };
      responses: {
        200: responses['checkout_settings_resp'];
      };
    };
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
}

export interface definitions {
  /** Checkout */
  Checkout: {
    /** Format: uuid */
    id?: string;
    /** Cart */
    cart?: {
      /**
       * Format: uuid
       * @description Cart ID, provided after creating a cart with a POST.
       */
      id?: string;
      /**
       * Format: int32
       * @description ID of the customer to which the cart belongs.
       */
      customer_id?: number;
      /** @description The cart's email. This is the same email that is used in the billing address. */
      email?: string;
      /** Currency */
      currency?: {
        /** @description ISO-4217 currency code. (See: http://en.wikipedia.org/wiki/ISO_4217.) */
        code?: string;
      };
      /**
       * Format: double
       * @description Sum of cart line-item amounts before cart-level discounts, coupons, or taxes.
       */
      base_amount?: number;
      /** @description ID of channel */
      channel_id?: number;
      /**
       * Format: double
       * @description Discounted amount.
       */
      discount_amount?: number;
      /**
       * Format: double
       * @description Sum of cart line-item amounts minus cart-level discounts and coupons including tax
       */
      cart_amount_inc_tax?: number;
      /**
       * Format: double
       * @description Sum of cart line-item amounts minus cart-level discounts and coupons excluding tax
       */
      cart_amount_ex_tax?: number;
      coupons?: {
        /** @description the coupon code */
        code: string;
        /** @description The coupon ID. */
        id?: number;
        /** @description Key name to identify the type of coupon. */
        coupon_type?: string;
        /**
         * Format: double
         * @description The discounted amount applied within a given context.
         */
        discounted_amount?: number;
      }[];
      discounts?: {
        /**
         * Format: double
         * @description ID of the applied discount.
         */
        id?: string;
        /**
         * Format: double
         * @description The discounted amount applied within a given context.
         */
        discounted_amount?: number;
      }[];
      /** Line Item */
      line_items?: {
        physical_items: {
          /** Format: double */
          quantity: number;
          /** @description The line-item ID. */
          id?: string;
          /** Format: double */
          variant_id?: number;
          /** Format: double */
          product_id?: number;
          sku?: string;
          /** @description The item's product name. */
          name?: string;
          /** @description The product URL. */
          url?: string;
          is_taxable?: boolean;
          image_url?: string;
          discounts?: {
            /**
             * Format: double
             * @description ID of the applied discount.
             */
            id?: string;
            /**
             * Format: double
             * @description The discounted amount applied within a given context.
             */
            discounted_amount?: number;
          }[];
          /** @description When the line item uses a coupon, returns a number indicating the total discounted amount.  Otherwise, returns an empty array. */
          coupons?: unknown[];
          /**
           * Format: double
           * @description The total value of all discounts applied to this item.
           */
          discount_amount?: number;
          /**
           * Format: double
           * @description The total value of all coupons applied to this item.
           */
          coupon_amount?: number;
          /**
           * Format: double
           * @description Item’s list price, as quoted by the manufacturer/distributor.
           */
          list_price?: number;
          /**
           * Format: double
           * @description Item's price after all discounts are applied. (The final price before tax calculation.)
           */
          sale_price?: number;
          /**
           * Format: double
           * @description Item's list price multiplied by the quantity.
           */
          extended_list_price?: number;
          /**
           * Format: double
           * @description Item's sale price multiplied by the quantity.
           */
          extended_sale_price?: number;
          is_require_shipping?: boolean;
          is_mutable?: boolean;
          parent_id?: number;
          /** Gift Wrapping */
          gift_wrapping?: {
            name?: string;
            message?: string;
            /** Format: double */
            amount?: number;
            /** Format: double */
            amount_as_integer?: number;
          };
        }[];
        digital_items: {
          /** Format: double */
          quantity: number;
          /** @description The line-item ID. */
          id?: string;
          /** Format: double */
          variant_id?: number;
          parent_id?: number;
          /** Format: double */
          product_id?: number;
          sku?: string;
          /** @description The item's product name. */
          name?: string;
          /** @description The product URL. */
          url?: string;
          is_mutable?: boolean;
          is_require_shipping?: boolean;
          is_taxable?: boolean;
          image_url?: string;
          discounts?: {
            /**
             * Format: double
             * @description ID of the applied discount.
             */
            id?: string;
            /**
             * Format: double
             * @description The discounted amount applied within a given context.
             */
            discounted_amount?: number;
          }[];
          /** @description When the line item uses a coupon, returns a number indicating the total discounted amount.  Otherwise, returns an empty array. */
          coupons?: unknown[];
          /**
           * Format: double
           * @description The total value of all discounts applied to this item.
           */
          discount_amount?: number;
          /**
           * Format: double
           * @description The total value of all coupons applied to this item.
           */
          coupon_amount?: number;
          /**
           * Format: double
           * @description Item’s list price, as quoted by the manufacturer/distributor.
           */
          list_price?: number;
          /**
           * Format: double
           * @description Item's price after all discounts are applied. (The final price before tax calculation.)
           */
          sale_price?: number;
          /**
           * Format: double
           * @description Item's list price multiplied by the quantity.
           */
          extended_list_price?: number;
          /**
           * Format: double
           * @description Item's sale price multiplied by the quantity.
           */
          extended_sale_price?: number;
        }[];
        gift_certificates: {
          /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
          theme: string;
          /**
           * Format: double
           * @description Value must be between 1.00 and 1,000.00 in the store’s default currency.
           */
          amount: number;
          /** Contact Entity */
          sender: {
            name?: string;
            email?: string;
          };
          /** Contact Entity */
          recipient: {
            name?: string;
            email?: string;
          };
          id?: string;
          /** @description GiftCertificate-provided name that will appear in the control panel. */
          name?: string;
          taxable?: boolean;
          /** @description Limited to 200 characters. */
          message?: string;
        }[];
        custom_items?: {
          quantity: number;
          id?: string;
          extended_list_price?: number;
          list_price?: number;
          sku?: string;
          name?: string;
          image_url?: string;
        }[];
      };
      /** @description Time when the cart was created. */
      created_time?: string;
      /** @description Time when the cart was last updated. */
      updated_time?: string;
    };
    /** Address Response */
    billing_address?: {
      first_name?: string;
      last_name?: string;
      email: string;
      company?: string;
      address1?: string;
      address2?: string;
      city?: string;
      /** @description Represents state or province. */
      state_or_province?: string;
      state_or_province_code?: string;
      country_code: string;
      postal_code?: string;
      phone?: string;
      custom_fields?: {
        field_id?: string;
        /** @description This can also be an array for fields that need to support list of values (e.g., a set of check boxes.) */
        field_value?: string;
      }[];
    } & {
      id?: string;
    };
    consignments?: {
      id?: string;
      shippingAddress?: { [key: string]: unknown };
      /** Address Response */
      address?: {
        first_name?: string;
        last_name?: string;
        email: string;
        company?: string;
        address1?: string;
        address2?: string;
        city?: string;
        /** @description Represents state or province. */
        state_or_province?: string;
        state_or_province_code?: string;
        country_code: string;
        postal_code?: string;
        phone?: string;
        custom_fields?: {
          field_id?: string;
          /** @description This can also be an array for fields that need to support list of values (e.g., a set of check boxes.) */
          field_value?: string;
        }[];
      } & {
        id?: string;
      };
      /** @description This is available only when "include=available_shipping_options" is presented in the URL. */
      available_shipping_options?: {
        description?: string;
        id?: string;
        /** @description Specified the type of shipping option. Flat rate, UPS, etc., */
        type?: string;
        image_url?: string;
        /** Format: double */
        cost?: number;
        /** @description An estimate of the arrival time. */
        transit_time?: string;
        /** @description ReadOnly, Field used for Shipping Provider API. */
        additional_description?: string;
      }[];
      /** Selected Shipping Option */
      selected_shipping_option?: {
        description?: string;
        id?: string;
        /** @description Specified the type of shipping option. Flat rate, UPS, etc., */
        type?: string;
        image_url?: string;
        cost?: number;
        /** @description An estimate of the arrival time. */
        transit_time?: string;
        /** @description ReadOnly, Field used for Shipping Provider API. */
        additional_description?: string;
      };
      /** @description List of consignment discounts applied through coupons */
      coupon_discounts?: {
        /** @description Coupon code that applied this discount */
        code?: string;
        /** Format: double */
        amount?: number;
      }[];
      /** @description List of consignment discounts applied through cart level discounts */
      discounts?: {
        /** @description Discount rule ID that applied this discount */
        id?: number;
      }[];
      /**
       * Format: double
       * @description The shipping cost for this consignment including tax.
       */
      shipping_cost_inc_tax?: number;
      /**
       * Format: double
       * @description The shipping cost for this consignment excluding tax.
       */
      shipping_cost_ex_tax?: number;
      /**
       * Format: double
       * @description The handling cost of shipping for this consignment including tax.
       */
      handling_cost_inc_tax?: number;
      /**
       * Format: double
       * @description The handling cost of shipping for this consignment excluding tax.
       */
      handling_cost_ex_tax?: number;
      line_item_ids?: string[];
    }[];
    taxes?: {
      /** @description Name of the tax. */
      name?: string;
      /** Format: double */
      amount?: number;
    }[];
    /** @description Coupons applied at checkout level. */
    coupons?: definitions['AppliedCoupon'][];
    order_id?: string;
    /**
     * Format: double
     * @description Shipping cost before any discounts are applied including tax.
     */
    shipping_cost_total_inc_tax?: number;
    /**
     * Format: double
     * @description Shipping cost before any discounts are applied excluding tax.
     */
    shipping_cost_total_ex_tax?: number;
    /**
     * Format: double
     * @description Handling cost for all consignments including tax.
     */
    handling_cost_total_inc_tax?: number;
    /**
     * Format: double
     * @description Handling cost for all consignments excluding tax.
     */
    handling_cost_total_ex_tax?: number;
    /** Format: double */
    tax_total?: number;
    /**
     * Format: double
     * @description Subtotal of the checkout before applying item level discounts including tax.
     */
    subtotal_inc_tax?: number;
    /**
     * Format: double
     * @description Subtotal of the checkout before applying item level discounts excluding tax.
     */
    subtotal_ex_tax?: number;
    /**
     * Format: double
     * @description The total payable amount, before applying any store credit or gift certificate.
     */
    grand_total?: number;
    /** @description Time when the cart was created. */
    created_time?: string;
    /** @description Time when the cart was last updated. */
    updated_time?: string;
    /** @description Shopper's message provided as details for the order to be created from this checkout. */
    customer_message?: string;
    promotions?: {
      /** Banner */
      banners?: {
        /** @description Id of the promotion. */
        id?: string;
        /** @description Type of the banner */
        type?: string;
        /** @description An array of the locations where the banner will display */
        page?: string[];
        /** @description Text of the banner */
        text?: string;
      };
    };
  };
  /** Checkout_Put */
  Checkout_Put: {
    customer_message: string;
  };
  /** Applied Coupon */
  AppliedCoupon: {
    /** @description the coupon code */
    code: string;
    /** @description The coupon ID. */
    id?: number;
    /**
     * Format: double
     * @description The discounted amount applied within a given context.
     */
    discounted_amount?: number;
    /**
     * @description |Type `int`|Type Name|
     * |-|-|
     * |`0`|`per_item_discount`|
     * |`1`|`percentage_discount`|
     * |`2`|`per_total_discount`|
     * |`3`|`shipping_discount`|
     * |`4`|`free_shipping`|
     * |`5`|`promotion`|
     */
    coupon_type?: 1 | 2 | 3 | 4 | 5;
  };
  /** Address Properties */
  AddressProperties: {
    first_name?: string;
    last_name?: string;
    email: string;
    company?: string;
    address1?: string;
    address2?: string;
    city?: string;
    /** @description Represents state or province. */
    state_or_province?: string;
    state_or_province_code?: string;
    country_code: string;
    postal_code?: string;
    phone?: string;
    /** @description You can retreive custom fields from the [Get Form Fields](/api-reference/storefront/form-fields/form-fields/getformfields) endpoint. */
    custom_fields?: {
      field_id?: string;
      /** @description This can also be an array for fields that need to support list of values (e.g., a set of check boxes.) */
      field_value?: string;
    }[];
  };
  /** Create Consignment Request */
  CreateConsignmentRequest: {
    /** Address Properties */
    address?: {
      first_name?: string;
      last_name?: string;
      email: string;
      company?: string;
      address1?: string;
      address2?: string;
      city?: string;
      /** @description Represents state or province. */
      state_or_province?: string;
      state_or_province_code?: string;
      country_code: string;
      postal_code?: string;
      phone?: string;
      /** @description You can retreive custom fields from the [Get Form Fields](/api-reference/storefront/form-fields/form-fields/getformfields) endpoint. */
      custom_fields?: {
        field_id?: string;
        /** @description This can also be an array for fields that need to support list of values (e.g., a set of check boxes.) */
        field_value?: string;
      }[];
    };
    line_items?: {
      /** @description Corresponds to `line_items.physical_items[N].id` value from `GET`checkout response. */
      item_id: string;
      /** Format: int32 */
      quantity: number;
    }[];
  };
  /**
   * Update Consignment Request
   * @description One or more of these three fields are mandatory. `address` and `line_items` can be updated in one request. `shipping_option_id` has to be updated in a separate request since changing the address or line items can invalidate the previously available shipping options.
   */
  UpdateConsignmentRequest: {
    /** Address Properties */
    address?: {
      first_name?: string;
      last_name?: string;
      email: string;
      company?: string;
      address1?: string;
      address2?: string;
      city?: string;
      /** @description Represents state or province. */
      state_or_province?: string;
      state_or_province_code?: string;
      country_code: string;
      postal_code?: string;
      phone?: string;
      custom_fields?: {
        field_id?: string;
        /** @description This can also be an array for fields that need to support list of values (e.g., a set of check boxes.) */
        field_value?: string;
      }[];
    };
    line_items?: {
      /** @description Corresponds to `line_items.physical_items[N].id` value from `GET`checkout response. */
      item_id: string;
      /** Format: int32 */
      quantity: number;
    }[];
    shipping_option_id?: string;
  };
  /** Coupon Code Request */
  CouponCodeRequest: {
    /** @description Coupon codes have a 50 character limit. */
    coupon_code?: string;
  };
  /** Order */
  Order: {
    /**
     * @description The order Id.
     * @example 75
     */
    id?: number;
  };
  /** Checkouts Settings */
  CheckoutsSettings: {
    custom_checkout_script_url?: string;
    order_confirmation_use_custom_checkout_script?: boolean;
    custom_order_confirmation_script_url?: string;
  };
  /** Checkouts settings request */
  CheckoutsSettingsRequest: {
    /** @description Custom checkout script url to replace our default checkout. */
    custom_checkout_script_url?: string;
    /** @description When order_confirmation_use_custom_checkout_script=true we default custom_order_confirmation_script_url to empty string. */
    order_confirmation_use_custom_checkout_script?: boolean;
    /** @description Custom order confirmation script url to replace our default order confirmation. */
    custom_order_confirmation_script_url?: string;
  };
}

export interface parameters {
  /** @description Id of the Checkout */
  checkoutId: string;
  addressId: number;
  consignmentId: string;
  /** @description The actual couponCode, not the couponId. */
  couponCode: string;
  /** @default application/json */
  Accept: string;
  /** @default application/json */
  'Content-Type': string;
  includeShippingOption: 'consignments.available_shipping_options';
}

export interface responses {
  CheckoutResponse: {
    schema: {
      data?: definitions['Checkout'];
    };
  };
  order_Resp: {
    schema: {
      data?: definitions['Order'];
      meta?: { [key: string]: unknown };
    };
  };
  checkout_settings_resp: {
    schema: {
      data?: definitions['CheckoutsSettings'];
      meta?: { [key: string]: unknown };
    };
  };
}

export interface operations {
  /**
   * Returns a *Checkout*.
   *
   * **Notes**
   *
   * The cart ID and checkout ID are the same.
   */
  CheckoutsByCheckoutIdGet: {
    parameters: {
      path: {
        store_hash: string;
        /** Id of the Checkout */
        checkoutId: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /**
         * * `cart.line_items.physical_items.options` - physical options
         * * `cart.line_items.digital_items.options` - digital options
         * * `consignments.available_shipping_options` - shipping options
         * * `promotions.banners` - promotion options
         */
        include?:
          | 'cart.line_items.physical_items.options'
          | 'cart.line_items.digital_items.options'
          | 'consignments.available_shipping_options'
          | 'promotions.banners';
      };
    };
    responses: {
      200: responses['CheckoutResponse'];
      /** When a given checkout ID is not found. */
      404: {
        schema: {
          errors?: {
            /** Format: int32 */
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          }[];
        };
      };
    };
  };
  /**
   * Change customer message to an existing *Checkout*.
   *
   * **Limits:**
   * * 2000 characters for customer message
   */
  CheckoutsByCheckoutIdPut: {
    parameters: {
      path: {
        store_hash: string;
        /** ID of the Checkout */
        checkoutId: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        /** `customer_message` is required (max length is 2000). */
        body: definitions['Checkout_Put'];
      };
    };
    responses: {
      200: responses['CheckoutResponse'];
    };
  };
  /**
   * Adds a discount to an existing *checkout*.
   *
   * This discount only applies to `line_items`. When you call this API, you clear out all existing discounts applied to line items, including product and order-based discounts.
   *
   * This endpoint splits the discount between line items based on the item value.
   *
   * Required Fields
   * * discounted_amount
   */
  'post-store_hash-v3-checkouts-checkoutId-discounts': {
    parameters: {
      path: {
        store_hash: string;
        checkoutId: string;
      };
      body: {
        body?: {
          cart?: {
            discounts?: {
              /** @example 10 */
              discounted_amount: number;
              /** @example manual */
              name?: string;
            }[];
          };
        };
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: responses['CheckoutResponse'];
    };
  };
  /**
   * Adds a billing address to an existing *Checkout*.
   *
   * **Required Fields**
   * * email
   * * country_code
   */
  CheckoutsBillingAddressByCheckoutIdPost: {
    parameters: {
      path: {
        store_hash: string;
        /** Id of the Checkout */
        checkoutId: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        /** Either email or countryCode is required. */
        body: definitions['AddressProperties'];
      };
    };
    responses: {
      200: responses['CheckoutResponse'];
    };
  };
  /** Updates an existing billing address on *Checkout*. */
  CheckoutsBillingAddressByCheckoutIdAndAddressIdPut: {
    parameters: {
      path: {
        store_hash: string;
        /** Id of the Checkout */
        checkoutId: string;
        addressId: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: definitions['AddressProperties'];
      };
    };
    responses: {
      200: responses['CheckoutResponse'];
    };
  };
  /**
   * Adds a new consignment to a checkout.
   *
   * **Limits:**
   * * 50 line item limit for guest shoppers
   * * 600 line item limit for logged-in shoppers
   *
   * For more information about working with consignments, see [Checkout consignment](/api-docs/checkouts/checkout-consignment).
   *
   * Though the only required `address` properties to create a consignment are `email` and `country_code`, to successfully [create an order](/api-reference/store-management/checkouts/checkout-orders/createanorder) the `address` requires the following properties:
   * * `first_name`
   * * `last_name`
   * * `address1`
   * * `city`
   * * `country`
   * * `email`
   * * `country_code`
   *
   * Depending on the country, the following `address` properties can also be required:
   *
   * * `postal_code`
   * * `state_or_province`
   */
  CheckoutsConsignmentsByCheckoutIdPost: {
    parameters: {
      path: {
        store_hash: string;
        /** Id of the Checkout */
        checkoutId: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: definitions['CreateConsignmentRequest'];
      };
      query: {
        include?: parameters['includeShippingOption'];
      };
    };
    responses: {
      200: responses['CheckoutResponse'];
    };
  };
  /**
   * Updates an existing consignment. Address, line item IDs or the shipping option ID can be updated using this endpoint.
   *
   * There are two steps to add a new address and shipping options with line items.
   * 1. Add a new [consignment](/api-reference/store-management/checkouts/checkout-consignments/checkoutsconsignmentsbycheckoutidpost) to a checkout.
   * 2. Assign a shipping option to the new consignment by sending a `PUT` request to update the consignment's `shipping_option_id` with a returned value from `data.consignments[N].available_shipping_option[N].id` in step one.
   */
  CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPut: {
    parameters: {
      path: {
        store_hash: string;
        /** Id of the Checkout */
        checkoutId: string;
        consignmentId: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: definitions['UpdateConsignmentRequest'];
      };
      query: {
        /** Include to get available shipping options */
        include?: 'consignments.available_shipping_options';
      };
    };
    responses: {
      200: responses['CheckoutResponse'];
    };
  };
  /**
   * Removes an existing consignment from a checkout.
   *
   * Removing the last consigment will remove the Cart from the customer it is assigned to. Create a new redirect url for the customer to access it again.
   */
  CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDelete: {
    parameters: {
      path: {
        store_hash: string;
        /** Id of the Checkout */
        checkoutId: string;
        consignmentId: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: responses['CheckoutResponse'];
    };
  };
  /**
   * Adds a *Coupon Code* to *Checkout*.
   *
   * **Required Fields**
   * * coupon_code
   *
   * **Limits**
   * * Coupon codes have a 50 character limit.
   */
  CheckoutsCouponsByCheckoutIdPost: {
    parameters: {
      path: {
        store_hash: string;
        /** Id of the Checkout */
        checkoutId: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: definitions['CouponCodeRequest'];
      };
    };
    responses: {
      200: responses['CheckoutResponse'];
    };
  };
  /** Deletes a *Coupon Code* from *Checkout*. */
  CheckoutsCouponsByCheckoutIdAndCouponCodeDelete: {
    parameters: {
      path: {
        store_hash: string;
        /** Id of the Checkout */
        checkoutId: string;
        /** The actual couponCode, not the couponId. */
        couponCode: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: responses['CheckoutResponse'];
    };
  };
  /**
   * Creates an order.
   *
   * ## Usage notes
   * * Orders created will be set to incomplete order status.
   * * You can create as many orders from the same order(cart) as you want.
   * * Order duplication creates the same order with a new order number with the incomplete status.
   * * Once the order is paid, then the cart is deleted.
   * * Cart deletion occurs if you are using BigCommerce to accept payments on orders.
   */
  createAnOrder: {
    parameters: {
      path: {
        /** ID of the checkout (same as the cart ID). */
        checkoutId: string;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: responses['order_Resp'];
    };
  };
}

export interface external {}
