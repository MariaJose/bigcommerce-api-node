/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v2/customers': {
    /** Returns a list of all *Customers*. Default sorting is by customer id, from lowest to highest. Optional parameters can be passed in. */
    get: operations['getAllCustomers'];
    /**
     * Creates a *Customer*.
     *
     * **Required Fields**
     * *   `first_name`
     * *   `last_name`
     * *   `email`
     *
     * **Read Only Fields**
     * *   `id`
     * *   `date_created`
     * *   `date_modified`
     * *   `accepts_marketing`
     * *   `addresses`
     * *   `form_fields`
     *
     * ## Notes
     *
     * The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.
     *
     * When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.
     *
     * ## Updating Passwords
     *
     * To manually update a customer password in the same way as the control panel, supply a value for the password field:
     *
     * ```json
     * {
     *     "_authentication": {
     *         "password": "12w69Y217PYR96J"
     *     }
     * }
     * ```
     *
     * ## Confirming Passwords
     *
     * An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:
     *
     * ```json
     * {
     *     "_authentication": {
     *        "password": "12w69Y217PYR96J",
     *        "password_confirmation": "12w69Y217PYR96J"
     *     }
     * }
     * ```
     *
     * ## Forcing Password Resets
     *
     * To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:
     *
     * ```json
     * {
     *     "_authentication": {
     *         "force_reset": true
     *     }
     * }
     */
    post: operations['createANewCustomer'];
    /** By default, it deletes all *Customers*. Up to 100 customers per batch can be deleted. */
    delete: operations['deleteAllCustomers'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/customers/{customer_id}': {
    /** Returns a single *Customer*. */
    get: operations['getACustomer'];
    /**
     * Updates a *Customer*.
     *
     * **Read Only Fields**
     * *   id
     * *   date_created
     * *   date_modified
     * *   accepts_marketing
     * *   addresses
     * *   form_fields
     *
     * ## Notes
     *
     * The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.
     *
     * When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.
     *
     * ## Updating Passwords
     *
     * To manually update a customer password in the same way as the control panel, supply a value for the `password` field:
     *
     * ```
     * {
     *     "_authentication": {
     *         "password": "12w69Y217PYR96J"
     *     }
     * }
     * ```
     *
     * #### Confirming Passwords
     *
     * An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:
     *
     * ```
     * {
     *     "_authentication": {
     *        "password": "12w69Y217PYR96J"
     *        "password_confirmation": "12w69Y217PYR96J"
     *     }
     * }
     * ```
     *
     * #### Forcing Password Resets
     *
     * To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:
     *
     * ```
     * {
     *     "_authentication": {
     *         "force_reset": true
     *     }
     * }
     * ```
     */
    put: operations['updateACustomer'];
    /** Deletes a *Customer*. */
    delete: operations['deleteACustomer'];
    parameters: {
      path: {
        /** Id of the customer */
        customer_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/customers/count': {
    /** Returns a count of all *Customers*. */
    get: operations['getACountOfCustomers'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/customers/{customer_id}/validate': {
    /**
     * **This endpoint has special rate limiting protections to protect against abuse.**
     *
     * Provided a password, will return a true/false response indicating if the provided password matches the customer’s current password. This endpoint is useful if you want to power the login of another system using BigCommerce’s stored customer accounts, or as a safe way to migrate passwords to another system (by checking them against BigCommerce’s password, and if correct, storing it in another system securely.)If the password matches what’s stored against the customer account, the response will be:
     *
     * ```json
     * {
     *     "success": "true"
     * }
     * ```
     * If the password does NOT match, the response will instead be:
     *
     * ```json
     * {
     *     "success": "false"
     * }
     * ```
     */
    post: operations['validateCustomerPassword'];
    parameters: {
      path: {
        /** Id of the customer */
        customer_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/customers/{customer_id}/addresses': {
    /**
     * Returns a list of *Customer Addresses*. Returns the addresses belonging to a customer. Default sorting is by address id, from lowest to highest.
     *
     * The maximum limit is 250. If a limit isn’t provided, up to 50 `customer_addresses` are returned by default.
     */
    get: operations['getAllCustomerAddresses'];
    /**
     * Creates a new *Customer Address*. (Note: The “state” property cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
     *
     * **Required Fields**
     * *   first_name
     * *   last_name
     * *   phone
     * *   street_1
     * *   city
     * *   state
     * *   zip
     * *   country
     *
     * **Read Only Fields**
     * *   id
     * *   country_iso2
     */
    post: operations['createACustomerAddress'];
    /** By default, it deletes all *Customer Addresses*. */
    delete: operations['deleteAllCustomerAddresses'];
    parameters: {
      path: {
        /** Id of the customer */
        customer_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/customers/{customer_id}/addresses/{customer_address_id}': {
    /** Returns a *Customer Address*. */
    get: operations['getACustomerAddress'];
    /**
     * Updates a *Customer Address*.
     *
     * **Read Only Fields**
     * *   id
     * *   country_iso2
     */
    put: operations['updateACustomerAddress'];
    /** Deletes a *Customer Address*. */
    delete: operations['deletesACustomerAddress'];
    parameters: {
      path: {
        /** Id of the customer */
        customer_id: number;
        /** Id of the customer address. */
        customer_address_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/customers/{customer_id}/addresses/count': {
    /** Returns a count of addresses for a customer. */
    get: operations['getACountofCustomerAddresses'];
    parameters: {
      path: {
        /** Id of the customer */
        customer_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/customer_groups': {
    /** Returns a list of *Customer Groups*. Default sorting is by customer-group id, from lowest to highest. */
    get: operations['getAllCustomerGroups'];
    /**
     * Creates a *Customer Group*.
     *
     * **Required Fields**
     * * name
     */
    post: operations['createACustomerGroup'];
    /**
     * By default, it deletes all *Customer Groups*.
     *
     * All existing customers are unassigned from the group when it is deleted.
     */
    delete: operations['deleteAllCustomerGroups'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/customer_groups/{customer_group_id}': {
    /** Returns a *Customer Group*. */
    get: operations['getACustomerGroup'];
    /**
     * Updates a *Customer Group*.
     *
     * **Notes**
     *
     * Any combination of fields can be updated at once. Discount rules are treated in bulk. The entire set of rules is overwritten when a request is sent.
     */
    put: operations['updateACustomerGroup'];
    /**
     * Deletes a *Customer Group*.
     *
     * **Notes**
     *
     * All existing customers are unassigned from the group when it is deleted.
     */
    delete: operations['deleteACustomerGroup'];
    parameters: {
      path: {
        /** Id of the customer group */
        customer_group_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/customer_groups/count': {
    /** Returns a count of all *Customer Groups*. */
    get: operations['getACountOfCustomerGroups'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
}

export interface definitions {
  /** billingAddress_Full */
  billingAddress_Full: {
    /** @example Jane */
    first_name?: string;
    /** @example Doe */
    last_name?: string;
    company?: string;
    /** @example 123 Main Street */
    street_1?: string;
    street_2?: string;
    /** @example Austin */
    city?: string;
    /** @example TX */
    state?: string;
    /** @example 12345 */
    zip?: string;
    /** @example United States */
    country?: string;
    /** @example US */
    country_iso2?: string;
    phone?: string;
    /** @example janedoe@example.com */
    email?: string;
    form_fields?: {
      /**
       * @description Name of the form field
       * @example License Id
       */
      name?: string;
      /**
       * @description Value of the form field
       * @example 123BAF
       */
      value?: string;
    }[];
  };
  /** customerFormFields */
  customerFormFields: {
    /**
     * @description Name of the form field
     * @example License Id
     */
    name?: string;
    /**
     * @description Value of the form field
     * @example 123BAF
     */
    value?: string;
  };
  /** shippingAddress_Full */
  shippingAddress_Full: {
    /**
     * @description URL of the shipping address for api requests
     * @example https://api.bigcommerce.com/stores/{$$.env.store_hash}/v2/orders/129/shippingaddresses
     */
    url?: string;
    /** @example /orders/129/shippingaddresses */
    resource?: string;
  };
  /**
   * customer_Full
   * @example [object Object]
   */
  customer_Full: {
    /**
     * @description Unique numeric ID of this customer. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     * @example 1
     */
    id?: number;
    /**
     * Format: date-time
     * @description Date on which the customer registered from the storefront or was created in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     * @example Thu, 11 Jan 2018 20:57:52 +0000
     */
    date_created?: string;
    /**
     * Format: date-time
     * @description Date on which the customer updated their details in the storefront or was updated in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     *
     * @example Tue, 10 Apr 2018 18:59:05 +0000
     */
    date_modified?: string;
  } & definitions['customer_Base'];
  /** categoryAccessLevel_Full */
  categoryAccessLevel_Full: {
    /**
     * @description + `all` - Customers can access all categories
     *  + `specific`  - Customers can access a specific list of categories
     * + `none` - Customers are prevented from viewing any of the categories in this group.
     */
    type?: 'all' | 'specific' | 'none';
    /**
     * @description Is an array of category IDs and should be supplied only if `type` is specific.
     * @example 18,19,23,34
     */
    categories?: number[];
  };
  /**
   * count_Full
   * @example [object Object]
   */
  count_Full: {
    /** @example 27 */
    count?: number;
  };
  /**
   * customerAddress_Full
   * @example [object Object]
   */
  customerAddress_Full: {
    /**
     * @description ID of this customer address. READ-ONLY
     * @example 3
     */
    id?: number;
    /**
     * @description 2-letter ISO Alpha-2 code for the customer’s country. READ-ONLY
     * @example US
     */
    country_iso2?: string;
  } & definitions['customerAddress_Base'];
  /**
   * customerGroup_Full
   * @description When creating a customer group category discount using the API it defaults to "products in this category and its subcategories". In the [Control Panel](https://support.bigcommerce.com/s/article/Customer-Groups#pricing) this can be changed to either "products in this category only" or "products in this category and its subcategories". There are currently no settings to change this behavior via API.
   */
  customerGroup_Full: {
    /**
     * @description Id of the customer group
     * @example 1
     */
    id?: number;
    /**
     * @description Name of the group
     * @example Wholesale
     */
    name?: string;
    /** @description Determines whether new customers are assigned to this group by default. */
    is_default?: boolean;
    category_access?: definitions['categoryAccessLevel_Full'];
    /** @description A collection of discount rules that are automatically applied to customers who are members of the group */
    discount_rules?: {
      type?: 'price_list' | 'all' | 'category' | 'product';
      method?: 'percent' | 'fixed' | 'price';
      /**
       * @description A float that specifies the value applied to the price modified
       * @example "5.0000" (Float, Float as String, Integer)
       */
      amount?: string;
      /**
       * @description If a customer group is assigned to a price list,`method` and `amount` are not shown. `type` and `price_list_id` are returned.
       * @example 3
       */
      price_list_id?: number;
    }[];
    /** @description If the groups is for guests. There can only be one customer group for guests at a time. */
    is_group_for_guests?: boolean;
  };
  /**
   * country_Full
   * @example [object Object]
   */
  country_Full: {
    /**
     * @description Id of the country.
     * @example 13
     */
    id?: number;
    /**
     * @description Country name.
     * @example Australia
     */
    country?: string;
    /**
     * @description 2-letter country code.
     * @example AU
     */
    country_iso2?: string;
    /**
     * @description 3-letter country code.
     * @example AUS
     */
    country_iso3?: string;
    /** States Resource */
    states?: {
      /** @example https://api.bigcommerce.com/stores/{$$.env.store_hash}/v2/countries/13/states */
      url?: string;
      /** @example /countries/13/states */
      resource?: string;
    };
  };
  /** statesResource_Full */
  statesResource_Full: {
    /** @example https://api.bigcommerce.com/stores/{$$.env.store_hash}/v2/countries/13/states */
    url?: string;
    /** @example /countries/13/states */
    resource?: string;
  };
  /**
   * state_Full
   * @example [object Object]
   */
  state_Full: {
    /**
     * @description Numeric ID of the state/province.
     * @example 208
     */
    id?: number;
    /**
     * @description Name of the state/province.
     * @example Australian Capital Territory
     */
    state?: string;
    /**
     * @description Abbreviation for the state/province.
     * @example ACT
     */
    state_abbreviation?: string;
    /**
     * @description Numeric ID of the state’s/province’s associated country.
     * @example 13
     */
    country_id?: number;
  };
  /**
   * customerGroup_Post
   * @description When creating a customer group category discount using the API it defaults to "products in this category and its subcategories". In the [Control Panel](https://support.bigcommerce.com/s/article/Customer-Groups#pricing) this can be changed to either "products in this category only" or "products in this category and its subcategories". There are currently no settings to change this behavior via API.
   */
  customerGroup_Post: {
    /**
     * @description Name of the group
     * @example Wholesale
     */
    name?: string;
    /** @description Determines whether new customers are assigned to this group by default. */
    is_default?: boolean;
    category_access?: definitions['categoryAccessLevel_Full'];
    /** @description A collection of discount rules that are automatically applied to customers who are members of the group */
    discount_rules?: {
      type?: 'price_list' | 'all' | 'category' | 'product';
      method?: 'percent' | 'fixed' | 'price';
      /**
       * @description A float that specifies the value applied to the price modified
       * @example "5.0000" (Float, Float as String, Integer)
       */
      amount?: string;
      /**
       * @description If a customer group is assigned to a price list,`method` and `amount` are not shown. `type` and `price_list_id` are returned.
       * @example 3
       */
      price_list_id?: number;
    }[];
    /** @description If the groups is for guests. There can only be one customer group for guests at a time. */
    is_group_for_guests?: boolean;
  };
  validatePassword: {
    /** @description Will return `true` or `false` */
    success?: boolean;
  };
  /**
   * customer_Base
   * @example [object Object]
   */
  customer_Base: {
    /** @description Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If a password is not supplied, it is generated automatically. For further information about using this object, please see the Customers resource documentation. */
    _authentication?: {
      force_reset?: boolean;
      password?: string;
      password_confirmation?: string;
    };
    /**
     * @description The name of the company for which the customer works.
     * @example BigCommerce
     */
    company?: string;
    /**
     * @description First name of the customer.
     * @example Jane
     */
    first_name: string;
    /**
     * @description Last name of the customer.
     * @example Doe
     */
    last_name: string;
    /**
     * @description Email address of the customer.
     * @example janedoe@example.com
     */
    email: string;
    /**
     * @description Phone number of the customer.
     * @example 1234567890
     */
    phone?: string;
    /** @description The amount of credit the customer has. (Float, Float as String, Integer) */
    store_credit?: string;
    /**
     * @description The customer’s IP address when they signed up.
     * @example 12.345.678.910
     */
    registration_ip_address?: string;
    /**
     * @description The group to which the customer belongs.
     * @example 2
     */
    customer_group_id?: number;
    /** @description Store-owner notes on the customer. */
    notes?: string;
    /** @description If applicable, the tax-exempt category of the shopper’s customer account. You can apply a tax-exempt category to multiple customers. This code should match the exemption codes provided by the third-party integration. */
    tax_exempt_category?: string;
    /**
     * @description If the customer accepts product review emails or abandon cart emails. Read-Only.
     * @example true
     */
    accepts_marketing?: boolean;
    /** Address Field Resource */
    addresses?: {
      /**
       * @description Full URL of where the resource is located.
       * @example https://api.bigcommerce.com/stores/{$$.env.store_hash}/v2/customers/5/addresses
       */
      url?: string;
      /**
       * @description Resource being accessed.
       * @example /customers/5/addresses
       */
      resource?: string;
    };
    /** @description Array of custom fields. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
    form_fields?: {
      /**
       * @description Name of the form field
       * @example License Id
       */
      name?: string;
      /**
       * @description Value of the form field
       * @example 123BAF
       */
      value?: string;
    }[];
    /** @description Force a password change on next login. */
    reset_pass_on_login?: boolean;
  };
  /**
   * customerAddress_Base
   * @example [object Object]
   */
  customerAddress_Base: {
    /**
     * @description ID of the associated customer.
     * @example 5
     */
    customer_id?: number;
    /**
     * @description The customer’s first name.
     * @example Jane
     */
    first_name: string;
    /**
     * @description The customer’s last name.
     * @example Doe
     */
    last_name: string;
    /**
     * @description The customer’s company name.
     * @example BigCommerce
     */
    company?: string;
    /**
     * @description The customer’s street address, line 1.
     * @example 123 Main Street
     */
    street_1: string;
    /** @description The customer’s street address, line 2. */
    street_2?: string;
    /**
     * @description The customer’s city/town/suburb.
     * @example Austin
     */
    city: string;
    /**
     * @description The customer’s state/province. Do not abbreviate the state; spell out the entire word, e.g.: California. (Cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
     * @example Texas
     */
    state: string;
    /**
     * @description The customer’s ZIP or postal code.
     * @example 78726
     */
    zip: string;
    /**
     * @description The customer’s country. Must be the full country name.
     * @example United States
     */
    country: string;
    /**
     * @description The customer’s phone number.
     * @example 123-345-7890
     */
    phone: string;
    /** @example residential */
    address_type?: 'residential' | 'commercial';
  };
}

export interface parameters {
  /** @description Id of the customer */
  customer_id: number;
  /** @description Id of the customer group */
  customer_group_id: number;
  /** @description Id of the customer address. */
  customer_address_id: number;
  /** @description If the groups is for guests. There can only be one customer group for guests at a time. */
  is_group_for_guests: boolean;
}

export interface responses {}

export interface operations {
  /** Returns a list of all *Customers*. Default sorting is by customer id, from lowest to highest. Optional parameters can be passed in. */
  getAllCustomers: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        first_name?: string;
        last_name?: string;
        company?: string;
        email?: string;
        phone?: string;
        store_credit?: string;
        customer_group_id?: number;
        min_id?: number;
        max_id?: number;
        min_date_created?: string;
        'max_date_created	'?: string;
        min_date_modified?: string;
        max_date_modified?: string;
        tax_exempt_category?: string;
      };
    };
    responses: {
      200: {
        schema: definitions['customer_Full'][];
      };
    };
  };
  /**
   * Creates a *Customer*.
   *
   * **Required Fields**
   * *   `first_name`
   * *   `last_name`
   * *   `email`
   *
   * **Read Only Fields**
   * *   `id`
   * *   `date_created`
   * *   `date_modified`
   * *   `accepts_marketing`
   * *   `addresses`
   * *   `form_fields`
   *
   * ## Notes
   *
   * The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.
   *
   * When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.
   *
   * ## Updating Passwords
   *
   * To manually update a customer password in the same way as the control panel, supply a value for the password field:
   *
   * ```json
   * {
   *     "_authentication": {
   *         "password": "12w69Y217PYR96J"
   *     }
   * }
   * ```
   *
   * ## Confirming Passwords
   *
   * An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:
   *
   * ```json
   * {
   *     "_authentication": {
   *        "password": "12w69Y217PYR96J",
   *        "password_confirmation": "12w69Y217PYR96J"
   *     }
   * }
   * ```
   *
   * ## Forcing Password Resets
   *
   * To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:
   *
   * ```json
   * {
   *     "_authentication": {
   *         "force_reset": true
   *     }
   * }
   */
  createANewCustomer: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: {
          /** @description This can vary depending on the action being taken to update, validate or force a password change. See Update Customer */
          _authentication?: { [key: string]: unknown };
          company?: string;
          first_name?: string;
          last_name?: string;
          phone?: string;
          date_modified?: string;
          store_credit?: number;
          registration_ip_address?: string;
          customer_group_id?: number;
          notes?: string;
          tax_exempt_category?: string;
        };
      };
    };
    responses: {
      200: {
        schema: definitions['customer_Full'];
      };
    };
  };
  /** By default, it deletes all *Customers*. Up to 100 customers per batch can be deleted. */
  deleteAllCustomers: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a single *Customer*. */
  getACustomer: {
    parameters: {
      path: {
        /** Unique numeric ID of this customer. */
        customer_id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        schema: definitions['customer_Full'];
      };
    };
  };
  /**
   * Updates a *Customer*.
   *
   * **Read Only Fields**
   * *   id
   * *   date_created
   * *   date_modified
   * *   accepts_marketing
   * *   addresses
   * *   form_fields
   *
   * ## Notes
   *
   * The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.
   *
   * When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.
   *
   * ## Updating Passwords
   *
   * To manually update a customer password in the same way as the control panel, supply a value for the `password` field:
   *
   * ```
   * {
   *     "_authentication": {
   *         "password": "12w69Y217PYR96J"
   *     }
   * }
   * ```
   *
   * #### Confirming Passwords
   *
   * An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:
   *
   * ```
   * {
   *     "_authentication": {
   *        "password": "12w69Y217PYR96J"
   *        "password_confirmation": "12w69Y217PYR96J"
   *     }
   * }
   * ```
   *
   * #### Forcing Password Resets
   *
   * To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:
   *
   * ```
   * {
   *     "_authentication": {
   *         "force_reset": true
   *     }
   * }
   * ```
   */
  updateACustomer: {
    parameters: {
      path: {
        /** Id of the customer */
        customer_id: number;
        store_hash: string;
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
      body: {
        body?: {
          /**
           * @description Unique numeric ID of this customer. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
           * @example 1
           */
          id?: number;
          /** @description Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If a password is not supplied, it is generated automatically. For further information about using this object, please see the Customers resource documentation. */
          _authentication?: {
            force_reset?: boolean;
            password?: string;
            password_confirmation?: string;
          };
          /**
           * @description The name of the company for which the customer works.
           * @example BigCommerce
           */
          company?: string;
          /**
           * @description First name of the customer.
           * @example Jane
           */
          first_name: string;
          /**
           * @description Last name of the customer.
           * @example Doe
           */
          last_name: string;
          /**
           * @description Email address of the customer.
           * @example janedoe@example.com
           */
          email: string;
          /**
           * @description Phone number of the customer.
           * @example 1234567890
           */
          phone?: string;
          /**
           * Format: date-time
           * @description Date on which the customer registered from the storefront or was created in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
           * @example Thu, 11 Jan 2018 20:57:52 +0000
           */
          date_created?: string;
          /**
           * Format: date-time
           * @description Date on which the customer updated their details in the storefront or was updated in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
           *
           * @example Tue, 10 Apr 2018 18:59:05 +0000
           */
          date_modified?: string;
          /** @description The amount of credit the customer has. (Float, Float as String, Integer) */
          store_credit?: string;
          /**
           * @description The customer’s IP address when they signed up.
           * @example 12.345.678.910
           */
          registration_ip_address?: string;
          /**
           * @description The group to which the customer belongs.
           * @example 2
           */
          customer_group_id?: number;
          /** @description Store-owner notes on the customer. */
          notes?: string;
          /** @description If applicable, the tax-exempt category of the shopper’s customer account. You can apply a tax-exempt category to multiple customers. This code should match the exemption codes provided by the third-party integration. */
          tax_exempt_category?: string;
          /**
           * @description If the customer accepts product review emails or abandon cart emails. Read-Only.
           * @example true
           */
          accepts_marketing?: boolean;
          /** Address Field Resource */
          addresses?: {
            /**
             * @description Full URL of where the resource is located.
             * @example https://api.bigcommerce.com/stores/{$$.env.store_hash}/v2/customers/5/addresses
             */
            url?: string;
            /**
             * @description Resource being accessed.
             * @example /customers/5/addresses
             */
            resource?: string;
          };
          /** @description Array of custom fields. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
          form_fields?: {
            /**
             * @description Name of the form field
             * @example License Id
             */
            name?: string;
            /**
             * @description Value of the form field
             * @example 123BAF
             */
            value?: string;
          }[];
          /** @description Force a password change on next login. */
          reset_pass_on_login?: boolean;
        };
      };
    };
    responses: {
      200: {
        schema: definitions['customer_Base'];
      };
    };
  };
  /** Deletes a *Customer*. */
  deleteACustomer: {
    parameters: {
      path: {
        /** Id of the customer */
        customer_id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a count of all *Customers*. */
  getACountOfCustomers: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        schema: definitions['count_Full'];
      };
    };
  };
  /**
   * **This endpoint has special rate limiting protections to protect against abuse.**
   *
   * Provided a password, will return a true/false response indicating if the provided password matches the customer’s current password. This endpoint is useful if you want to power the login of another system using BigCommerce’s stored customer accounts, or as a safe way to migrate passwords to another system (by checking them against BigCommerce’s password, and if correct, storing it in another system securely.)If the password matches what’s stored against the customer account, the response will be:
   *
   * ```json
   * {
   *     "success": "true"
   * }
   * ```
   * If the password does NOT match, the response will instead be:
   *
   * ```json
   * {
   *     "success": "false"
   * }
   * ```
   */
  validateCustomerPassword: {
    parameters: {
      path: {
        /** Id of the customer */
        customer_id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: {
          /** @description String to run against customer password. Will return a true or false. */
          password?: string;
        };
      };
    };
    responses: {
      200: {
        schema: definitions['validatePassword'];
      };
    };
  };
  /**
   * Returns a list of *Customer Addresses*. Returns the addresses belonging to a customer. Default sorting is by address id, from lowest to highest.
   *
   * The maximum limit is 250. If a limit isn’t provided, up to 50 `customer_addresses` are returned by default.
   */
  getAllCustomerAddresses: {
    parameters: {
      path: {
        /** ID of the customer */
        customer_id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** Number of pages */
        page?: number;
        /** Count per page */
        limit?: number;
      };
    };
    responses: {
      200: {
        schema: definitions['customerAddress_Full'][];
      };
    };
  };
  /**
   * Creates a new *Customer Address*. (Note: The “state” property cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
   *
   * **Required Fields**
   * *   first_name
   * *   last_name
   * *   phone
   * *   street_1
   * *   city
   * *   state
   * *   zip
   * *   country
   *
   * **Read Only Fields**
   * *   id
   * *   country_iso2
   */
  createACustomerAddress: {
    parameters: {
      path: {
        /** ID of the customer */
        customer_id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: definitions['customerAddress_Base'];
      };
    };
    responses: {
      200: {
        schema: definitions['customerAddress_Full'];
      };
    };
  };
  /** By default, it deletes all *Customer Addresses*. */
  deleteAllCustomerAddresses: {
    parameters: {
      path: {
        /** Id of the customer */
        customer_id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** Number of pages */
        page?: number;
        /** Count per page */
        limit?: number;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a *Customer Address*. */
  getACustomerAddress: {
    parameters: {
      path: {
        /** ID of the customer */
        customer_id: number;
        /** ID of the customer address */
        customer_address_id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** Number of pages */
        page?: number;
        /** Count per page */
        limit?: number;
      };
    };
    responses: {
      200: {
        schema: definitions['customerAddress_Full'];
      };
    };
  };
  /**
   * Updates a *Customer Address*.
   *
   * **Read Only Fields**
   * *   id
   * *   country_iso2
   */
  updateACustomerAddress: {
    parameters: {
      path: {
        /** ID of this customer */
        customer_id: number;
        /** ID of the customer address. */
        customer_address_id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: {
          /**
           * @description ID of this customer address. READ-ONLY
           * @example 3
           */
          id?: number;
          /**
           * @description ID of the associated customer.
           * @example 5
           */
          customer_id?: number;
          /**
           * @description The customer’s first name.
           * @example Jane
           */
          first_name: string;
          /**
           * @description The customer’s last name.
           * @example Doe
           */
          last_name: string;
          /**
           * @description The customer’s company name.
           * @example BigCommerce
           */
          company?: string;
          /**
           * @description The customer’s street address, line 1.
           * @example 123 Main Street
           */
          street_1: string;
          /** @description The customer’s street address, line 2. */
          street_2?: string;
          /**
           * @description The customer’s city/town/suburb.
           * @example Austin
           */
          city: string;
          /**
           * @description The customer’s state/province. Do not abbreviate the state; spell out the entire word, e.g.: California. (Cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
           * @example Texas
           */
          state: string;
          /**
           * @description The customer’s ZIP or postal code.
           * @example 78726
           */
          zip: string;
          /**
           * @description The customer’s country. Must be the full country name.
           * @example United States
           */
          country: string;
          /**
           * @description 2-letter ISO Alpha-2 code for the customer’s country. READ-ONLY
           * @example US
           */
          country_iso2?: string;
          /**
           * @description The customer’s phone number.
           * @example 123-345-7890
           */
          phone: string;
          /** @example residential */
          address_type?: 'residential' | 'commercial';
        };
      };
    };
    responses: {
      200: {
        schema: definitions['customerAddress_Full'];
      };
    };
  };
  /** Deletes a *Customer Address*. */
  deletesACustomerAddress: {
    parameters: {
      path: {
        /** Id of the customer */
        customer_id: number;
        /** Id of the customer address. */
        customer_address_id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a count of addresses for a customer. */
  getACountofCustomerAddresses: {
    parameters: {
      path: {
        /** Id of the customer */
        customer_id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** Number of pages */
        page?: number;
        /** Count per page */
        limit?: number;
      };
    };
    responses: {
      200: {
        schema: definitions['count_Full'];
      };
    };
  };
  /** Returns a list of *Customer Groups*. Default sorting is by customer-group id, from lowest to highest. */
  getAllCustomerGroups: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** Number of pages */
        page?: number;
        /** Count per page */
        limit?: number;
        /** Filter customer groups by exact name match. Can use `name:like` to filter using a fuzzy matching method. This is good for implementing search. */
        name?: string;
        /** If customers who signup are added to this group by default */
        is_default?: boolean;
        /** If the groups is for guests. There can only be one customer group for guests at a time. */
        is_group_for_guests?: parameters['is_group_for_guests'];
      };
    };
    responses: {
      200: {
        schema: definitions['customerGroup_Full'][];
      };
    };
  };
  /**
   * Creates a *Customer Group*.
   *
   * **Required Fields**
   * * name
   */
  createACustomerGroup: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
        'X-Auth-Client': string;
        'X-Auth-Token': string;
      };
      body: {
        body: definitions['customerGroup_Post'];
      };
    };
    responses: {
      200: {
        schema: definitions['customerGroup_Full'];
      };
      /** The customer group was created, but the sitewide discount update failed. You may retry the request. */
      207: {
        schema: {
          status?: number;
          message?: string;
        };
      };
    };
  };
  /**
   * By default, it deletes all *Customer Groups*.
   *
   * All existing customers are unassigned from the group when it is deleted.
   */
  deleteAllCustomerGroups: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a *Customer Group*. */
  getACustomerGroup: {
    parameters: {
      path: {
        /** Id of the customer group */
        customer_group_id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** Number of pages */
        page?: number;
        /** Count per page */
        limit?: number;
        /** Name of the customer groups */
        name?: string;
        /** If customers who signup are added to this group by default */
        is_default?: boolean;
      };
    };
    responses: {
      200: {
        schema: definitions['customerGroup_Full'];
      };
    };
  };
  /**
   * Updates a *Customer Group*.
   *
   * **Notes**
   *
   * Any combination of fields can be updated at once. Discount rules are treated in bulk. The entire set of rules is overwritten when a request is sent.
   */
  updateACustomerGroup: {
    parameters: {
      path: {
        /** Id of the customer group */
        customer_group_id: number;
        store_hash: string;
      };
      header: {
        Accepts: string;
        'Content-Type': string;
      };
      body: {
        body?: definitions['customerGroup_Full'];
      };
    };
    responses: {
      200: {
        schema: definitions['customerGroup_Full'];
      };
      /** The customer group was updated, but the sitewide discount update failed. You may retry the request. */
      207: {
        schema: {
          status: number;
          message: string;
        };
      };
    };
  };
  /**
   * Deletes a *Customer Group*.
   *
   * **Notes**
   *
   * All existing customers are unassigned from the group when it is deleted.
   */
  deleteACustomerGroup: {
    parameters: {
      path: {
        /** The id of the customer group. */
        customer_group_id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a count of all *Customer Groups*. */
  getACountOfCustomerGroups: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: {
        schema: definitions['count_Full'];
      };
    };
  };
}

export interface external {}
