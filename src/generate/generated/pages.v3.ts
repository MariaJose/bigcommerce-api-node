/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v3/content/pages': {
    /** Returns one or more content pages. This endpoint supports bulk operations. */
    get: operations['content-pages-get'];
    /** Updates one or more content pages. This endpoint supports bulk operations. */
    put: operations['content-pages-put'];
    /** Creates one or more content pages. This endpoint supports bulk operations. */
    post: operations['content-pages-post'];
    /**
     * Deletes one or more content pages. This endpoint supports bulk operations.
     *
     * <!-- theme: warning -->
     * > #### Mind query parameters
     * > If you attempt to delete multiple pages by passing more than one pageId to `id:in` and one or more of them does not exist, you will receive a 404 response. However, the pages corresponding to the pagesIds that do exist will still be deleted.
     */
    delete: operations['content-pages-delete'];
    parameters: {
      path: {
        /** The merchant's store hash. Also called a store id. */
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v3/content/pages/{pageId}': {
    /**
     * Returns one content page.
     *
     * <!-- theme: warning -->
     * > #### Mind query parameters
     * > This endpoint recognizes the same query parameters as [Get Multiple Pages](/api-reference/store-management/pages/pages/getpages). If the requested page does not meet the query parameters you specify, you will receive a 404 response even if the requested pageId does exist.
     */
    get: operations['content-page-get'];
    /** Updates one content page. */
    put: operations['content-page-put'];
    /**
     * Deletes one content page.
     *
     * <!-- theme: info -->
     * > #### Query parameters
     * > This endpoint does not recognize query parameters.
     */
    delete: operations['content-page-delete'];
    parameters: {
      path: {
        /** The merchant's store hash. Also called a store id. */
        store_hash: string;
        /** The id of the page to be operated on. */
        pageId: string;
      };
    };
  };
}

export interface components {
  schemas: {
    /** @description Error payload for the BigCommerce API. */
    BaseError: {
      /** @description The HTTP status code. */
      status: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    };
    /** @description Error payload for the BigCommerce API. */
    DetailedError: {
      /** @description The HTTP status code. */
      status: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      detail?: string;
    };
    /**
     * ListedError
     * @description Error payload for the BigCommerce API.
     */
    ListedError: {
      /** @description The HTTP status code. */
      status: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      errors?: string[];
    };
    /** ListedErrorResponse */
    ErrorResponse: components['schemas']['BaseError'];
    ListedErrorResponse: components['schemas']['ListedError'];
    DetailedErrorResponse: components['schemas']['DetailedError'];
    /** @description Data about the response, including pagination and collection totals. */
    CollectionMeta: {
      pagination?: components['schemas']['Pagination'];
    };
    /** @description Response payload for the BigCommerce API. */
    PagesCollectionResponse: {
      data?: components['schemas']['Page'][];
      meta?: components['schemas']['CollectionMeta'];
    };
    /**
     * PageResponseObject
     * @description Response payload for the BigCommerce API.
     */
    PageResponse: {
      data?: components['schemas']['Page'][];
      meta?: components['schemas']['CollectionMeta'];
    };
    ContactFields: {
      /** @description Full name of the customer submitting the form. */
      fullname?: string;
      /** @description Customer’s phone number, as submitted on the form. */
      phone?: string;
      /** @description Customer’s submitted company name. */
      companyname?: string;
      /** @description Customer’s submitted order number. */
      orderno?: string;
      /** @description Customer’s submitted RMA (Return Merchandise Authorization) number. */
      rma?: string;
    };
    /** @description Page modification request body properties. */
    PagePutBulk: {
      /**
       * @description The name of the page. Must be unique.
       *
       * @example My Store Page
       */
      name?: string;
      /** @description Determines the visibility of the page in the storefront’s navigation menu. */
      is_visible?: boolean;
      /** @description ID of any parent Web page. */
      parent_id?: number;
      /** @description Determines the order in which the page is displayed on the storefront. (Lower integers specify earlier display.) */
      sort_order?: number;
      /**
       * @description Determines the type of the page.
       *
       * |Value|Description|
       * |-|-|
       * | `blog` | blog page. Read-only; blog pages can only be created in the store control panel. |
       * |`contact_form`|hosts the store's contact form|
       * |`link`|link to another absolute URL|
       * |`page`|user-defined plain-text page|
       * |`raw`|page that contains markup, such as HTML.|
       * |`rss_feed`|contains syndicated content from an RSS feed|
       * @example page
       */
      type?: 'page' | 'raw' | 'contact_form' | 'feed' | 'link' | 'blog';
      /** @description Determines whether this page is the storefront’s home page. */
      is_homepage?: boolean;
      /** @description If `true`, this page will not be visible when logged in to the store control panel. */
      is_customers_only?: boolean;
      /** @description The id of the target page */
      id: number;
      /** @description Where the page’s type is a contact form: contact email address that receives messages sent via the form. Must be unique. */
      email?: string;
      meta_title?: string;
      /**
       * @description HTML or variable that populates this page’s  element, in default/desktop view. Required in a `POST` request if the page type is `raw`.
       *
       * @example <div>Hello World!</div>
       */
      body?: string;
      /** @description The URL of the RSS feed. Required in a `POST` request if the page type is `rss_feed`. */
      feed?: string;
      /** @description Required in a `POST` request to create a link if the page type is `link`. */
      link?: string;
      /**
       * @description Where the page’s type is `contact_form`: comma-separated list of keywords representing the fields enabled in the control panel for storefront display. Possible fields include:
       *
       * |Field|Description|
       * |-|-|
       * |`fullname`|Full name of the customer submitting the form|
       * |`phone`|Customer’s phone number, as submitted on the form|
       * |`companyname`|Customer’s submitted company name|
       * |`orderno`|Customer’s submitted order number|
       * |`rma`|Customer’s submitted RMA (Return Merchandise Authorization) number|
       *
       * @example fullname,companyname,phone,orderno,rma
       */
      contact_fields?: 'fullname' | 'phone' | 'companyname' | 'phone' | 'orderno';
      /** @description Comma-separated list of SEO-relevant keywords to include in the page’s  element. */
      meta_keywords?: string;
      /** @description Description contained within this page’s  element. */
      meta_description?: string;
      /**
       * @description Comma-separated list of keywords that shoppers can use to locate this page when searching the store.
       *
       * @example trousers,pockets,luxury
       */
      search_keywords?: string;
      /**
       * @description Relative URL on the storefront for this page.
       *
       * @example /my-store-page
       */
      url?: string;
      /**
       * @description The Id of the channel where this page should be shown.
       *
       * @example 12
       */
      channel_id?: number;
    };
    /** @description Page modification request body properties. */
    PagePut: {
      /**
       * @description The name of the page. Must be unique.
       *
       * @example My Store Page
       */
      name?: string;
      /** @description Determines the visibility of the page in the storefront’s navigation menu. */
      is_visible?: boolean;
      /** @description ID of any parent Web page. */
      parent_id?: number;
      /** @description Determines the order in which the page is displayed on the storefront. (Lower integers specify earlier display.) */
      sort_order?: number;
      /**
       * @description Determines the type of the page.
       *
       * |Value|Description|
       * |-|-|
       * | `blog` | blog page. Read-only; blog pages can only be created in the store control panel. |
       * |`contact_form`|hosts the store's contact form|
       * |`link`|link to another absolute URL|
       * |`page`|user-defined plain-text page|
       * |`raw`|page that contains markup, such as HTML.|
       * |`rss_feed`|contains syndicated content from an RSS feed|
       * @example page
       */
      type?: 'page' | 'raw' | 'contact_form' | 'feed' | 'link' | 'blog';
      /** @description Determines whether this page is the storefront’s home page. */
      is_homepage?: boolean;
      /** @description If `true`, this page will not be visible when logged in to the store control panel. */
      is_customers_only?: boolean;
      /** @description Where the page’s type is a contact form: contact email address that receives messages sent via the form. Must be unique. */
      email?: string;
      meta_title?: string;
      /**
       * @description HTML or variable that populates this page’s  element, in default/desktop view. Required in a `POST` request if the page type is `raw`.
       *
       * @example <div>Hello World!</div>
       */
      body?: string;
      /** @description The URL of the RSS feed. Required in a `POST` request if the page type is `rss_feed`. */
      feed?: string;
      /** @description Required in a `POST` request to create a link if the page type is `link`. */
      link?: string;
      /**
       * @description Where the page’s type is `contact_form`: comma-separated list of keywords representing the fields enabled in the control panel for storefront display. Possible fields include:
       *
       * |Field|Description|
       * |-|-|
       * |`fullname`|Full name of the customer submitting the form|
       * |`phone`|Customer’s phone number, as submitted on the form|
       * |`companyname`|Customer’s submitted company name|
       * |`orderno`|Customer’s submitted order number|
       * |`rma`|Customer’s submitted RMA (Return Merchandise Authorization) number|
       *
       * @example fullname,companyname,phone,orderno,rma
       */
      contact_fields?: 'fullname' | 'phone' | 'companyname' | 'phone' | 'orderno';
      /** @description Comma-separated list of SEO-relevant keywords to include in the page’s  element. */
      meta_keywords?: string;
      /** @description Description contained within this page’s  element. */
      meta_description?: string;
      /**
       * @description Comma-separated list of keywords that shoppers can use to locate this page when searching the store.
       *
       * @example trousers,pockets,luxury
       */
      search_keywords?: string;
      /**
       * @description Relative URL on the storefront for this page.
       *
       * @example /my-store-page
       */
      url?: string;
      /**
       * @description The Id of the channel where this page should be shown.
       *
       * @example 12
       */
      channel_id?: number;
    } & {
      id: unknown;
    };
    Page: {
      /** @description Where the page’s type is a contact form: contact email address that receives messages sent via the form. Must be unique. */
      email?: string;
      meta_title?: string;
      /**
       * @description HTML or variable that populates this page’s  element, in default/desktop view. Required in a `POST` request if the page type is `raw`.
       *
       * @example <div>Hello World!</div>
       */
      body?: string;
      /** @description The URL of the RSS feed. Required in a `POST` request if the page type is `rss_feed`. */
      feed?: string;
      /** @description Required in a `POST` request to create a link if the page type is `link`. */
      link?: string;
      /**
       * @description Where the page’s type is `contact_form`: comma-separated list of keywords representing the fields enabled in the control panel for storefront display. Possible fields include:
       *
       * |Field|Description|
       * |-|-|
       * |`fullname`|Full name of the customer submitting the form|
       * |`phone`|Customer’s phone number, as submitted on the form|
       * |`companyname`|Customer’s submitted company name|
       * |`orderno`|Customer’s submitted order number|
       * |`rma`|Customer’s submitted RMA (Return Merchandise Authorization) number|
       *
       * @example fullname,companyname,phone,orderno,rma
       */
      contact_fields?: 'fullname' | 'phone' | 'companyname' | 'phone' | 'orderno';
      /** @description Comma-separated list of SEO-relevant keywords to include in the page’s  element. */
      meta_keywords?: string;
      /** @description Description contained within this page’s  element. */
      meta_description?: string;
      /**
       * @description Comma-separated list of keywords that shoppers can use to locate this page when searching the store.
       *
       * @example trousers,pockets,luxury
       */
      search_keywords?: string;
      /**
       * @description Relative URL on the storefront for this page.
       *
       * @example /my-store-page
       */
      url?: string;
      /**
       * @description The Id of the channel where this page should be shown.
       *
       * @default 1
       * @example 12
       */
      channel_id?: number;
    } & components['schemas']['PageBase'];
    /** @description Common Page properties. */
    PageBase: {
      /**
       * @description The name of the page. Must be unique.
       *
       * @example My Store Page
       */
      name: string;
      /** @description Determines the visibility of the page in the storefront’s navigation menu. */
      is_visible?: boolean;
      /** @description ID of any parent Web page. */
      parent_id?: number;
      /** @description Determines the order in which the page is displayed on the storefront. (Lower integers specify earlier display.) */
      sort_order?: number;
      /**
       * @description Determines the type of the page.
       *
       * |Value|Description|
       * |-|-|
       * | `blog` | blog page. Read-only; blog pages can only be created in the store control panel. |
       * |`contact_form`|hosts the store's contact form|
       * |`link`|link to another absolute URL|
       * |`page`|user-defined plain-text page|
       * |`raw`|page that contains markup, such as HTML.|
       * |`rss_feed`|contains syndicated content from an RSS feed|
       * @example page
       */
      type: 'page' | 'raw' | 'contact_form' | 'feed' | 'link' | 'blog';
      /** @description Determines whether this page is the storefront’s home page. */
      is_homepage?: boolean;
      /** @description If `true`, this page will only be visible to customers that are logged in to the store. */
      is_customers_only?: boolean;
    };
    /** @description Data about the response, including pagination and collection totals. */
    Pagination: {
      /** @description Total number of items in the result set. */
      total?: number;
      /** @description Total number of items in the collection response. */
      count?: number;
      /** @description The amount of items returned in the collection per page, controlled by the limit parameter. */
      per_page?: number;
      /** @description The page you are currently on within the collection. */
      current_page?: number;
      /** @description The total number of pages in the collection. */
      total_pages?: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /** @description Link to the current page returned in the response. */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
    /** PageFull */
    PageFull: components['schemas']['Page'];
  };
  responses: {
    /** Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
    HTTP207Response: {
      content: {
        'application/json': unknown;
      };
    };
  };
}

export interface operations {
  /** Returns one or more content pages. This endpoint supports bulk operations. */
  'content-pages-get': {
    parameters: {
      path: {
        /** The merchant's store hash. Also called a store id. */
        store_hash: string;
      };
      query: {
        /** Return only pages associated with the specified channel. */
        channel_id?: number;
        /** A comma-separated string of page IDs to fetch. Supports bulk operations. If none of the page IDs passed exist, the query will return an empty `data` array. */
        'id:in'?: string;
        /** Name of the page. */
        name?: string;
        /** One word from the name of the page. Does not search substrings. Does not return pages with names that match exactly. Does not support fuzzy search. */
        'name:like'?: string;
        /** The number of results to return per request. See `meta.pagination.per_page` in the response body. */
        limit?: number;
        /** The ordered grouping of results to return. See `meta.pagination.current_page` in the response body. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PagesCollectionResponse'];
        };
      };
      /** Bad Request; reasons for failure include passing query parameters that are not support on this endpoint, but are common on other BigCommerce endpoints. */
      400: {
        content: {
          'application/problem+json': components['schemas']['DetailedErrorResponse'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/problem+json': components['schemas']['ErrorResponse'];
        };
      };
      /** Invalid input. Reasons for failure include passing supported parameters with values that have the incorrect datatype. */
      422: {
        content: {
          'application/problem+json': components['schemas']['ListedErrorResponse'];
        };
      };
    };
  };
  /** Updates one or more content pages. This endpoint supports bulk operations. */
  'content-pages-put': {
    parameters: {
      path: {
        /** The merchant's store hash. Also called a store id. */
        store_hash: string;
      };
    };
    responses: {
      /** Updated. */
      200: {
        content: {
          'application/json': components['schemas']['PagesCollectionResponse'];
        };
      };
      207: components['responses']['HTTP207Response'];
      /** Not Found */
      404: {
        content: {
          'application/problem+json': components['schemas']['ErrorResponse'];
        };
      };
      /** The input was not valid. This is the result of missing required fields or other invalid arguments. See the response for more details. */
      422: {
        content: {
          'application/problem+json': components['schemas']['DetailedErrorResponse'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PagePutBulk'] | components['schemas']['PagePutBulk'][];
      };
    };
  };
  /** Creates one or more content pages. This endpoint supports bulk operations. */
  'content-pages-post': {
    parameters: {
      path: {
        /** The merchant's store hash. Also called a store id. */
        store_hash: string;
      };
    };
    responses: {
      /**
       * Created.
       *
       * Response.data will inherit the datatype of the request. A single entry passed as an object will return an object for the data property. Any number of entries passed in an array will return an array for the data property.
       *
       * Properties associated with a page `type` that are not required to create an entry will be created with default values.
       *
       * When making bulk requests, an invalid input in any one entry will return 422. The entries that are valid will still be created.
       */
      201: {
        content: {
          'application/json': {
            data?:
              | {
                  data?: components['schemas']['Page'];
                }
              | {
                  data?: components['schemas']['PageBase'];
                }[];
            meta?: components['schemas']['CollectionMeta'];
          };
        };
      };
      207: components['responses']['HTTP207Response'];
      /**
       * The input was not valid. This is the result of missing required fields or other invalid arguments. See the response for more details.
       *
       * When making bulk requests, an invalid input in any one entry will cause the whole request to return 422. The entries that are valid will still be created.
       */
      422: {
        content: {
          'application/problem+json': components['schemas']['DetailedErrorResponse'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Page'];
      };
    };
  };
  /**
   * Deletes one or more content pages. This endpoint supports bulk operations.
   *
   * <!-- theme: warning -->
   * > #### Mind query parameters
   * > If you attempt to delete multiple pages by passing more than one pageId to `id:in` and one or more of them does not exist, you will receive a 404 response. However, the pages corresponding to the pagesIds that do exist will still be deleted.
   */
  'content-pages-delete': {
    parameters: {
      path: {
        /** The merchant's store hash. Also called a store id. */
        store_hash: string;
      };
      query: {
        /** Request deletion of multiple pages by passing a comma-separated string of corresponding page IDs. Supports bulk operations. */
        'id:in': string;
      };
    };
    responses: {
      /** No content. A 204 response with no payload indicates successful deletion of all specified pages. */
      204: never;
      /** Not Found. One of more of the pages specified for deletion did not exist. Specified pages that did exist were successfully deleted. */
      404: {
        content: {
          'application/problem+json': components['schemas']['ErrorResponse'];
        };
      };
      /** Invalid input. See response for details. */
      422: {
        content: {
          'application/problem+json': components['schemas']['DetailedErrorResponse'];
        };
      };
    };
  };
  /**
   * Returns one content page.
   *
   * <!-- theme: warning -->
   * > #### Mind query parameters
   * > This endpoint recognizes the same query parameters as [Get Multiple Pages](/api-reference/store-management/pages/pages/getpages). If the requested page does not meet the query parameters you specify, you will receive a 404 response even if the requested pageId does exist.
   */
  'content-page-get': {
    parameters: {
      path: {
        /** The merchant's store hash. Also called a store id. */
        store_hash: string;
        /** The id of the page to be operated on. */
        pageId: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PageResponse'];
        };
      };
      /** Not Found. */
      404: {
        content: {
          'application/problem+json': components['schemas']['ErrorResponse'];
        };
      };
      /** Invalid input. One or more path parameter(s) did not have the incorrect datatype. */
      422: {
        content: {
          'application/problem+json': components['schemas']['ListedErrorResponse'];
        };
      };
    };
  };
  /** Updates one content page. */
  'content-page-put': {
    parameters: {
      path: {
        /** The merchant's store hash. Also called a store id. */
        store_hash: string;
        /** The id of the page to be operated on. */
        pageId: string;
      };
    };
    responses: {
      /**  */
      200: {
        content: {
          'application/json': components['schemas']['PageResponse'];
        };
      };
      207: components['responses']['HTTP207Response'];
      /** Bad Request; reasons for failure include invalid query parameters. See the response for more details. */
      400: {
        content: {
          'application/problem+json': components['schemas']['DetailedErrorResponse'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/problem+json': components['schemas']['ErrorResponse'];
        };
      };
      /** The input was not valid. This is the result of missing required fields or other invalid arguments. See the response for more details. */
      422: {
        content: {
          'application/problem+json': components['schemas']['DetailedErrorResponse'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PagePut'];
      };
    };
  };
  /**
   * Deletes one content page.
   *
   * <!-- theme: info -->
   * > #### Query parameters
   * > This endpoint does not recognize query parameters.
   */
  'content-page-delete': {
    parameters: {
      path: {
        /** The merchant's store hash. Also called a store id. */
        store_hash: string;
        /** The id of the page to be operated on. */
        pageId: string;
      };
    };
    responses: {
      /** No content. A 204 response with no payload indicates successful deletion. */
      204: never;
      /** The page specified for deletion did not exist. */
      404: {
        content: {
          'application/problem+json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
}

export interface external {}
