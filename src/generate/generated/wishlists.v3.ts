/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v3/wishlists': {
    /** Returns a list of wishlists. Optional filter parameters can be passed in. */
    get: operations['WishlistsGet'];
    /**
     * Creates a wishlist and wishlist item. More than one item can be added in the POST.
     *
     * **Required Fields**
     * * name
     * * customer_id
     */
    post: operations['WishlistsPost'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v3/wishlists/{wishlist_id}/items/{item_id}': {
    /** Deletes a wishlist item. */
    delete: operations['WishlistsItemsByIdDelete'];
    parameters: {
      path: {
        wishlist_id: string;
        item_id: string;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v3/wishlists/{wishlist_id}': {
    /** Returns a single wishlist. */
    get: operations['WishlistsByIdGet'];
    /**
     * Updates a wishlist.
     *
     * Use this endpoint to update existing wishlist items, change the wishlist's name and whether the wishlist is available publicly. To add or delete a wishlist item, see [Wishlist Items](/api-reference/store-management/wishlists/wishlists-items).
     */
    put: operations['WishlistsByIdPut'];
    /** Deletes a wishlist. */
    delete: operations['WishlistsByIdDelete'];
    parameters: {
      path: {
        wishlist_id: string;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v3/wishlists/{wishlist_id}/items': {
    /** Adds a wishlist item. More than one item can be added at a time. */
    post: operations['WishlistsItemsByIdPost'];
    parameters: {
      path: {
        wishlist_id: string;
        store_hash: string;
      };
    };
  };
}

export interface definitions {
  /** wishlist_Post */
  wishlist_Post: {
    /**
     * Format: int32
     * @description The customer id.
     * @example 12
     */
    customer_id: number;
    /** @description Whether the wishlist is available to the public. */
    is_public?: boolean;
    /**
     * @description The title of the wishlist.
     * @example School Shopping
     */
    name?: string;
    /** @description Array of wishlist items. */
    items?: {
      /**
       * Format: int32
       * @description The ID of the product.
       * @example 12
       */
      product_id?: number;
      /**
       * Format: int32
       * @description The variant ID of the product.
       * @example 152
       */
      variant_id?: number;
    }[];
  };
  /** wishlist_Put */
  wishlist_Put: {
    /**
     * Format: int32
     * @description The customer ID. A read-only value.
     */
    customer_id: number;
    /** @description Whether the wishlist is available to the public. */
    is_public?: boolean;
    /** @description The title of the wishlist. */
    name?: string;
    /** @description Array of wishlist items. */
    items: {
      /**
       * Format: int32
       * @description The ID of the item.
       * @example 12
       */
      id?: number;
      /**
       * Format: int32
       * @description The ID of the product.
       * @example 55
       */
      product_id?: number;
      /**
       * Format: int32
       * @description The variant ID of the product.
       * @example 22
       */
      variant_id?: number;
    }[];
  };
  /** wishlist_Full */
  wishlist_Full: {
    /**
     * Format: int32
     * @description Wishlist ID, provided after creating a wishlist with a POST.
     * @example 30
     */
    id?: number;
    /**
     * Format: int32
     * @description The ID the customer to which the wishlist belongs.
     * @example 12
     */
    customer_id?: number;
    /**
     * @description The name of the wishlist.
     * @example Christmas List
     */
    name?: string;
    /**
     * @description Whether the wishlist is available to the public.
     * @example true
     */
    is_public?: boolean;
    /**
     * Format: uuid
     * @description The token of the wishlist. This is created internally within BigCommerce. The wishlist ID is to be used for external apps. Read-Only.
     * @example 2d55481-13eb-4d1e-9d79-9062b518570d
     */
    token?: string;
    /** @description Array of wishlist items. */
    items?: definitions['wishlistItem_Full'][];
  };
  /** wishlistItem_Full */
  wishlistItem_Full: {
    /**
     * Format: int32
     * @description The ID of the item.
     * @example 12
     */
    id?: number;
    /**
     * Format: int32
     * @description The ID of the product.
     * @example 55
     */
    product_id?: number;
    /**
     * Format: int32
     * @description The variant ID of the product.
     * @example 22
     */
    variant_id?: number;
  };
  /** wishlistItem_Post */
  wishlistItem_Post: {
    /**
     * Format: int32
     * @description The ID of the product.
     * @example 12
     */
    product_id?: number;
    /**
     * Format: int32
     * @description The variant ID of the product.
     * @example 152
     */
    variant_id?: number;
  };
  /**
   * pagination
   * @description Data about the response, including pagination and collection totals.
   */
  pagination: {
    /**
     * Format: int32
     * @description Total number of items in the result set.
     */
    total?: number;
    /**
     * Format: int32
     * @description Total number of items in the collection response.
     */
    count?: number;
    /**
     * Format: int32
     * @description The amount of items returned in the collection per page, controlled by the limit parameter.
     */
    per_page?: number;
    /**
     * Format: int32
     * @description The page you are currently on within the collection.
     */
    current_page?: number;
    /**
     * Format: int32
     * @description The total number of pages in the collection.
     */
    total_pages?: number;
  };
  /** error */
  error: {
    /** Format: int32 */
    status?: number;
    title?: string;
    type?: string;
  };
  /** metaCollection */
  metaCollection: {
    pagination?: definitions['pagination'];
  };
}

export interface parameters {
  /**
   * Format: int32
   * @description All wishlists relating to the customer.
   */
  FilterCustomerID: number;
  /**
   * Format: int32
   * @description The page number of results per page. 1 is the default and starts from record 0.
   */
  FilterPage: number;
  /**
   * Format: int32
   * @description The numbers of items to return per page. Default is 50 and maximum is 250.
   */
  FilterLimit: number;
  /**
   * Format: int32
   * @description ID of the Wishlist
   */
  WishlistID: number;
  /** @default application/json */
  'Content-Type': string;
  /** @default application/json */
  Accept: string;
}

export interface responses {
  Wishlist_Resp: {
    schema: {
      data?: definitions['wishlist_Full'];
      meta?: { [key: string]: unknown };
    };
  };
  wishlist_Resp_Collection: {
    schema: {
      data?: definitions['wishlist_Full'][];
      meta?: definitions['metaCollection'];
    };
  };
  /** Authentication information is missing or invalid. */
  Unauthorized: {
    schema: {
      /** Format: int32 */
      status?: number;
      title?: string;
      type?: string;
    };
  };
}

export interface operations {
  /** Returns a list of wishlists. Optional filter parameters can be passed in. */
  WishlistsGet: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** All wishlists relating to the customer. */
        customer_id?: number;
        /** The page number of results per page. 1 is the default and starts from record 0. */
        page?: number;
        /** The numbers of items to return per page. Default is 50 and maximum is 250. */
        limit?: number;
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      200: responses['wishlist_Resp_Collection'];
      /** Authentication information is missing or invalid. */
      401: {
        schema: {
          /** Format: int32 */
          status?: number;
          title?: string;
          type?: string;
        };
      };
      /** Internal server error. */
      500: {
        schema: {
          /** Format: int32 */
          status?: number;
          title?: string;
          type?: string;
        };
      };
    };
  };
  /**
   * Creates a wishlist and wishlist item. More than one item can be added in the POST.
   *
   * **Required Fields**
   * * name
   * * customer_id
   */
  WishlistsPost: {
    parameters: {
      path: {
        store_hash: string;
      };
      body: {
        body: definitions['wishlist_Post'];
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      201: responses['Wishlist_Resp'];
      /** Authentication information is missing or invalid. */
      401: {
        schema: {
          /** Format: int32 */
          status?: number;
          title?: string;
          type?: string;
        };
      };
      /** Internal server error. */
      500: {
        schema: {
          /** Format: int32 */
          status?: number;
          title?: string;
          type?: string;
        };
      };
    };
  };
  /** Deletes a wishlist item. */
  WishlistsItemsByIdDelete: {
    parameters: {
      path: {
        /** ID of the Wishlist */
        wishlist_id: number;
        item_id: number;
        store_hash: string;
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      200: responses['Wishlist_Resp'];
      /** Authentication information is missing or invalid. */
      401: {
        schema: {
          /** Format: int32 */
          status?: number;
          title?: string;
          type?: string;
        };
      };
      /** Wishlist not found. */
      404: {
        schema: unknown;
      };
      /** Internal server error. */
      500: {
        schema: {
          /** Format: int32 */
          status?: number;
          title?: string;
          type?: string;
        };
      };
    };
  };
  /** Returns a single wishlist. */
  WishlistsByIdGet: {
    parameters: {
      path: {
        /** ID of the Wishlist */
        wishlist_id: number;
        store_hash: string;
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      200: responses['Wishlist_Resp'];
      /** Authentication information is missing or invalid. */
      401: {
        schema: {
          /** Format: int32 */
          status?: number;
          title?: string;
          type?: string;
        };
      };
      /** Wishlist not found. */
      404: {
        schema: unknown;
      };
      /** Internal server error. */
      500: {
        schema: {
          /** Format: int32 */
          status?: number;
          title?: string;
          type?: string;
        };
      };
    };
  };
  /**
   * Updates a wishlist.
   *
   * Use this endpoint to update existing wishlist items, change the wishlist's name and whether the wishlist is available publicly. To add or delete a wishlist item, see [Wishlist Items](/api-reference/store-management/wishlists/wishlists-items).
   */
  WishlistsByIdPut: {
    parameters: {
      path: {
        /** ID of the Wishlist */
        wishlist_id: number;
        store_hash: string;
      };
      body: {
        body: definitions['wishlist_Put'];
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      201: responses['Wishlist_Resp'];
      /** Authentication information is missing or invalid. */
      401: {
        schema: {
          /** Format: int32 */
          status?: number;
          title?: string;
          type?: string;
        };
      };
      /** Internal server error. */
      500: {
        schema: {
          /** Format: int32 */
          status?: number;
          title?: string;
          type?: string;
        };
      };
    };
  };
  /** Deletes a wishlist. */
  WishlistsByIdDelete: {
    parameters: {
      path: {
        /** ID of the Wishlist */
        wishlist_id: number;
        store_hash: string;
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      204: never;
      /** Authentication information is missing or invalid. */
      401: {
        schema: {
          /** Format: int32 */
          status?: number;
          title?: string;
          type?: string;
        };
      };
      /** Internal server error. */
      500: {
        schema: {
          /** Format: int32 */
          status?: number;
          title?: string;
          type?: string;
        };
      };
    };
  };
  /** Adds a wishlist item. More than one item can be added at a time. */
  WishlistsItemsByIdPost: {
    parameters: {
      path: {
        /** ID of the Wishlist */
        wishlist_id: number;
        store_hash: string;
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
      body: {
        body?: definitions['wishlistItem_Post'];
      };
    };
    responses: {
      201: responses['Wishlist_Resp'];
      /** Authentication information is missing or invalid. */
      401: {
        schema: {
          /** Format: int32 */
          status?: number;
          title?: string;
          type?: string;
        };
      };
      /** Wishlist not found. */
      404: unknown;
      /** Internal server error. */
      500: unknown;
    };
  };
}

export interface external {}
