/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v3/storefront/redirects': {
    /** Returns a collection of the store's 301 redirects across all sites. */
    get: operations['GetRedirects'];
    /** Upserts new redirect data across all storefronts. */
    put: operations['UpsertRedirects'];
    /** Deletes redirects. */
    delete: operations['DeleteRedirects'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
}

export interface definitions {
  Error: {
    status?: number;
    message?: string;
  };
  ErrorResponse400: {
    schema?: definitions['Error'];
  };
  ErrorResponse404: {
    schema?: definitions['Error'];
  };
  ErrorResponse409: {
    schema?: definitions['Error'];
  };
  ErrorResponse422: {
    schema?: definitions['Error'];
  };
  /** @description Data necessary to create or update a redirect. If thereâ€™s a conflict on the from_path and site_id, the redirect will be overwritten with new data. */
  '301RedirectUpsert': {
    /** @example /old-url */
    from_path: string;
    site_id: number;
    to?: definitions['RedirectTo'];
  };
  /** @description Full detail of a Redirect, optionally including the full destination URL. */
  '301RedirectRead': {
    /** @example /old-url */
    from_path: string;
    site_id: number;
    to?: definitions['RedirectTo'];
    id?: number;
    /**
     * Format: uri
     * @description Full destination URL for the redirect. Must be explicitly included via URL parameter.
     * @example https://store-domain.com/new-url
     */
    to_url?: string;
  };
  MetaPaginationObject: {
    pagination?: {
      /** @example 246 */
      total?: number;
      /** @example 5 */
      count?: number;
      /** @example 5 */
      per_page?: number;
      /** @example 1 */
      current_page?: number;
      /** @example 50 */
      total_pages?: number;
      links?: {
        /** @example ?limit=5&page=2 */
        next?: string;
        /** @example ?limit=5&page=1 */
        current?: string;
      };
    };
  };
  /** RedirectTo */
  RedirectTo: {
    type?: 'product' | 'brand' | 'category' | 'page' | 'post' | 'url';
    entity_id?: number;
    /** @example /new-url */
    url?: string;
  };
  DetailedErrors: { [key: string]: string };
  /** @description Error payload for the BigCommerce API. */
  BaseError: {
    /** @description The HTTP status code. */
    status?: number;
    /** @description The error title describing the particular error. */
    title?: string;
    type?: string;
    instance?: string;
  };
  ErrorResponse: definitions['BaseError'] & {
    errors?: definitions['DetailedErrors'];
  };
}

export interface operations {
  /** Returns a collection of the store's 301 redirects across all sites. */
  GetRedirects: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** Filters items by `site_id`. */
        site_id?: number;
        /** Filters items by redirect `id`. Also accepts comma-separated values to filter for multiple redirects. */
        'id:in'?: string[];
        /** Controls the number of items to return per page. */
        limit?: number;
        /** Specifies the page number in a limited (paginated) list of items. Used to paginate large collections. */
        page?: number;
        /** Field name to sort by. Note: Since redirect `id` increments when new redirects are added, you can use that field to sort by redirect create date. */
        sort?: 'from_path' | 'type' | 'site_id';
        /** Sort direction. Acceptable values are `asc`, `desc`. */
        direction?: 'asc' | 'desc';
        /** Indicates whether to include redirect sub-resources. Only `to_url` is supported. */
        include?: 'to_url';
        /** Filters redirects by the specified keyword. Will only search from the beginning of a URL path. For example, `blue` will match `/blue` and `/blue-shirt` ,  **not** `/royal-blue-shirt`. */
        keyword?: string;
      };
    };
    responses: {
      200: {
        schema: {
          data?: definitions['301RedirectRead'];
          meta?: definitions['MetaPaginationObject'];
        };
      };
    };
  };
  /** Upserts new redirect data across all storefronts. */
  UpsertRedirects: {
    parameters: {
      path: {
        store_hash: string;
      };
      body: {
        body?: definitions['301RedirectUpsert'][];
      };
    };
    responses: {
      /** Created */
      201: {
        schema: {
          data?: definitions['301RedirectRead'][];
          meta?: definitions['MetaPaginationObject'];
        };
      };
    };
  };
  /** Deletes redirects. */
  DeleteRedirects: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** List of Redirect IDs to delete explicitly */
        'id:in': number[];
        /** Site ID provided to delete all redirects for a given Site */
        site_id?: number;
      };
    };
    responses: {
      /** No Content */
      204: never;
    };
  };
}

export interface external {}
