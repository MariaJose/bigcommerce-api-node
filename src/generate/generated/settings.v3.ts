/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v3/settings/analytics': {
    /** Returns a list of web analytics providers. */
    get: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['AnalyticsProviders'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
    };
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/analytics/{id}': {
    /** Returns a single web analytics provider data for a default channel. */
    get: {
      parameters: {
        path: {
          /** Web Analytics Provider ID. */
          id: number;
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** Successful operation. */
        200: {
          content: {
            'application/json': components['schemas']['AnalyticsProvider'];
          };
        };
        /** Bad request. Authentication Required. */
        400: {
          content: {
            'application/json': components['schemas']['ErrorResponse400'];
          };
        };
        /** The requested resource was not found. Please specify valid Web Analytics Provider ID. */
        404: {
          content: {
            'application/json': components['schemas']['ErrorResponse404'];
          };
        };
      };
    };
    /** Updates a single web analytics provider data for a default channel. */
    put: {
      parameters: {
        path: {
          /** Web Analytics Provider ID. */
          id: number;
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** Successful operation. */
        200: {
          content: {
            'application/json': components['schemas']['AnalyticsProvider'];
          };
        };
        /** Bad request. Authentication Required. */
        400: {
          content: {
            'application/json': components['schemas']['ErrorResponse400'];
          };
        };
        /** The requested resource was not found. Please specify valid Web Analytics Provider ID. */
        404: {
          content: {
            'application/json': components['schemas']['ErrorResponse404'];
          };
        };
        /** Web Analytics Provider was in conflict with another Web Analytics Provider. This can be caused by duplicated unique values (such as ID). */
        409: {
          content: {
            'application/json': components['schemas']['ErrorResponse409'];
          };
        };
        /** Web Analytics Provider data was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
        422: {
          content: {
            'application/json': components['schemas']['ErrorResponse422'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': {
            channel_id?: number;
            code?: string;
            data_tag_enabled?: boolean;
            enabled?: boolean;
            id?: number;
            is_oauth_connected?: unknown;
            name?: string;
            version?: number;
          };
        };
      };
    };
    parameters: {
      path: {
        id: number;
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/catalog': {
    /**
     * Returns catalog settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['CatalogSettings'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
    };
    /**
     * Updates catalog settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['CatalogSettings'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
      /** null set for a particular field removes override on a channel level and means inheritance from a global level */
      requestBody: {
        content: {
          'application/json': components['schemas']['CatalogSettings'];
        };
      };
    };
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/email-statuses': {
    /** Get global transactional email settings or channel specific overrides by `channel_id`. */
    get: operations['get-settings-emails-enabled'];
    /** Update global transactional email settings or create channel specific overrides by `channel_id`. */
    put: operations['put-settings-transactional-emails-enabled'];
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/favicon/image': {
    /**
     * Uploads an image file to use as the storefront favicon. Supported MIME types include GIF, JPEG, and PNG.
     *
     *   - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     */
    post: operations['post-favicon-logo-image'];
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/inventory/notifications': {
    /**
     * Returns inventory notification settings.
     * * `channel_id` can be used as a query parameter to get inventory notification settings per channel. If omitted, you will interact with the global setting only.
     */
    get: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['InventoryNotificationsSettings'];
            } & external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['components']['schemas']['meta_Empty'];
          };
        };
      };
    };
    /**
     * Updates inventory notification settings.
     * * `channel_id` can be used as a query parameter to get inventory notification settings per channel. If omitted, you will interact with the global setting only.
     * * Supplying `null` settings values per channel will delete overrides per given channel and values will be inherited from global level.
     * * Partial updates are not supported within the given endpoint. In order to delete overrides per channel, `null` should be supplied for all the settings within the given endpoint.
     */
    put: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
      /** null set for a particular field removes override on a channel level and means inheritance from a global level */
      requestBody: {
        content: {
          'application/json': components['schemas']['InventoryNotificationsSettings'];
        };
      };
    };
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/logo': {
    /**
     * Returns store logo settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: operations['get-settings-logo'];
    /**
     * Updates the logo type and logo text for a textual logo. To upload new images, use the dedicated image POST endpoints.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: operations['put-settings-logo'];
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/logo/image': {
    /**
     * Uploads an image file to use as the storefront logo. Supported MIME types include GIF, JPEG, and PNG.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     */
    post: operations['post-settings-logo-image'];
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/search/filters': {
    /** Returns a list of enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. These filters will be used if a store does not have contextual overrides. */
    get: operations['getEnabled'];
    /** Updates enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. */
    put: operations['updateEnabled'];
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/search/filters/available': {
    /** Returns a list of filters available to power [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings). */
    get: operations['getAvailable'];
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/search/filters/contexts': {
    /**
     * Returns a list of contextual filters enabled for a particular channel or category.
     *
     * **Usage Notes**
     *
     * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
     *
     * The order of the returned filters will match the sort order of the filters on the storefront.
     */
    get: operations['getContexts'];
    /**
     * Upserts contextual filters for a particular channel or category.
     *
     * **Usage Notes**
     *
     * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
     *
     * You can change the order of the filters on the live site by changing the order of the filters you send.
     */
    put: operations['upsertContexts'];
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/store/locale': {
    /** Returns global locale settings. */
    get: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
      };
      responses: {
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['Locale'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
    };
    /** Updates global locale settings. */
    put: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
      };
      responses: {
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['Locale'];
              meta?: { [key: string]: unknown };
            };
          };
        };
        /** Provided settings could not be applied for some reason - detailed errors in the response. */
        422: {
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['Locale'];
        };
      };
    };
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/store/profile': {
    /**
     * Returns store profile settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['StoreProfile'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
    };
    /**
     * Updates store profile settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['StoreProfile'];
              meta?: { [key: string]: unknown };
            };
          };
        };
        /** Provided settings could not be applied for some reason - detailed errors in the response. */
        422: {
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['StoreProfile'];
        };
      };
    };
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/storefront/category': {
    /**
     * Returns category settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['StorefrontCategorySettings'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
    };
    /**
     * Updates category settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['StorefrontCategorySettings'];
              meta?: { [key: string]: unknown };
            };
          };
        };
        422: components['responses']['422ErrorResp'];
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['StorefrontCategorySettings'];
        };
      };
    };
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/storefront/product': {
    /**
     * Returns product settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: operations['get-settings-storefront-product'];
    /**
     * Updates product settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: operations['put-settings-storefront-product'];
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/storefront/robotstxt': {
    /**
     * Returns Robots.txt settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['RobotsTxtSettings'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
    };
    /**
     * Updates Robots.txt settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['RobotsTxtSettings'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['RobotsTxtSettings'];
        };
      };
    };
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/storefront/search': {
    /**
     * Returns search settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['StorefrontSearchSettings'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
    };
    /**
     * Updates search settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['StorefrontSearchSettings'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['StorefrontSearchSettings'];
        };
      };
    };
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/storefront/security': {
    /**
     * Returns security settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['StorefrontSecuritySettings'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
    };
    /**
     * Updates security settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['StorefrontSecuritySettings'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['StorefrontSecuritySettings'];
        };
      };
    };
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/storefront/seo': {
    /**
     * Returns SEO settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['SEOSettings'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
    };
    /**
     * Updates SEO settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: components['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['SEOSettings'];
              meta?: { [key: string]: unknown };
            };
          };
        };
        422: components['responses']['422ErrorResp'];
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['SEOSettings'];
        };
      };
    };
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
  };
  '/stores/{store_hash}/v3/settings/storefront/status': {
    /**
     * Returns storefront status-related settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['components']['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['StorefrontStatus'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
    };
    /**
     * Updates storefront status-related settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: {
      parameters: {
        path: {
          /** Hash of your store */
          store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['components']['parameters']['store_hash'];
        };
        query: {
          /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
          channel_id?: components['parameters']['ChannelIdParam'];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            'application/json': {
              data?: components['schemas']['StorefrontStatus'];
              meta?: { [key: string]: unknown };
            };
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['StorefrontStatus'];
        };
      };
    };
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['components']['parameters']['store_hash'];
      };
    };
  };
}

export interface components {
  schemas: {
    /**
     * AddressTypeEnumValues
     * @description Only supports manipulation on a global level.
     * @default Home Office
     */
    AddressTypeEnumValues: 'Home Office' | 'Commercial Office' | 'Retail' | 'Warehouse';
    AnalyticsProvider: {
      /** @description Web Analytics Provider code. */
      code?: string;
      /** @description Flag indicates if Web Analytics Provider is enabled or not. */
      enabled?: boolean;
      /** @description Web Analytics Provider ID. */
      id?: number;
      /** @description Web Analytics Provider title. */
      name?: string;
    };
    AnalyticsProviders: components['schemas']['AnalyticsProvider'][];
    /** AvailableFilter */
    AvailableFilter:
      | components['schemas']['AvailableNormalFilter']
      | components['schemas']['AvailablePriceFilter']
      | components['schemas']['AvailableOtherFilter'];
    /** AvailableNormalFilter */
    AvailableNormalFilter: {
      id?: string;
      name?: string;
      product_count?: number;
      type?: 'category' | 'brand' | 'rating' | 'product';
    };
    /** AvailableOtherFilter */
    AvailableOtherFilter: {
      id?: string;
      name?: string;
      type?: 'other';
    };
    /** AvailablePriceFilter */
    AvailablePriceFilter: {
      id?: string;
      name?: string;
      price_range_max?: number;
      price_range_min?: number;
      type?: 'price';
    };
    /** @description Error payload for the BigCommerce API. */
    BaseError: {
      instance?: string;
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    };
    CatalogSettings: {
      auto_approve_reviews?: boolean;
      enable_product_comparisons?: boolean;
    };
    /** CategoryListingModeEnumValues */
    CategoryListingModeEnumValues: 'current_category_only' | 'child_categories' | 'child_categories_if_category_empty';
    /** ConfiguredFilter */
    ConfiguredFilter:
      | components['schemas']['EnabledProductFilter']
      | components['schemas']['EnabledPriceFilter']
      | components['schemas']['EnabledCategoryFilter']
      | components['schemas']['EnabledBrandFilter']
      | components['schemas']['EnabledRatingFilter']
      | components['schemas']['EnabledMiscFilter'];
    /** ConfiguredFilters */
    ConfiguredFilters: components['schemas']['ConfiguredFilter'][];
    /**
     * ConfiguredFiltersOverride
     * @description A new set of enabled Product Filtering filters which should display in a particular context, such as on a particular Channel, or while viewing a particular Category. Array order indicates the display order on the storefront.
     */
    ConfiguredFiltersOverride: {
      context?: components['schemas']['SearchFilterOverrideContextIdentifier'];
      data?: components['schemas']['ConfiguredFilters'];
    };
    /**
     * ContentSortEnumValues
     * @default relevance
     */
    ContentSortEnumValues: 'relevance' | 'atoz' | 'ztoa';
    DetailedErrors: { [key: string]: string };
    /**
     * EnabledBrandFilter
     * @description A storefront filter for product brand
     */
    EnabledBrandFilter: {
      collapsed_by_default?: boolean;
      display_name?: string;
      display_product_count?: boolean;
      id?: string;
      is_enabled?: boolean;
      items_to_show?: 5 | 10 | 15;
      sort_by?: 'alpha' | 'item_count';
      type?: 'brand';
    };
    /**
     * EnabledCategoryFilter
     * @description A storefront filter for product category
     */
    EnabledCategoryFilter: {
      collapsed_by_default?: boolean;
      display_name?: string;
      display_product_count?: boolean;
      id?: string;
      is_enabled?: boolean;
      items_to_show?: 5 | 10 | 15;
      type?: 'category';
    };
    /** EnabledFilter */
    EnabledFilter:
      | components['schemas']['EnabledProductFilter']
      | components['schemas']['EnabledPriceFilter']
      | components['schemas']['EnabledCategoryFilter']
      | components['schemas']['EnabledBrandFilter']
      | components['schemas']['EnabledRatingFilter']
      | components['schemas']['EnabledMiscFilter'];
    /** EnabledFilters */
    EnabledFilters: components['schemas']['EnabledFilter'][];
    /**
     * EnabledFiltersOverride
     * @description A new set of enabled Product Filtering filters which should display in a particular context, such as on a particular Channel, or while viewing a particular Category. Array order indicates the display order on the storefront.
     */
    EnabledFiltersOverride: {
      data?: components['schemas']['EnabledFilters'];
      scope?: components['schemas']['SearchFilterOverrideScopeIdentifier'];
    };
    /**
     * EnabledMiscFilter
     * @description Miscellaneous Filters which appear as a group.
     */
    EnabledMiscFilter: {
      collapsed_by_default?: boolean;
      display_name?: string;
      display_product_count?: boolean;
      id?: number;
      is_enabled?: boolean;
      show_free_shipping_filter?: boolean;
      show_in_stock_filter?: boolean;
      show_is_featured_filter?: boolean;
      show_product_count?: boolean;
      type?: 'other';
    };
    /**
     * EnabledPriceFilter
     * @description A filter based on the product’s price, shown as a price range on the storefront.
     */
    EnabledPriceFilter: {
      collapsed_by_default?: boolean;
      display_name?: string;
      id?: string;
      is_enabled?: boolean;
      type?: 'price';
    };
    /**
     * EnabledProductFilter
     * @description A filter that uses product options and custom field data.
     */
    EnabledProductFilter: {
      collapsed_by_default?: boolean;
      display_name?: string;
      display_product_count?: boolean;
      id?: string;
      is_enabled?: boolean;
      items_to_show?: 5 | 10 | 15;
      sort_by?: 'alpha' | 'option_values' | 'item_count';
      type?: 'product';
    };
    /**
     * EnabledRatingFilter
     * @description A filter based on product review ratings.
     */
    EnabledRatingFilter: {
      collapsed_by_default?: boolean;
      display_name?: string;
      id?: string;
      is_enabled?: boolean;
      type?: 'rating';
    };
    EnabledTransactionalEmails: {
      abandoned_cart_email?: boolean;
      account_details_changed_email?: boolean;
      combined_order_status_email?: boolean;
      create_account_email?: boolean;
      create_guest_account_email?: boolean;
      gift_certificate_email?: boolean;
      invoice_email?: boolean;
      order_message_notification_email?: boolean;
      product_review_email?: boolean;
      return_confirmation_email?: boolean;
      return_statuschange_email?: boolean;
    };
    /** @description A standard error object. */
    Error: {
      code: string;
      message?: string;
    };
    ErrorResponse: components['schemas']['BaseError'] & {
      errors?: components['schemas']['DetailedErrors'];
    };
    ErrorResponse400: {
      schema?: components['schemas']['Error'];
    };
    ErrorResponse404: {
      schema?: components['schemas']['Error'];
    };
    ErrorResponse409: {
      schema?: components['schemas']['Error'];
    };
    ErrorResponse422: {
      schema?: components['schemas']['Error'];
    };
    /** HSTSMaxAgeEnumValues */
    HSTSMaxAgeEnumValues: 'zero_seconds' | 'five_minutes' | 'one_year';
    InventoryNotificationsSettings: {
      low_stock_notification_addresses?: string[];
      out_of_stock_notification_addresses?: string[];
    };
    /** @description The basic locale settings for a store, used to give shopper information about languages, countries, etc. */
    Locale: {
      /**
       * @default en
       * @example en, en-us
       */
      default_shopper_language: string;
      /**
       * @description Determines whether to display the storefront content in the shopper's browser language or the shopper's selected default language.
       *
       * Available values:
       * * `browser` - language updates automatically based on the shopper browser language. Multiple languages are supported.
       * * `default_shopper_language` - content is displayed in a single language based on the set `default_shopper_language`. Only the selected language is supported.
       * @default default_shopper_language
       * @example default_shopper_language
       */
      shopper_language_selection_method?: 'browser' | 'default_shopper_language';
      /** @default United States */
      store_country?: string;
    };
    LogoSettings: {
      favicon_url?: string;
      logo_image_url?: string;
      logo_text?: string;
      type?: 'image' | 'text';
    };
    LogoSettingsUpdate: {
      logo_text?: string;
      type?: 'image' | 'text';
    };
    MetaPaginationObject: {
      pagination?: {
        /** @example 5 */
        count?: number;
        /** @example 1 */
        current_page?: number;
        links?: {
          /** @example ?limit=5&page=1 */
          current?: string;
          /** @example ?limit=5&page=2 */
          next?: string;
        };
        /** @example 5 */
        per_page?: number;
        /** @example 246 */
        total?: number;
        /** @example 50 */
        total_pages?: number;
      };
    };
    /**
     * ProductSortEnumValues
     * @description The available sorts for PLP pages.
     * @default bestselling
     */
    ProductSortEnumValues:
      | 'featured'
      | 'bestselling'
      | 'newest'
      | 'atoz'
      | 'ztoa'
      | 'highestprice'
      | 'lowestprice'
      | 'bestreviewed';
    RobotsTxtSettings: {
      robots_txt_ssl?: string;
    };
    SEOSettings: {
      meta_description?: string;
      meta_keywords?: string;
      page_title?: string;
      www_redirect?: 'www' | 'no-www' | 'none';
    };
    /** ContextIdentifier */
    SearchFilterOverrideContextIdentifier: {
      category_id?: number;
      channel_id?: number;
    };
    /** ScopeIdentifier */
    SearchFilterOverrideScopeIdentifier: {
      category_id?: number;
      channel_id?: number;
    };
    /** @description The basic profile settings for a store, used to give the shopper information about the business from which they are purchasing. */
    StoreProfile: {
      store_address?: string;
      store_address_type?: components['schemas']['AddressTypeEnumValues'];
      store_email?: string;
      store_name?: string;
      store_phone?: string;
    };
    StorefrontCategorySettings: {
      category_tree_depth?: number;
      default_product_sort?: components['schemas']['ProductSortEnumValues'];
      listing_mode?: components['schemas']['CategoryListingModeEnumValues'];
    };
    /** StorefrontProductSettings */
    StorefrontProductSettings: {
      /** @example preorder message */
      default_preorder_message?: string;
      show_add_to_cart_link?: boolean;
      show_add_to_cart_qty_box?: boolean;
      show_add_to_wishlist?: boolean;
      show_breadcrumbs_product_pages?: 'show_one' | 'show_none';
      show_product_brand?: boolean;
      show_product_price?: boolean;
      show_product_rating?: boolean;
      show_product_shipping?: boolean;
      show_product_sku?: boolean;
      show_product_weight?: boolean;
    };
    StorefrontSearchSettings: {
      content_product_sort?: components['schemas']['ContentSortEnumValues'];
      default_product_sort?: components['schemas']['ProductSortEnumValues'];
      /** @description Controls whether Product Filtering feature is active on the storefront. Only supports manipulation on a global level. */
      product_filtering_enabled?: boolean;
      search_suggest?: boolean;
    };
    /** StorefrontSecuritySettings */
    StorefrontSecuritySettings: {
      csp_header?: {
        enabled?: boolean;
        header_value?: string;
      };
      hsts?: {
        enabled?: boolean;
        include_preload?: boolean;
        include_subdomains?: boolean;
        max_age?: components['schemas']['HSTSMaxAgeEnumValues'];
      };
      sitewide_https_enabled?: boolean;
      x_frame_options_header?: {
        allowed_url?: string;
        enabled?: boolean;
        setting?: 'deny' | 'same_origin' | 'allow_from_url';
      };
    };
    StorefrontStatus: {
      down_for_maintenance_message?: string;
      prelaunch_message?: string;
      /** @description A read-only value representing the auto-generated storefront password. */
      prelaunch_password?: string;
    };
  };
  responses: {
    /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
    '200-storefront-product-settings': {
      content: {
        'application/json': {
          data?: components['schemas']['StorefrontProductSettings'];
          meta?: { [key: string]: unknown };
        };
      };
    };
    /** `422 Unprocessable Entity` Provided settings could not be applied for some reason - detailed errors in the response. */
    '422ErrorResp': {
      content: {
        'application/json': {
          errors?: {
            /** @example Incorrect value [current__only], it should match one of: current_category_only,child_categories_if_category_empty,child_categories; Incorrect value [besling], it should match one of: featured,newest,bestselling,atoz,ztoa,bestreviewed,lowestprice,highestprice */
            ''?: string;
          };
          /** @example 422 */
          status?: number;
          /** @example JSON data is missing or invalid */
          title?: string;
          /** @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes */
          type?: string;
        };
      };
    };
  };
  parameters: {
    /** @description Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
    ChannelIdParam: number;
    /** @description Array of strings (CSV) representing which configuration keys should be cleared (un-overridden) for the Channel. */
    KeysToDelete: string[];
    /** @description Required Channel ID. This delete operation will delete overridden settings for this channel, thus restoring them to the global defaults. */
    RequiredChannelIdParamForDelete: number;
    /** @description Hash of your store */
    store_hash: string;
  };
}

export interface operations {
  /** Get global transactional email settings or channel specific overrides by `channel_id`. */
  'get-settings-emails-enabled': {
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
      query: {
        /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
        channel_id?: components['parameters']['ChannelIdParam'];
      };
    };
    responses: {
      /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['EnabledTransactionalEmails'];
            meta?: { [key: string]: unknown };
          };
        };
      };
    };
  };
  /** Update global transactional email settings or create channel specific overrides by `channel_id`. */
  'put-settings-transactional-emails-enabled': {
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
      query: {
        /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
        channel_id?: components['parameters']['ChannelIdParam'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['EnabledTransactionalEmails'];
            meta?: { [key: string]: unknown };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EnabledTransactionalEmails'];
      };
    };
  };
  /**
   * Uploads an image file to use as the storefront favicon. Supported MIME types include GIF, JPEG, and PNG.
   *
   *   - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
   */
  'post-favicon-logo-image': {
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
      query: {
        /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
        channel_id?: components['parameters']['ChannelIdParam'];
      };
    };
    responses: {
      /** OK */
      204: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          FaviconFile?: string;
        };
      };
    };
  };
  /**
   * Returns store logo settings.
   *
   *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
   *
   *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
   */
  'get-settings-logo': {
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
      query: {
        /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
        channel_id?: components['parameters']['ChannelIdParam'];
      };
    };
    responses: {
      /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['LogoSettings'];
            meta?: { [key: string]: unknown };
          };
        };
      };
    };
  };
  /**
   * Updates the logo type and logo text for a textual logo. To upload new images, use the dedicated image POST endpoints.
   *
   *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
   *
   *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
   */
  'put-settings-logo': {
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
      query: {
        /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
        channel_id?: components['parameters']['ChannelIdParam'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['LogoSettings'];
            meta?: { [key: string]: unknown };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LogoSettingsUpdate'];
      };
    };
  };
  /**
   * Uploads an image file to use as the storefront logo. Supported MIME types include GIF, JPEG, and PNG.
   *
   *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
   */
  'post-settings-logo-image': {
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
      query: {
        /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
        channel_id?: components['parameters']['ChannelIdParam'];
      };
    };
    responses: {
      /** OK */
      204: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          LogoFile?: string;
        };
      };
    };
  };
  /** Returns a list of enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. These filters will be used if a store does not have contextual overrides. */
  getEnabled: {
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['ConfiguredFilters'];
            meta?: { [key: string]: unknown };
          };
        };
      };
    };
  };
  /** Updates enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. */
  updateEnabled: {
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['ConfiguredFilters'];
            meta?: { [key: string]: unknown };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ConfiguredFilters'];
      };
    };
  };
  /** Returns a list of filters available to power [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings). */
  getAvailable: {
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
      query: {
        /** Narrows the list of available filters based on channel ID. Only products currently assigned to the given Channel will be considered. */
        channel_id?: number;
        /** Narrows the list of available filters based on category ID. You can display settings to show products from the provided category, subcategories only, or both the category and its child categories. */
        category_id?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['AvailableFilter'][];
            meta?: { [key: string]: unknown };
          };
        };
      };
    };
  };
  /**
   * Returns a list of contextual filters enabled for a particular channel or category.
   *
   * **Usage Notes**
   *
   * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
   *
   * The order of the returned filters will match the sort order of the filters on the storefront.
   */
  getContexts: {
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
      query: {
        /** Only return contextual overrides related to a particular Channel. */
        channel_id?: number;
        /** Only return contextual overrides related to a particular Category. */
        category_id?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['ConfiguredFiltersOverride'][];
            meta?: components['schemas']['MetaPaginationObject'];
          };
        };
      };
    };
  };
  /**
   * Upserts contextual filters for a particular channel or category.
   *
   * **Usage Notes**
   *
   * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
   *
   * You can change the order of the filters on the live site by changing the order of the filters you send.
   */
  upsertContexts: {
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['ConfiguredFiltersOverride'][];
            meta?: { [key: string]: unknown };
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ConfiguredFiltersOverride'][];
      };
    };
  };
  /**
   * Returns product settings.
   *
   *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
   *
   *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
   */
  'get-settings-storefront-product': {
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
      query: {
        /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
        channel_id?: components['parameters']['ChannelIdParam'];
      };
    };
    responses: {
      200: components['responses']['200-storefront-product-settings'];
    };
  };
  /**
   * Updates product settings.
   *
   *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
   *
   *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
   */
  'put-settings-storefront-product': {
    parameters: {
      path: {
        /** Hash of your store */
        store_hash: components['parameters']['store_hash'];
      };
      query: {
        /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
        channel_id?: components['parameters']['ChannelIdParam'];
      };
    };
    responses: {
      200: components['responses']['200-storefront-product-settings'];
      422: components['responses']['422ErrorResp'];
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['StorefrontProductSettings'];
      };
    };
  };
}

export interface external {
  'https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml': {
    paths: {
      '/users/{userId}': {
        /** Retrieve the information of the user with the matching user ID. */
        get: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['operations']['get-users-userId'];
        /** Update the information of an existing user. */
        patch: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['operations']['patch-users-userId'];
        parameters: {
          path: {
            /** Id of an existing user. */
            userId: number;
          };
        };
      };
      '/user': {
        /** Create a new user. */
        post: external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['operations']['post-user'];
      };
    };
    components: {
      schemas: {
        /** User */
        User: {
          /** @description Unique identifier for the given user. */
          id: number;
          firstName: string;
          lastName: string;
          /** Format: email */
          email: string;
          /**
           * Format: date
           * @example 1997-10-31
           */
          dateOfBirth?: string;
          /** @description Set to true if the user's email has been verified. */
          emailVerified: boolean;
          /**
           * Format: date
           * @description The date that the user was created.
           */
          createDate?: string;
        };
        /** meta_Empty */
        meta_Empty: {
          meta?: { [key: string]: unknown };
        };
      };
      parameters: {
        /** @description Hash of your store */
        store_hash: string;
      };
    };
    operations: {
      /** Retrieve the information of the user with the matching user ID. */
      'get-users-userId': {
        parameters: {
          path: {
            /** Id of an existing user. */
            userId: number;
          };
        };
        responses: {
          /** User Found */
          200: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['components']['schemas']['User'];
            };
          };
          /** User Not Found */
          404: unknown;
        };
      };
      /** Update the information of an existing user. */
      'patch-users-userId': {
        parameters: {
          path: {
            /** Id of an existing user. */
            userId: number;
          };
        };
        responses: {
          /** User Updated */
          200: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['components']['schemas']['User'];
            };
          };
          /** User Not Found */
          404: unknown;
          /** Email Already Taken */
          409: unknown;
        };
        /** Patch user properties to update. */
        requestBody: {
          content: {
            'application/json': {
              firstName?: string;
              lastName?: string;
              /** @description If a new email is given, the user's email verified property will be set to false. */
              email?: string;
              dateOfBirth?: string;
            };
          };
        };
      };
      /** Create a new user. */
      'post-user': {
        responses: {
          /** User Created */
          200: {
            content: {
              'application/json': external['https://raw.githubusercontent.com/bigcommerce/api-specs/master/reference/global_refs.yaml']['components']['schemas']['User'];
            };
          };
          /** Missing Required Information */
          400: unknown;
          /** Email Already Taken */
          409: unknown;
        };
        /** Post the necessary fields for the API to create a new user. */
        requestBody: {
          content: {
            'application/json': {
              firstName: string;
              lastName: string;
              email: string;
              /** Format: date */
              dateOfBirth: string;
            };
          };
        };
      };
    };
  };
}
