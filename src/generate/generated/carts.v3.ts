/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v3/carts': {
    /**
     * Creates a **Cart**.
     *
     * **Required Fields**
     *
     * |Field|Details|
     * |-|-|
     * |`line_items`||
     * |`custom_items`|Only required if adding a custom item to the cart.|
     * |`gift_certificates`|Only required if adding a gift certificate to the cart.|
     *
     * **Usage Notes**
     *
     * * A **cart** `id` (UUID) is returned in the response.
     * * A **cart** `id` is the same as a **checkout** `id`.
     * * A cart can be created by adding an existing **catalog item** or a **custom item**.
     * * Carts are valid for **30 days** from the **last modification** (this includes creating the cart or editing the cart).
     * * If a product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
     * * The format and data type of a cart's `option_value` is defined by the `value_data` object of a product's [variant option value](/api-reference/store-management/catalog/product-variant-option-values/getoptionvaluebyid), [modifier value](/api-reference/store-management/catalog/product-modifier-values/getmodifiervaluebyid), or a combination of both.
     * * Redirect URLs can only be generated from carts created using the **Server-to-Server Carts API**.
     * * To get cart `redirect_urls` in the response, append the following query parameter to the request URL: `include=redirect_urls`.
     * * To restore a cart that was created by a shopper or via the Storefront Cart API, first recreate the cart using the Server to Server Cart API.
     * * To get cart `promotions` in the response, append the following query parameter to the request URL: `include=promotions.banners`.
     */
    post: operations['createACart'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v3/carts/{cartId}/items': {
    /**
     * Adds line items to the *Cart*.
     *
     * **Usage Notes**
     *
     * To add a custom item use `custom_items`.
     *
     * If a product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
     */
    post: operations['addCartLineItem'];
    parameters: {
      path: {
        store_hash: string;
        cartId: string;
      };
    };
  };
  '/stores/{store_hash}/v3/carts/{cartId}/redirect_urls': {
    /**
     * Creates a **Cart** redirect URL for redirecting a shopper to an already created cart using the `cartId`.
     *
     * **Usage Notes**
     *
     * * Redirect URLs can also be created via **Create a Cart** requests by appending `include=redirect_urls`.
     * * A **Carts** redirect URLs may only be used once.
     * * Once a redirect URL has been visited, it will be invalidated and cannot be used again.
     * * If your application requires URLs to be visited more than once, consider generating a fresh one each time you need to restore a cart, and redirecting to the URL from your own application.
     * * Redirect URLs can be generated only from carts created using the Server to Server Cart API.
     * * To restore a cart that was created on the storefront, either by a shopper or the Storefront Cart API, first recreate the cart using the Server to Server Cart API.
     */
    post: operations['createCartRedirectURL'];
    parameters: {
      path: {
        store_hash: string;
        cartId: string;
      };
    };
  };
  '/stores/{store_hash}/v3/carts/{cartId}/items/{itemId}': {
    /**
     * Updates an existing, single line item in the *Cart*.
     *
     * **Notes**
     *
     * Currently, only updating `list_price` and `quantity` are supported. Updating a product's `list_price` will make that item ineligible for V3 product level promotions.
     *
     * If the product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
     *
     * If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the Add Cart Line Items endpoint.
     *
     * `custom_items` cannot be updated via the API at this time. To update your cart, add a new updated custom item and delete the outdated one. If your cart contains only one line item, perform the add operation before the delete operation.
     *
     * Deleting all line items from the cart will invalidate the cart.
     */
    put: operations['updateCartLineItem'];
    /**
     * Deletes a *Cart* line item.
     *
     * **Notes**
     *
     * Removing the last `line_item` in the *Cart* deletes the *Cart*.
     */
    delete: operations['deleteCartLineItem'];
    parameters: {
      path: {
        store_hash: string;
        cartId: string;
        itemId: string;
      };
    };
  };
  '/stores/{store_hash}/v3/carts/{cartId}': {
    /** Returns a stores *Cart*. */
    get: operations['getACart'];
    /**
     * Updates a *Carts* `customer_id`.
     *
     * **Notes**
     *
     * Changing the *Cart* `customer_id` will remove any promotions or shipping on the *Cart*. These are tied to the customer depending on cart conditions and any customer groups.
     */
    put: operations['updateACart'];
    /** Deletes a *Cart*. Once a *Cart* has been deleted it can not be recovered. */
    delete: operations['deleteACart'];
    parameters: {
      path: {
        store_hash: string;
        cartId: string;
      };
    };
  };
  '/stores/{store_hash}/v3/carts/settings': {
    /** Returns the global cart settings of a store. */
    get: operations['getGlobalCartSettings'];
    /** Update the global cart settings of a store. */
    put: operations['updateGlobalCartSettings'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v3/carts/settings/channels/{channel_id}': {
    /** Returns the per-channel overrides for the cart settings of a store. */
    get: operations['getChannelCartSettings'];
    /** Update the per-channel overrides for the cart settings of a store */
    put: operations['updateChannelCartSettings'];
    parameters: {
      path: {
        store_hash: string;
        channel_id: string;
      };
    };
  };
}

export interface components {
  schemas: {
    /** Cart Update Request */
    CartUpdateRequest: {
      /** Line Item Request Data */
      line_item?: {
        quantity: number;
        product_id: number;
        /** @description Required if the product has variants */
        variant_id: number;
        list_price?: number;
        option_selections?: {
          option_id?: number;
          option_value?: string;
        }[];
      };
      /** Line Item Gift Certificate Request Data */
      gift_certificate?: {
        /** @description Given name for gift certificate line item. */
        name: string;
        /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
        theme: string;
        amount: number;
        quantity: number;
        /** Contact Entity */
        sender: {
          name?: string;
          email?: string;
        };
        /** Contact Entity */
        recipient: {
          name?: string;
          email?: string;
        };
        /** @description Message shown to recipient, as provided by sender. */
        message?: string;
      };
    };
    /** Cart Create Post Data */
    CartCreatePostData: {
      customer_id?: number;
      line_items?: (Partial<components['schemas']['cart_PostVariant']> &
        Partial<components['schemas']['cart_PostModifier']>)[];
      custom_items?: components['schemas']['cart_PostCustomItem'];
      gift_certificates?: {
        /** @description Given name for gift certificate line item. */
        name: string;
        /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
        theme: string;
        amount: number;
        quantity: number;
        /** Contact Entity */
        sender: {
          name?: string;
          email?: string;
        };
        /** Contact Entity */
        recipient: {
          name?: string;
          email?: string;
        };
        /** @description Message shown to recipient, as provided by sender. */
        message?: string;
      }[];
      /** @description If no channel is specified, defaults to 1. */
      channel_id?: number;
      currency?: {
        /**
         * Format: ISO-4217
         * @description The [transactional currency](/api-docs/multi-currency/guide/introduction#multi-currency-definitions) code for the cart as a [ISO-4217](https://www.iso.org/iso-4217-currency-codes.html) formatted string; required when multi-currency is enabled. Passing in a non-transactional display currency will result in a `400` error.
         */
        code?: string;
      };
      /** @description Accepts string of format `xx` or `xx-YY`. */
      locale?: string;
    };
    /** Cart Request Data */
    CartRequestData: {
      line_items?: {
        quantity: number;
        product_id: number;
        /** @description Required if the product has variants */
        variant_id: number;
        list_price?: number;
        option_selections?: {
          option_id?: number;
          option_value?: string;
        }[];
      }[];
      gift_certificates?: {
        /** @description Given name for gift certificate line item. */
        name: string;
        /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
        theme: string;
        amount: number;
        quantity: number;
        /** Contact Entity */
        sender: {
          name?: string;
          email?: string;
        };
        /** Contact Entity */
        recipient: {
          name?: string;
          email?: string;
        };
        /** @description Message shown to recipient, as provided by sender. */
        message?: string;
      }[];
      /** @description If no channel is specified, defaults to 1. */
      channel_id?: number;
    };
    /** Cart Update Put Request Data */
    CartUpdatePutRequestData: {
      customer_id?: number;
    };
    /** Line Item Request Data */
    LineItemRequestData: {
      quantity: number;
      product_id: number;
      /** @description Required if the product has variants */
      variant_id: number;
      list_price?: number;
      option_selections?: {
        option_id?: number;
        option_value?: string;
      }[];
    };
    /** Product Option Selection */
    ProductOptionSelection: {
      option_id?: number;
      option_value?: string;
    };
    /** Line Item Gift Certificate Request Data */
    LineItemGiftCertificateRequestData: {
      /** @description Given name for gift certificate line item. */
      name: string;
      /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
      theme: string;
      amount: number;
      quantity: number;
      /** Contact Entity */
      sender: {
        name?: string;
        email?: string;
      };
      /** Contact Entity */
      recipient: {
        name?: string;
        email?: string;
      };
      /** @description Message shown to recipient, as provided by sender. */
      message?: string;
    };
    /**
     * Cart_Full
     * @description A cart contains a collection of items, prices, discounts, etc.. It does not contain customer-related data.
     */
    Cart_Full: {
      /**
       * Format: UUID
       * @description Cart ID, provided after creating a cart with a POST.
       */
      id?: string;
      /** @description Bundled items will have their parent's item Id. */
      parent_id?: string;
      /** @description ID of the customer to which the cart belongs. */
      customer_id?: number;
      /** @description The cart's email. This is the same email that is used in the billing address */
      email?: string;
      /**
       * Currency
       * @description This will always be the same between cart and checkout.
       */
      currency?: {
        /**
         * Format: ISO-4217
         * @description The [transactional currency](/api-docs/multi-currency/guide/introduction#multi-currency-definitions) code for the cart as a [ISO-4217](https://www.iso.org/iso-4217-currency-codes.html) formatted string.
         */
        code?: string;
      };
      tax_included?: boolean;
      /** @description Sum of cart line-item amounts before cart-level discounts, coupons, or taxes. */
      base_amount?: number;
      /** @description Discounted amount. */
      discount_amount?: number;
      /** @description Sum of cart line-item amounts minus cart-level discounts and coupons. This amount includes taxes (where applicable). */
      cart_amount?: number;
      coupons?: components['schemas']['AppliedCoupon'][];
      discounts?: {
        /**
         * @description ID of the applied discount.
         * @example coupon
         */
        id?: string;
        /** @description The discounted amount. */
        discounted_amount?: number;
      }[];
      line_items?: {
        physical_items: ({
          /**
           * @description The line-item ID.
           * @example 6e193ce6-f327-4dcc-b75e-72cf6738525e
           */
          id?: string;
          /**
           * @description The id of the variant. Required in the /PUT or /POST if the product has variants.
           * @example 358
           */
          variant_id: number;
          /**
           * @description The id of the product. Required in a /POST request.
           * @example 12
           */
          product_id: number;
          /**
           * @description SKU of the variant.
           * @example SMGREEN
           */
          sku?: string;
          /**
           * @description The item's product name.
           * @example T-Shirt
           */
          name?: string;
          /**
           * Format: uri
           * @description The product URL.
           * @example http://your-store-url.mybigcommerce.com/your-product/
           */
          url?: string;
          /**
           * @description Quantity of this item in the cart.
           * @example 5
           */
          quantity: number;
          /** @description Whether the item is taxable. */
          is_taxable?: boolean;
          /**
           * Format: uri
           * @description Image of the product or variant.
           * @example https://pathtoproductimage/ProductDefault.png
           */
          image_url?: string;
          gift_certificates?: {
            /** @example 10 */
            amount?: number;
            /** @example abc-123 */
            id?: string;
            /** @example jane */
            name?: string;
            /** @example 1 */
            quantity?: number;
            recipient?: {
              /** @example janedoe@example.com */
              email?: string;
              /** @example Jane Doe */
              name?: string;
            };
            /** @example true */
            taxable?: boolean;
            /** @example birthday */
            theme?: string;
          }[];
          discounts?: {
            /** @description ID of the applied discount. Will return */
            id?: number;
            /** @description The discounted amount. */
            discounted_amount?: number;
          }[];
          coupons?: {
            /** @description Required in a /POST request. */
            coupons?: {
              /** @description The coupon code */
              coupon_code: {
                /**
                 * @description Coupon Id
                 * @example 6
                 */
                id?: number;
                /**
                 * @description The coupon code. Required in a /POST request.
                 * @example KV56053388J
                 */
                code?: string;
                /**
                 * @description Name given to the coupon in the Control Panel
                 * @example Percentage off
                 */
                name?: string;
                /**
                 * @description The discount type.
                 * - type 0: per_item_discount
                 * - type 1: percentage_discount
                 * - type 2: per_total_discount
                 * - type 3: shipping_discount
                 * - type 4: free_shipping
                 */
                discountType?: 0 | 1 | 2 | 3 | 4;
                /**
                 * @description The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
                 * @example 3
                 */
                discountAmount?: number;
                /** @description Returns 0 if a expiration date is not set */
                expiresDate?: number;
                /**
                 * @description Total discount amount off cart
                 * @example 4.19
                 */
                totalDiscount?: number;
              };
            };
          }[];
          /**
           * @description The total value of all discounts applied to this item. This includes coupons and cart level discounts
           * @example 4
           */
          discount_amount?: number;
          /** @description The total value of all coupons applied to this item. */
          coupon_amount?: number;
          /** @description Item’s list price, as quoted by the manufacturer/distributor. */
          list_price?: number;
          /** @description Item's price after all discounts are applied. (The final price before tax calculation.) */
          sale_price?: number;
          /** @description Item's list price multiplied by the quantity. */
          extended_list_price?: number;
          /** @description Item's sale price multiplied by the quantity. */
          extended_sale_price?: number;
          /** @description The list of selected options for this product. */
          options?: {
            /** @description The product option name. For example, Color or Size */
            name?: string;
            /** @description The product option identifier. */
            name_id?: number;
            /** @description The product option value. For example, Red or Medium */
            value?: string;
            /** @description The product option value identifier. */
            value_id?: number;
          }[];
        } & {
          is_require_shipping?: boolean;
          /** Gift Wrapping */
          gift_wrapping?: {
            name?: string;
            message?: string;
            /** Format: float */
            amount?: number;
          };
        })[];
        digital_items: ({
          /**
           * @description The line-item ID.
           * @example 6e193ce6-f327-4dcc-b75e-72cf6738525e
           */
          id?: string;
          /**
           * @description The id of the variant. Required in the /PUT or /POST if the product has variants.
           * @example 358
           */
          variant_id: number;
          /**
           * @description The id of the product. Required in a /POST request.
           * @example 12
           */
          product_id: number;
          /**
           * @description SKU of the variant.
           * @example SMGREEN
           */
          sku?: string;
          /**
           * @description The item's product name.
           * @example T-Shirt
           */
          name?: string;
          /**
           * Format: uri
           * @description The product URL.
           * @example http://your-store-url.mybigcommerce.com/your-product/
           */
          url?: string;
          /**
           * @description Quantity of this item in the cart.
           * @example 5
           */
          quantity: number;
          /** @description Whether the item is taxable. */
          is_taxable?: boolean;
          /**
           * Format: uri
           * @description Image of the product or variant.
           * @example https://pathtoproductimage/ProductDefault.png
           */
          image_url?: string;
          discounts?: {
            /** @description ID of the applied discount. Will return */
            id?: number;
            /** @description The discounted amount. */
            discounted_amount?: number;
          }[];
          coupons?: {
            /** @description Required in a /POST request. */
            coupons?: {
              /** @description The coupon code */
              coupon_code: {
                /**
                 * @description Coupon Id
                 * @example 6
                 */
                id?: number;
                /**
                 * @description The coupon code. Required in a /POST request.
                 * @example KV56053388J
                 */
                code?: string;
                /**
                 * @description Name given to the coupon in the Control Panel
                 * @example Percentage off
                 */
                name?: string;
                /**
                 * @description The discount type.
                 * - type 0: per_item_discount
                 * - type 1: percentage_discount
                 * - type 2: per_total_discount
                 * - type 3: shipping_discount
                 * - type 4: free_shipping
                 */
                discountType?: 0 | 1 | 2 | 3 | 4;
                /**
                 * @description The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
                 * @example 3
                 */
                discountAmount?: number;
                /** @description Returns 0 if a expiration date is not set */
                expiresDate?: number;
                /**
                 * @description Total discount amount off cart
                 * @example 4.19
                 */
                totalDiscount?: number;
              };
            };
          }[];
          /**
           * @description The total value of all discounts applied to this item. This includes coupons and cart level discounts
           * @example 4
           */
          discount_amount?: number;
          /** @description The total value of all coupons applied to this item. */
          coupon_amount?: number;
          /** @description Item’s list price, as quoted by the manufacturer/distributor. */
          list_price?: number;
          /** @description Item's price after all discounts are applied. (The final price before tax calculation.) */
          sale_price?: number;
          /** @description Item's list price multiplied by the quantity. */
          extended_list_price?: number;
          /** @description Item's sale price multiplied by the quantity. */
          extended_sale_price?: number;
          /** @description The list of selected options for this product. */
          options?: {
            /** @description The product option name. For example, Color or Size */
            name?: string;
            /** @description The product option identifier. */
            name_id?: number;
            /** @description The product option value. For example, Red or Medium */
            value?: string;
            /** @description The product option value identifier. */
            value_id?: number;
          }[];
        } & {
          /** @description URLs to download all product files. */
          download_file_urls?: string[];
          /**
           * Format: url
           * @description The URL for the combined downloads page.
           */
          download_page_url?: string;
          /** @description Combined download size, in human-readable style. E.g.: `30MB`. */
          download_size?: string;
        })[];
        gift_certificates?: {
          id?: string;
          /** @description GiftCertificate-provided name that will appear in the control panel. */
          name?: string;
          /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
          theme: string;
          /** @description Value must be between 1.00 and 1,000.00 in the store’s default currency. */
          amount: number;
          is_taxable?: boolean;
          /** Contact Entity */
          sender: {
            name?: string;
            email?: string;
          };
          /** Contact Entity */
          recipient: {
            name?: string;
            email?: string;
          };
          /** @description Limited to 200 characters. */
          message?: string;
        }[];
        custom_items?: {
          /** @description Custom item id. */
          id?: string;
          /** @description Custom item sku. */
          sku?: string;
          /** @description Item's product name. */
          name?: string;
          /** @description Quantity of this item in the cart. */
          quantity?: number;
          /** @description Price of the item. With or without tax depending on the store's set up. */
          list_price?: number;
          /** @description Item's list price multiplied by quantity. */
          extended_list_price?: number;
        }[];
      }[];
      /**
       * Format: ISO-8601
       * @description Time when the cart was created.
       */
      created_time?: string;
      /**
       * Format: ISO-8601
       * @description Time when the cart was last updated.
       */
      updated_time?: string;
      /** @description If no channel is specified, defaults to 1. */
      channel_id?: number;
      /** @description Locale of the cart. */
      locale?: string;
      /** @description This is available only when "include=promotions.banners" is presented in the URL. */
      promotions?: {
        /** Banner */
        banners?: {
          /** @description Id of the promotion. */
          id?: string;
          /** @description Type of the banner */
          type?: string;
          /** @description An array of the locations where the banner will display */
          page?: string[];
          /** @description Text of the banner */
          text?: string;
        };
      };
    };
    /**
     * Currency
     * @description This will always be the same between cart and checkout.
     */
    Currency: {
      /**
       * Format: ISO-4217
       * @description ISO-4217 currency code. (See: http://en.wikipedia.org/wiki/ISO_4217.)
       */
      code?: string;
    };
    /** Line Item */
    LineItem: {
      physical_items: ({
        /**
         * @description The line-item ID.
         * @example 6e193ce6-f327-4dcc-b75e-72cf6738525e
         */
        id?: string;
        /**
         * @description The id of the variant. Required in the /PUT or /POST if the product has variants.
         * @example 358
         */
        variant_id: number;
        /**
         * @description The id of the product. Required in a /POST request.
         * @example 12
         */
        product_id: number;
        /**
         * @description SKU of the variant.
         * @example SMGREEN
         */
        sku?: string;
        /**
         * @description The item's product name.
         * @example T-Shirt
         */
        name?: string;
        /**
         * Format: uri
         * @description The product URL.
         * @example http://your-store-url.mybigcommerce.com/your-product/
         */
        url?: string;
        /**
         * @description Quantity of this item in the cart.
         * @example 5
         */
        quantity: number;
        /** @description Whether the item is taxable. */
        is_taxable?: boolean;
        /**
         * Format: uri
         * @description Image of the product or variant.
         * @example https://pathtoproductimage/ProductDefault.png
         */
        image_url?: string;
        discounts?: {
          /**
           * @description ID of the applied discount. Will return
           * @example coupon
           */
          id?: string | number;
          /** @description The discounted amount. */
          discounted_amount?: number;
        }[];
        coupons?: {
          /** @description Required in a /POST request. */
          coupons?: {
            /** @description The coupon code */
            coupon_code: {
              /**
               * @description Coupon Id
               * @example 6
               */
              id?: number;
              /**
               * @description The coupon code. Required in a /POST request.
               * @example KV56053388J
               */
              code?: string;
              /**
               * @description Name given to the coupon in the Control Panel
               * @example Percentage off
               */
              name?: string;
              /**
               * @description The discount type.
               *
               * - type 0: per_item_discount
               * - type 1: percentage_discount
               * - type 2: per_total_discount
               * - type 3: shipping_discount
               * - type 4: free_shipping
               */
              discountType?: 0 | 1 | 2 | 3 | 4;
              /**
               * @description The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
               * @example 3
               */
              discountAmount?: number;
              /** @description Returns 0 if a expiration date is not set */
              expiresDate?: number;
              /**
               * @description Total discount amount off cart
               * @example 4.19
               */
              totalDiscount?: number;
            };
          };
        }[];
        /**
         * @description The total value of all discounts applied to this item. This includes coupons and cart level discounts
         * @example 4
         */
        discount_amount?: number;
        /** @description The total value of all coupons applied to this item. */
        coupon_amount?: number;
        /** @description Item’s list price, as quoted by the manufacturer/distributor. Optional price override. */
        list_price?: number;
        /** @description Item's price after all discounts are applied. (The final price before tax calculation.) */
        sale_price?: number;
        /** @description Item's list price multiplied by the quantity. */
        extended_list_price?: number;
        /** @description Item's sale price multiplied by the quantity. */
        extended_sale_price?: number;
        /** @description The list of selected options for this product. */
        options?: {
          /** @description The product option name. For example, Color or Size */
          name?: string;
          /** @description The product option identifier. */
          name_id?: number;
          /** @description The product option value. For example, Red or Medium */
          value?: string;
          /** @description The product option value identifier. */
          value_id?: number;
        }[];
      } & {
        is_require_shipping?: boolean;
        /** Gift Wrapping */
        gift_wrapping?: {
          name?: string;
          message?: string;
          /** Format: float */
          amount?: number;
        };
      })[];
      digital_items: ({
        /**
         * @description The line-item ID.
         * @example 6e193ce6-f327-4dcc-b75e-72cf6738525e
         */
        id?: string;
        /**
         * @description The id of the variant. Required in the /PUT or /POST if the product has variants.
         * @example 358
         */
        variant_id: number;
        /**
         * @description The id of the product. Required in a /POST request.
         * @example 12
         */
        product_id: number;
        /**
         * @description SKU of the variant.
         * @example SMGREEN
         */
        sku?: string;
        /**
         * @description The item's product name.
         * @example T-Shirt
         */
        name?: string;
        /**
         * Format: uri
         * @description The product URL.
         * @example http://your-store-url.mybigcommerce.com/your-product/
         */
        url?: string;
        /**
         * @description Quantity of this item in the cart.
         * @example 5
         */
        quantity: number;
        /** @description Whether the item is taxable. */
        is_taxable?: boolean;
        /**
         * Format: uri
         * @description Image of the product or variant.
         * @example https://pathtoproductimage/ProductDefault.png
         */
        image_url?: string;
        discounts?: {
          /**
           * @description ID of the applied discount. Will return
           * @example coupon
           */
          id?: string | number;
          /** @description The discounted amount. */
          discounted_amount?: number;
        }[];
        coupons?: {
          /** @description Required in a /POST request. */
          coupons?: {
            /** @description The coupon code */
            coupon_code: {
              /**
               * @description Coupon Id
               * @example 6
               */
              id?: number;
              /**
               * @description The coupon code. Required in a /POST request.
               * @example KV56053388J
               */
              code?: string;
              /**
               * @description Name given to the coupon in the Control Panel
               * @example Percentage off
               */
              name?: string;
              /**
               * @description The discount type.
               *
               * - type 0: per_item_discount
               * - type 1: percentage_discount
               * - type 2: per_total_discount
               * - type 3: shipping_discount
               * - type 4: free_shipping
               */
              discountType?: 0 | 1 | 2 | 3 | 4;
              /**
               * @description The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
               * @example 3
               */
              discountAmount?: number;
              /** @description Returns 0 if a expiration date is not set */
              expiresDate?: number;
              /**
               * @description Total discount amount off cart
               * @example 4.19
               */
              totalDiscount?: number;
            };
          };
        }[];
        /**
         * @description The total value of all discounts applied to this item. This includes coupons and cart level discounts
         * @example 4
         */
        discount_amount?: number;
        /** @description The total value of all coupons applied to this item. */
        coupon_amount?: number;
        /** @description Item’s list price, as quoted by the manufacturer/distributor. Optional price override. */
        list_price?: number;
        /** @description Item's price after all discounts are applied. (The final price before tax calculation.) */
        sale_price?: number;
        /** @description Item's list price multiplied by the quantity. */
        extended_list_price?: number;
        /** @description Item's sale price multiplied by the quantity. */
        extended_sale_price?: number;
        /** @description The list of selected options for this product. */
        options?: {
          /** @description The product option name. For example, Color or Size */
          name?: string;
          /** @description The product option identifier. */
          name_id?: number;
          /** @description The product option value. For example, Red or Medium */
          value?: string;
          /** @description The product option value identifier. */
          value_id?: number;
        }[];
      } & {
        /** @description URLs to download all product files. */
        download_file_urls?: string[];
        /**
         * Format: url
         * @description The URL for the combined downloads page.
         */
        download_page_url?: string;
        /** @description Combined download size, in human-readable style. E.g.: `30MB`. */
        download_size?: string;
      })[];
      gift_certificates?: {
        id?: string;
        /** @description GiftCertificate-provided name that will appear in the control panel. */
        name?: string;
        /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
        theme: string;
        /** @description Value must be between 1.00 and 1,000.00 in the stores default currency. */
        amount: number;
        is_taxable?: boolean;
        /** Contact Entity */
        sender: {
          name?: string;
          email?: string;
        };
        /** Contact Entity */
        recipient: {
          name?: string;
          email?: string;
        };
        /** @description Limited to 200 characters. */
        message?: string;
      }[];
      virtual_items?: {
        /** @description Id of the custom item */
        id?: string;
        /** @description Custom item sku */
        sku?: string;
        /** @description Item name */
        name?: string;
        quantity?: string;
        /** @description Price of the item. With or without tax, depending on your store’s setup. Optional price override. */
        list_price?: string;
      }[];
    };
    /** Item Gift Certificate */
    ItemGiftCertificate: {
      id?: string;
      /** @description Provided name that will appear in the control panel. */
      name?: string;
      /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
      theme: string;
      /** @description Value must be between 1.00 and 1,000.00 in the store’s default currency. */
      amount: number;
      is_taxable?: boolean;
      /** Contact Entity */
      sender: {
        name?: string;
        email?: string;
      };
      /** Contact Entity */
      recipient: {
        name?: string;
        email?: string;
      };
      /** @description Limited to 200 characters. */
      message?: string;
    };
    /** Contact Entity */
    ContactEntity: {
      name?: string;
      email?: string;
    };
    /** Item Digital */
    ItemDigital: {
      /**
       * @description The line-item ID.
       * @example 6e193ce6-f327-4dcc-b75e-72cf6738525e
       */
      id?: string;
      /**
       * @description The id of the variant. Required in the /PUT or /POST if the product has variants.
       * @example 358
       */
      variant_id: number;
      /**
       * @description The id of the product. Required in a /POST request.
       * @example 12
       */
      product_id: number;
      /**
       * @description SKU of the variant.
       * @example SMGREEN
       */
      sku?: string;
      /**
       * @description The item's product name.
       * @example T-Shirt
       */
      name?: string;
      /**
       * Format: uri
       * @description The product URL.
       * @example http://your-store-url.mybigcommerce.com/your-product/
       */
      url?: string;
      /**
       * @description Quantity of this item in the cart.
       * @example 5
       */
      quantity: number;
      /** @description Whether the item is taxable. */
      is_taxable?: boolean;
      /**
       * Format: uri
       * @description Image of the product or variant.
       * @example https://pathtoproductimage/ProductDefault.png
       */
      image_url?: string;
      discounts?: {
        /**
         * @description ID of the applied discount. Will return
         * @example coupon
         */
        id?: string | number;
        /** @description The discounted amount. */
        discounted_amount?: number;
      }[];
      coupons?: {
        /** @description Required in a /POST request. */
        coupons?: {
          /** @description The coupon code */
          coupon_code: {
            /**
             * @description Coupon Id
             * @example 6
             */
            id?: number;
            /**
             * @description The coupon code. Required in a /POST request.
             * @example KV56053388J
             */
            code?: string;
            /**
             * @description Name given to the coupon in the Control Panel
             * @example Percentage off
             */
            name?: string;
            /**
             * @description The discount type.
             *
             * - type 0: per_item_discount
             * - type 1: percentage_discount
             * - type 2: per_total_discount
             * - type 3: shipping_discount
             * - type 4: free_shipping
             */
            discountType?: 0 | 1 | 2 | 3 | 4;
            /**
             * @description The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
             * @example 3
             */
            discountAmount?: number;
            /** @description Returns 0 if a expiration date is not set */
            expiresDate?: number;
            /**
             * @description Total discount amount off cart
             * @example 4.19
             */
            totalDiscount?: number;
          };
        };
      }[];
      /**
       * @description The total value of all discounts applied to this item. This includes coupons and cart level discounts
       * @example 4
       */
      discount_amount?: number;
      /** @description The total value of all coupons applied to this item. */
      coupon_amount?: number;
      /** @description Item’s list price, as quoted by the manufacturer/distributor. Optional price override. */
      list_price?: number;
      /** @description Item's price after all discounts are applied. (The final price before tax calculation.) */
      sale_price?: number;
      /** @description Item's list price multiplied by the quantity. */
      extended_list_price?: number;
      /** @description Item's sale price multiplied by the quantity. */
      extended_sale_price?: number;
      /** @description The list of selected options for this product. */
      options?: {
        /** @description The product option name. For example, Color or Size */
        name?: string;
        /** @description The product option identifier. */
        name_id?: number;
        /** @description The product option value. For example, Red or Medium */
        value?: string;
        /** @description The product option value identifier. */
        value_id?: number;
      }[];
    } & {
      /** @description URLs to download all product files. */
      download_file_urls?: string[];
      /**
       * Format: url
       * @description The URL for the combined downloads page.
       */
      download_page_url?: string;
      /** @description Combined download size, in human-readable style. E.g.: `30MB`. */
      download_size?: string;
    };
    /** Item Physical */
    ItemPhysical: {
      /**
       * @description The line-item ID.
       * @example 6e193ce6-f327-4dcc-b75e-72cf6738525e
       */
      id?: string;
      /**
       * @description The id of the variant. Required in the /PUT or /POST if the product has variants.
       * @example 358
       */
      variant_id: number;
      /**
       * @description The id of the product. Required in a /POST request.
       * @example 12
       */
      product_id: number;
      /**
       * @description SKU of the variant.
       * @example SMGREEN
       */
      sku?: string;
      /**
       * @description The item's product name.
       * @example T-Shirt
       */
      name?: string;
      /**
       * Format: uri
       * @description The product URL.
       * @example http://your-store-url.mybigcommerce.com/your-product/
       */
      url?: string;
      /**
       * @description Quantity of this item in the cart.
       * @example 5
       */
      quantity: number;
      /** @description Whether the item is taxable. */
      is_taxable?: boolean;
      /**
       * Format: uri
       * @description Image of the product or variant.
       * @example https://pathtoproductimage/ProductDefault.png
       */
      image_url?: string;
      discounts?: {
        /**
         * @description ID of the applied discount. Will return
         * @example coupon
         */
        id?: string | number;
        /** @description The discounted amount. */
        discounted_amount?: number;
      }[];
      coupons?: {
        /** @description Required in a /POST request. */
        coupons?: {
          /** @description The coupon code */
          coupon_code: {
            /**
             * @description Coupon Id
             * @example 6
             */
            id?: number;
            /**
             * @description The coupon code. Required in a /POST request.
             * @example KV56053388J
             */
            code?: string;
            /**
             * @description Name given to the coupon in the Control Panel
             * @example Percentage off
             */
            name?: string;
            /**
             * @description The discount type.
             *
             * - type 0: per_item_discount
             * - type 1: percentage_discount
             * - type 2: per_total_discount
             * - type 3: shipping_discount
             * - type 4: free_shipping
             */
            discountType?: 0 | 1 | 2 | 3 | 4;
            /**
             * @description The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
             * @example 3
             */
            discountAmount?: number;
            /** @description Returns 0 if a expiration date is not set */
            expiresDate?: number;
            /**
             * @description Total discount amount off cart
             * @example 4.19
             */
            totalDiscount?: number;
          };
        };
      }[];
      /**
       * @description The total value of all discounts applied to this item. This includes coupons and cart level discounts
       * @example 4
       */
      discount_amount?: number;
      /** @description The total value of all coupons applied to this item. */
      coupon_amount?: number;
      /** @description Item’s list price, as quoted by the manufacturer/distributor. Optional price override. */
      list_price?: number;
      /** @description Item's price after all discounts are applied. (The final price before tax calculation.) */
      sale_price?: number;
      /** @description Item's list price multiplied by the quantity. */
      extended_list_price?: number;
      /** @description Item's sale price multiplied by the quantity. */
      extended_sale_price?: number;
      /** @description The list of selected options for this product. */
      options?: {
        /** @description The product option name. For example, Color or Size */
        name?: string;
        /** @description The product option identifier. */
        name_id?: number;
        /** @description The product option value. For example, Red or Medium */
        value?: string;
        /** @description The product option value identifier. */
        value_id?: number;
      }[];
    } & {
      is_require_shipping?: boolean;
      /** Gift Wrapping */
      gift_wrapping?: {
        name?: string;
        message?: string;
        /** Format: float */
        amount?: number;
      };
    };
    /** Base Item */
    BaseItem: {
      /**
       * @description The line-item ID.
       * @example 6e193ce6-f327-4dcc-b75e-72cf6738525e
       */
      id?: string;
      /**
       * @description The id of the variant. Required in the /PUT or /POST if the product has variants.
       * @example 358
       */
      variant_id: number;
      /**
       * @description The id of the product. Required in a /POST request.
       * @example 12
       */
      product_id: number;
      /**
       * @description SKU of the variant.
       * @example SMGREEN
       */
      sku?: string;
      /**
       * @description The item's product name.
       * @example T-Shirt
       */
      name?: string;
      /**
       * Format: uri
       * @description The product URL.
       * @example http://your-store-url.mybigcommerce.com/your-product/
       */
      url?: string;
      /**
       * @description Quantity of this item in the cart.
       * @example 5
       */
      quantity: number;
      /** @description Whether the item is taxable. */
      is_taxable?: boolean;
      /**
       * Format: uri
       * @description Image of the product or variant.
       * @example https://pathtoproductimage/ProductDefault.png
       */
      image_url?: string;
      discounts?: {
        /**
         * @description ID of the applied discount. Will return
         * @example coupon
         */
        id?: string | number;
        /** @description The discounted amount. */
        discounted_amount?: number;
      }[];
      coupons?: {
        /** @description Required in a /POST request. */
        coupons?: {
          /** @description The coupon code */
          coupon_code: {
            /**
             * @description Coupon Id
             * @example 6
             */
            id?: number;
            /**
             * @description The coupon code. Required in a /POST request.
             * @example KV56053388J
             */
            code?: string;
            /**
             * @description Name given to the coupon in the Control Panel
             * @example Percentage off
             */
            name?: string;
            /**
             * @description The discount type.
             *
             * - type 0: per_item_discount
             * - type 1: percentage_discount
             * - type 2: per_total_discount
             * - type 3: shipping_discount
             * - type 4: free_shipping
             */
            discountType?: 0 | 1 | 2 | 3 | 4;
            /**
             * @description The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
             * @example 3
             */
            discountAmount?: number;
            /** @description Returns 0 if a expiration date is not set */
            expiresDate?: number;
            /**
             * @description Total discount amount off cart
             * @example 4.19
             */
            totalDiscount?: number;
          };
        };
      }[];
      /**
       * @description The total value of all discounts applied to this item. This includes coupons and cart level discounts
       * @example 4
       */
      discount_amount?: number;
      /** @description The total value of all coupons applied to this item. */
      coupon_amount?: number;
      /** @description Item’s list price, as quoted by the manufacturer/distributor. */
      list_price?: number;
      /** @description Item's price after all discounts are applied. (The final price before tax calculation.) */
      sale_price?: number;
      /** @description Item's list price multiplied by the quantity. */
      extended_list_price?: number;
      /** @description Item's sale price multiplied by the quantity. */
      extended_sale_price?: number;
      /** @description The list of selected options for this product. */
      options?: {
        /** @description The product option name. For example, Color or Size */
        name?: string;
        /** @description The product option identifier. */
        name_id?: number;
        /** @description The product option value. For example, Red or Medium */
        value?: string;
        /** @description The product option value identifier. */
        value_id?: number;
      }[];
    };
    /** Product Option */
    ProductOption: {
      /** @description The product option name. For example, Color or Size */
      name?: string;
      /** @description The product option identifier. */
      name_id?: number;
      /** @description The product option value. For example, Red or Medium */
      value?: string;
      /** @description The product option value identifier. */
      value_id?: number;
    };
    /**
     * Applied Coupon
     * @description |Type `int`|Type Name|
     * |-|-|
     * |`0`|`per_item_discount`|
     * |`1`|`percentage_discount`|
     * |`2`|`per_total_discount`|
     * |`3`|`shipping_discount`|
     * |`4`|`free_shipping`|
     * |`5`|`promotion`|
     */
    AppliedCoupon: {
      /** @description the coupon code */
      code: string;
      /** @description The coupon ID. Read Only */
      id?: string;
      /**
       * @description Key name to identify the type of coupon.
       *
       * type 0: per_item_discount
       * type 1: percentage_discount
       * type 2: per_total_discount
       * type 3: shipping_discount
       * type 4: free_shipping
       * type 5: promotion
       */
      coupon_type?: string;
      /**
       * Format: double
       * @description The discounted amount applied within a given context.
       */
      discounted_amount?: number;
    };
    /** Applied Discount */
    AppliedDiscount: {
      /**
       * @description ID of the applied discount. Will return
       * @example coupon
       */
      id?: string | number;
      /** @description The discounted amount. */
      discounted_amount?: number;
    };
    /** Gift Wrapping */
    GiftWrapping: {
      name?: string;
      message?: string;
      /** Format: float */
      amount?: number;
    };
    /**
     * Item Custom
     * @description Add a custom item to the shoppers cart.
     *
     * * Custom items are not added to the catalog.
     * * The price should be set to match the store settings for taxes.
     */
    ItemCustom: {
      /** @description Id of the custom item */
      id?: string;
      /** @description Custom item sku */
      sku?: string;
      /** @description Item name */
      name?: string;
      quantity?: string;
      /** @description Price of the item. With or without tax, depending on your store’s setup. */
      list_price?: string;
    };
    /** cart_PostVariant */
    cart_PostVariant: {
      quantity?: number;
      product_id?: number;
      /** @description Optional price override */
      list_price?: number;
      /** @description Exists only in Catalog V3 */
      variant_id?: number;
      /** @description Optionally, provide a value to override the product name */
      name?: string;
      gift_wrapping?: {
        /**
         * @description Indicates whether we want to wrap items together or separately
         * @example true
         */
        wrap_together?: boolean;
        /** @description Details of the Gift Wrapping option selected. This can be specified for each line items. */
        wrap_details?: {
          /** @description Identifier of the Gift Wrapping Option selected */
          id?: number;
          /**
           * @description Custom gift message
           * @example Happy Birthday
           */
          message?: string;
        }[];
      } & {
        quantity: unknown;
        product_id: unknown;
      };
    };
    /** cart_PostModifier */
    cart_PostModifier: {
      quantity: number;
      product_id: number;
      /** @description Optional price override */
      list_price?: number;
      /** @description Optionally, provide a value to override the product name */
      name?: string;
      /** @description Needed for Catalog V2 */
      option_selections?: {
        option_id?: number;
        option_value?: number;
        /** @description Override selected Option or Modifier Name */
        name?: string;
        /** @description Override selected Option Value */
        value?: string;
        name_id?: number;
        value_id?: number;
      }[];
    }[];
    /** Cart_Line_Item_Update_Post */
    Cart_Line_Item_Update_Post: {
      line_items?: components['schemas']['cart_PostVariant'] | components['schemas']['cart_PostModifier'];
      gift_certificates?: {
        /** @description Given name for gift certificate line item. */
        name: string;
        /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
        theme: string;
        amount: number;
        quantity: number;
        /** Contact Entity */
        sender: {
          name?: string;
          email?: string;
        };
        /** Contact Entity */
        recipient: {
          name?: string;
          email?: string;
        };
        /** @description Message shown to recipient, as provided by sender. */
        message?: string;
      }[];
      custom_items?: components['schemas']['cart_PostCustomItem'];
    };
    /** cart_PostCustomItem */
    cart_PostCustomItem: {
      sku?: string;
      name?: string;
      quantity?: number;
      list_price?: number;
    }[];
    /** @description Represents all settings related to the shopping cart functionality of a store */
    CartSettings: {
      allow_purchasing?: boolean;
    };
    /** @description Represents all settings overrides related to the shopping cart functionality of a store for a channel */
    ChannelCartSettings: {
      allow_purchasing?: boolean | null;
    };
    ChannelCartSettingsRequest: components['schemas']['ChannelCartSettings'] & unknown;
    /** @description The response object of cart settings overrides for a channel */
    ChannelCartSettingsResponse: {
      data?: components['schemas']['ChannelCartSettings'];
      meta?: { [key: string]: unknown };
    };
    GlobalCartSettingsRequest: components['schemas']['CartSettings'] & unknown;
    /** @description The response object of cart settings at the global level */
    GlobalCartSettingsResponse: {
      data?: components['schemas']['CartSettings'];
      meta?: { [key: string]: unknown };
    };
    ErrorResponse: {
      status?: number;
      title?: string;
      type?: string;
      instance?: string;
      errors?: { [key: string]: unknown };
    };
  };
  responses: {
    CartResponse: {
      content: {
        'application/json': components['schemas']['Cart_Full'];
      };
    };
    CartRedirectResponse: {
      content: {
        'application/json': {
          data?: {
            /**
             * Format: url
             * @example https://store.mybigcommerce.com/cart.php?action=load&id=0aa00afa-a000-00a0-00aae-aa0000f000a0&token=00aaaaa0aa0000000000a000a000f0aa0000afa00aa00afa0a000000000aa0a0
             */
            cart_url?: string;
            /**
             * Format: Url
             * @example https://store.mybigcommerce.com/cart.php?action=loadInCheckout&id=1ea11efe-b111-11d1-11ee-cd1110f111b1&token=00aaaaa0aa0000000000a000a000f0aa0000afa00aa00afa0a000000000aa0a0
             */
            checkout_url?: string;
            /**
             * Format: url
             * @example https://store.mybigcommerce.com/cart.php?embedded=1&action=loadInCheckout&id=0aa00afa-a000-00a0-00aae-aa0000f000a0&token=00aaaaa0aa0000000000a000a000f0aa0000afa00aa00afa0a000000000aa0a0
             */
            embedded_checkout_url?: string;
          };
          meta?: { [key: string]: unknown };
        };
      };
    };
  };
  parameters: {
    Accept: string;
    'Content-Type': string;
    /**
     * @description * `redirect_urls`: Create a direct link to a Cart. This can be used during the /POST request for Carts.
     * * `line_items.physical_items.options`: The Cart returns an abbreviated result. Use this to return physical items product options. Can also be used in a /POST to have the extended Cart object return.
     * * `line_items.digital_items.options`: The Cart returns an abbreviated result. Use this to return digital items product options.  Can also be used in a /POST to have the extended Cart object return.
     */
    line_items: 'redirect_urls' | 'line_items.physical_items.options' | 'line_items.digital_items.options';
  };
}

export interface operations {
  /**
   * Creates a **Cart**.
   *
   * **Required Fields**
   *
   * |Field|Details|
   * |-|-|
   * |`line_items`||
   * |`custom_items`|Only required if adding a custom item to the cart.|
   * |`gift_certificates`|Only required if adding a gift certificate to the cart.|
   *
   * **Usage Notes**
   *
   * * A **cart** `id` (UUID) is returned in the response.
   * * A **cart** `id` is the same as a **checkout** `id`.
   * * A cart can be created by adding an existing **catalog item** or a **custom item**.
   * * Carts are valid for **30 days** from the **last modification** (this includes creating the cart or editing the cart).
   * * If a product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
   * * The format and data type of a cart's `option_value` is defined by the `value_data` object of a product's [variant option value](/api-reference/store-management/catalog/product-variant-option-values/getoptionvaluebyid), [modifier value](/api-reference/store-management/catalog/product-modifier-values/getmodifiervaluebyid), or a combination of both.
   * * Redirect URLs can only be generated from carts created using the **Server-to-Server Carts API**.
   * * To get cart `redirect_urls` in the response, append the following query parameter to the request URL: `include=redirect_urls`.
   * * To restore a cart that was created by a shopper or via the Storefront Cart API, first recreate the cart using the Server to Server Cart API.
   * * To get cart `promotions` in the response, append the following query parameter to the request URL: `include=promotions.banners`.
   */
  createACart: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /**
         * * `redirect_urls`: Create a direct link to a Cart. This can be used during the /POST request for Carts.
         * * `line_items.physical_items.options`: The Cart returns an abbreviated result. Use this to return physical items product options. Can also be used in a /POST to have the extended Cart object return.
         * * `line_items.digital_items.options`: The Cart returns an abbreviated result. Use this to return digital items product options.  Can also be used in a /POST to have the extended Cart object return.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?:
          | 'redirect_urls'
          | 'line_items.physical_items.options'
          | 'line_items.digital_items.options'
          | 'promotions.banners';
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      201: components['responses']['CartResponse'];
    };
    /**
     * **Examples:**
     *
     * 1. Creating a cart by adding a simple product (a product without option selections).
     * 2. Creating a cart with a variant. This works when a product can be specified purely by a variant, without any other required options.
     * 3. Creating a cart using a date option. The API supports timestamps, “option_value”: 1743570000, and dates as an object literal, “option_value”: {“day”:”01”, “month”:”02”, “year”:”2020”}.
     * 4. Creating a cart with a variant, a checkbox, and a picklist modifier added.
     * 5. Creating a cart using a custom item.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['CartCreatePostData'];
      };
    };
  };
  /**
   * Adds line items to the *Cart*.
   *
   * **Usage Notes**
   *
   * To add a custom item use `custom_items`.
   *
   * If a product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
   */
  addCartLineItem: {
    parameters: {
      path: {
        store_hash: string;
        cartId: string;
      };
      query: {
        /**
         * * `redirect_urls`: Create a direct link to a Cart. This can be used during the /POST request for Carts.
         * * `line_items.physical_items.options`: The Cart returns an abbreviated result. Use this to return physical items product options. Can also be used in a /POST to have the extended Cart object return.
         * * `line_items.digital_items.options`: The Cart returns an abbreviated result. Use this to return digital items product options.  Can also be used in a /POST to have the extended Cart object return.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?:
          | 'redirect_urls'
          | 'line_items.physical_items.options'
          | 'line_items.digital_items.options'
          | 'promotions.banners';
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      201: components['responses']['CartResponse'];
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Cart_Line_Item_Update_Post'];
      };
    };
  };
  /**
   * Creates a **Cart** redirect URL for redirecting a shopper to an already created cart using the `cartId`.
   *
   * **Usage Notes**
   *
   * * Redirect URLs can also be created via **Create a Cart** requests by appending `include=redirect_urls`.
   * * A **Carts** redirect URLs may only be used once.
   * * Once a redirect URL has been visited, it will be invalidated and cannot be used again.
   * * If your application requires URLs to be visited more than once, consider generating a fresh one each time you need to restore a cart, and redirecting to the URL from your own application.
   * * Redirect URLs can be generated only from carts created using the Server to Server Cart API.
   * * To restore a cart that was created on the storefront, either by a shopper or the Storefront Cart API, first recreate the cart using the Server to Server Cart API.
   */
  createCartRedirectURL: {
    parameters: {
      path: {
        store_hash: string;
        cartId: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      201: components['responses']['CartRedirectResponse'];
    };
  };
  /**
   * Updates an existing, single line item in the *Cart*.
   *
   * **Notes**
   *
   * Currently, only updating `list_price` and `quantity` are supported. Updating a product's `list_price` will make that item ineligible for V3 product level promotions.
   *
   * If the product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
   *
   * If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the Add Cart Line Items endpoint.
   *
   * `custom_items` cannot be updated via the API at this time. To update your cart, add a new updated custom item and delete the outdated one. If your cart contains only one line item, perform the add operation before the delete operation.
   *
   * Deleting all line items from the cart will invalidate the cart.
   */
  updateCartLineItem: {
    parameters: {
      path: {
        store_hash: string;
        cartId: string;
        itemId: string;
      };
      query: {
        /**
         * * `redirect_urls`: Create a direct link to a Cart. This can be used during the /POST request for Carts.
         * * `line_items.physical_items.options`: The Cart returns an abbreviated result. Use this to return physical items product options. Can also be used in a /POST to have the extended Cart object return.
         * * `line_items.digital_items.options`: The Cart returns an abbreviated result. Use this to return digital items product options.  Can also be used in a /POST to have the extended Cart object return.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?:
          | 'redirect_urls'
          | 'line_items.physical_items.options'
          | 'line_items.digital_items.options'
          | 'promotions.banners';
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: components['responses']['CartResponse'];
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Cart_Line_Item_Update_Post'];
      };
    };
  };
  /**
   * Deletes a *Cart* line item.
   *
   * **Notes**
   *
   * Removing the last `line_item` in the *Cart* deletes the *Cart*.
   */
  deleteCartLineItem: {
    parameters: {
      path: {
        store_hash: string;
        cartId: string;
        itemId: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /**
         * * `redirect_urls`: Create a direct link to a Cart. This can be used during the /POST request for Carts.
         * * `line_items.physical_items.options`: The Cart returns an abbreviated result. Use this to return physical items product options. Can also be used in a /POST to have the extended Cart object return.
         * * `line_items.digital_items.options`: The Cart returns an abbreviated result. Use this to return digital items product options.  Can also be used in a /POST to have the extended Cart object return.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?:
          | 'redirect_urls'
          | 'line_items.physical_items.options'
          | 'line_items.digital_items.options'
          | 'promotions.banners';
      };
    };
    responses: {
      /** NOTE: Discounted line items are re-evaluated on cart actions and may be automatically added back to your cart with a new line item ID to satisfy promotional requirements. */
      200: {
        content: {
          'application/json': components['schemas']['Cart_Full'];
        };
      };
      /** If the action’s result is an empty cart, the cart gets automatically deleted. */
      204: never;
    };
  };
  /** Returns a stores *Cart*. */
  getACart: {
    parameters: {
      path: {
        store_hash: string;
        /** The identifier of a specific cart. */
        cartId: string;
      };
      query: {
        /**
         * * `redirect_urls`: Create a direct link to a Cart. This can be used during the /POST request for Carts.
         * * `line_items.physical_items.options`: The Cart returns an abbreviated result. Use this to return physical items product options. Can also be used in a /POST to have the extended Cart object return.
         * * `line_items.digital_items.options`: The Cart returns an abbreviated result. Use this to return digital items product options.  Can also be used in a /POST to have the extended Cart object return.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?:
          | 'redirect_urls'
          | 'line_items.physical_items.options'
          | 'line_items.digital_items.options'
          | 'promotions.banners';
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: components['responses']['CartResponse'];
      /** Cart not found. */
      404: unknown;
    };
  };
  /**
   * Updates a *Carts* `customer_id`.
   *
   * **Notes**
   *
   * Changing the *Cart* `customer_id` will remove any promotions or shipping on the *Cart*. These are tied to the customer depending on cart conditions and any customer groups.
   */
  updateACart: {
    parameters: {
      path: {
        store_hash: string;
        cartId: string;
      };
      query: {
        /**
         * * `redirect_urls`: Create a direct link to a Cart. This can be used during the /POST request for Carts.
         * * `line_items.physical_items.options`: The Cart returns an abbreviated result. Use this to return physical items product options. Can also be used in a /POST to have the extended Cart object return.
         * * `line_items.digital_items.options`: The Cart returns an abbreviated result. Use this to return digital items product options.  Can also be used in a /POST to have the extended Cart object return.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?:
          | 'redirect_urls'
          | 'line_items.physical_items.options'
          | 'line_items.digital_items.options'
          | 'promotions.banners';
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      201: components['responses']['CartResponse'];
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CartUpdatePutRequestData'];
      };
    };
  };
  /** Deletes a *Cart*. Once a *Cart* has been deleted it can not be recovered. */
  deleteACart: {
    parameters: {
      path: {
        store_hash: string;
        /** This cart's unique ID. */
        cartId: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns the global cart settings of a store. */
  getGlobalCartSettings: {
    parameters: {
      path: {
        store_hash: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['GlobalCartSettingsResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  /** Update the global cart settings of a store. */
  updateGlobalCartSettings: {
    parameters: {
      path: {
        store_hash: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['GlobalCartSettingsResponse'];
        };
      };
      /** Bad Request. Input is invalid. */
      400: {
        content: {
          'application/json': {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** Unprocessable entity */
      422: {
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GlobalCartSettingsRequest'];
      };
    };
  };
  /** Returns the per-channel overrides for the cart settings of a store. */
  getChannelCartSettings: {
    parameters: {
      path: {
        store_hash: string;
        /** The channel ID of the settings overrides */
        channel_id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ChannelCartSettingsResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  /** Update the per-channel overrides for the cart settings of a store */
  updateChannelCartSettings: {
    parameters: {
      path: {
        store_hash: string;
        /** The channel ID of the settings overrides */
        channel_id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ChannelCartSettingsResponse'];
        };
      };
      /** Bad Request. Input is invalid. */
      400: {
        content: {
          'application/json': {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
      /** Unprocessible entity */
      422: {
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChannelCartSettingsRequest'];
      };
    };
  };
}

export interface external {}
