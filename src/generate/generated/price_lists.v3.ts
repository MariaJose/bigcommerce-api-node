/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v3/pricelists': {
    /** Returns a list of *Price Lists*. Optional parameters can be passed in. */
    get: operations['getPriceListCollection'];
    /**
     * Creates a *Price List*.
     *
     * **Required Fields**
     * * name
     */
    post: operations['createPriceList'];
    /** Deletes a *Price List*. All associated price records are also removed. Optional parameters can be passed in. */
    delete: operations['deletePriceListsByFilter'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v3/pricelists/{price_list_id}': {
    /** Returns a single *Price List*. */
    get: operations['getPriceList'];
    /** Updates a *Price List*. */
    put: operations['updatePriceList'];
    /**
     * Deletes a *Price List*. All associated price records are also removed.
     *
     * **Limits**
     * * Limit of 1 concurrent request.
     */
    delete: operations['deletePriceList'];
    parameters: {
      path: {
        /** The ID of the `Price List` requested. */
        price_list_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v3/pricelists/{price_list_id}/records': {
    /** Returns a list of *Price List Records* associated with a *Price List*. */
    get: operations['getPriceListRecordCollection'];
    /**
     * Creates or updates *Price List Records*.
     *
     * **Required Fields**
     * * currency
     *
     * **Notes**
     *
     * * Batch updates are supported by this endpoint, meaning that several price objects can be updated in one request. This allows you to do the same work as many individual requests to singleton endpoints
     * * Batch requests support up to 1,000 items per request.
     * * Up to 2 concurrent batch upsert requests are supported with this API. Running more than the allowed concurrent requests in parallel on the **same store** will cause a 429 error and your additional requests will fail. You are encouraged to run requests sequentially with as many records per request as possible, in order to maximize performance.
     */
    put: operations['setPriceListRecordCollection'];
    /** Deletes a *Price List Record*. Deleting the records does not delete the Price List. Optional parameters can be passed in. */
    delete: operations['deletePriceListRecordsByFilter'];
    parameters: {
      path: {
        /** The ID of the `Price List` requested. */
        price_list_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v3/pricelists/{price_list_id}/records/{variant_id}': {
    /** Returns *Price List Records* using the variant ID. Will also contain currency records. */
    get: operations['getPriceListRecordsByVariantId'];
    parameters: {
      path: {
        /** The ID of the `Price List` requested. */
        price_list_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v3/pricelists/{price_list_id}/records/{variant_id}/{currency_code}': {
    /** Returns a *Price List Record* using the currency code. Optional parameters can be used. */
    get: operations['getPriceListRecord'];
    /** Creates or updates a*Price List Record* using the currency code. */
    put: operations['setPriceListRecord'];
    /** Deletes a *Price List Record* using the currency code. */
    delete: operations['deletePriceListRecord'];
    parameters: {
      path: {
        /** The ID of the `Price List` requested. */
        price_list_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
        /** The currency code associated with the price record being acted upon. */
        currency_code: string;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v3/pricelists/assignments': {
    /** Fetches an array of `Price List Assignments` matching a particular Customer Group and Price List and Channel. */
    get: operations['GetListOfPriceListAssignments'];
    /** Creates a batch of `Price List Assignments`. */
    post: operations['CreatePriceListAssignments'];
    /** Deletes one or more `Price List Assignments` objects from BigCommerce using a filter. */
    delete: operations['deletePriceListAssignmentsByFilter'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
}

export interface definitions {
  /** @description `Price List Assignments` object used in batch create. */
  AssignmentsForRequest: {
    /**
     * Format: int32
     * @description Customer group id for assignment.
     */
    customer_group_id?: number;
    /**
     * Format: int32
     * @description Pricelist id for assignment.
     */
    price_list_id: number;
    /**
     * Format: int32
     * @description Channel ID for assignment
     */
    channel_id?: number;
  };
  /** @description Errors during batch usage for the BigCommerce API. */
  PriceListAssignmentsBatchErrorResponse: {
    batch_errors?: definitions['PriceListAssignmentsBatchErrorSet'][];
  };
  /** @description Error during `Price List Assignments` batch POST. Includes data sent in the request and errors. */
  PriceListAssignmentsBatchErrorSet: {
    data?: definitions['PriceListAssignmentsIdentifiers'];
    field_errors?: definitions['DetailedErrors'];
  };
  /** @description `Price List Assignments` object used in GET response. */
  PriceListAssignmentsIdentifiers: {
    /** @description The Customer Group with which this price list assignment is associated. A customer_group_id of 0 indicates default pricing for the channel given in the request. */
    customer_group_id?: number;
    /** @description The Price List with which this price set is associated. */
    price_list_id?: number;
    /** @description The Channel with which this price set is associated. This field is optional or may be null when a price list applies across channels for the customer_group_id in the assignment. */
    channel_id?: number;
  };
  AssignmentForGetResponse: {
    /**
     * Format: int32
     * @description Unique identifier for this price list assignment.
     */
    id?: number;
    /**
     * Format: int32
     * @description Customer group id for assignment.
     */
    customer_group_id?: number;
    /**
     * Format: int32
     * @description Pricelist id for assignment.
     */
    price_list_id?: number;
    /**
     * Format: int32
     * @description Channel ID for assignment
     */
    channel_id?: number;
  };
  /** @description Array of the price list assignments matching the filter. The response is paginated. */
  AssignmentsForGetResponse: {
    data?: definitions['AssignmentForGetResponse'][];
    meta?: definitions['CollectionMeta'];
  };
  /**
   * PriceList Collection Response
   * @description Get All PriceLists.
   */
  PriceListCollectionResponse: {
    data?: ({
      /**
       * @description The unique numeric ID of the `Price List`; increments sequentially.
       *
       * @example 3
       */
      id?: number;
      /**
       * Format: date-time
       * @description The date on which the `Price List` was created.
       *
       * @example 2018-04-05T16:05:12Z
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description The date on which the `Price List` was created.
       *
       * @example 2018-04-05T16:05:12Z
       */
      date_modified?: string;
    } & {
      /**
       * @description The unique name of the Price List. Required in /POST.
       *
       * @example Wholesale
       */
      name: string;
      /**
       * @description Whether or not this `Price List` and its prices are active.  Defaults to `true`.
       *
       * @example true
       */
      active?: boolean;
    })[];
    /**
     * Collection Meta
     * @description Data about the response, including pagination and collection totals.
     */
    meta?: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
    };
  };
  /**
   * Price List Response
   * @description PriceList Reponse returns for:
   *
   * * Create a PriceList
   * * Get a PriceList
   * * Update a PriceList
   */
  PriceListResponse: {
    /** Price List */
    data?: {
      /**
       * @description The unique numeric ID of the `Price List`; increments sequentially.
       *
       * @example 3
       */
      id?: number;
      /**
       * Format: date-time
       * @description The date on which the `Price List` was created.
       *
       * @example 2018-04-05T16:05:12Z
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description The date on which the `Price List` was created.
       *
       * @example 2018-04-05T16:05:12Z
       */
      date_modified?: string;
    } & {
      /**
       * @description The unique name of the Price List. Required in /POST.
       *
       * @example Wholesale
       */
      name: string;
      /**
       * @description Whether or not this `Price List` and its prices are active.  Defaults to `true`.
       *
       * @example true
       */
      active?: boolean;
    };
    /**
     * Meta
     * @description Empty meta object; may be used later.
     */
    meta?: { [key: string]: unknown };
  };
  /**
   * PriceList Base
   * @description Common Price List properties.
   */
  PriceListBase: {
    /**
     * @description The unique name of the Price List. Required in /POST.
     *
     * @example Wholesale
     */
    name: string;
    /**
     * @description Whether or not this `Price List` and its prices are active.  Defaults to `true`.
     *
     * @example true
     */
    active?: boolean;
  };
  /** Price List */
  PriceList: {
    /**
     * @description The unique numeric ID of the `Price List`; increments sequentially.
     *
     * @example 3
     */
    id?: number;
    /**
     * Format: date-time
     * @description The date on which the `Price List` was created.
     *
     * @example 2018-04-05T16:05:12Z
     */
    date_created?: string;
    /**
     * Format: date-time
     * @description The date on which the `Price List` was created.
     *
     * @example 2018-04-05T16:05:12Z
     */
    date_modified?: string;
  } & {
    /**
     * @description The unique name of the Price List. Required in /POST.
     *
     * @example Wholesale
     */
    name: string;
    /**
     * @description Whether or not this `Price List` and its prices are active.  Defaults to `true`.
     *
     * @example true
     */
    active?: boolean;
  };
  /**
   * PriceList Post
   * @description Creates a Price List.
   */
  PriceListPost: {
    /**
     * @description The unique name of the Price List. Required in /POST.
     *
     * @example Wholesale
     */
    name: string;
    /**
     * @description Whether or not this `Price List` and its prices are active.  Defaults to `true`.
     *
     * @example true
     */
    active?: boolean;
  } & {
    name: unknown;
  };
  /**
   * PriceList Put
   * @description Update a PriceList
   */
  PriceListPut: {
    /**
     * @description The unique name of the Price List. Required in /POST.
     *
     * @example Wholesale
     */
    name: string;
    /**
     * @description Whether or not this `Price List` and its prices are active.  Defaults to `true`.
     *
     * @example true
     */
    active?: boolean;
  };
  /**
   * PriceRecord Collection Response
   * @description PriceRecord Collection Response returns for:
   * * Get All PriceList Records
   * * Get PriceList Records by Variant Id
   */
  PriceRecordCollectionResponse: {
    data?: ({
      /**
       * Format: double
       * @description The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only.
       *
       * @example 24.64
       */
      calculated_price?: number;
      /**
       * Format: date-time
       * @description The date on which the Price entry was created.
       *
       * @example 2018-08-23T19:59:23Z
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description The date on which the Price entry was created.
       *
       * @example 2018-08-23T19:59:23Z
       */
      date_modified?: string;
      /**
       * @description The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only.
       *
       * @example 158
       */
      product_id?: number;
    } & {
      /**
       * @description The Price List with which this price set is associated.
       *
       * @example 2
       */
      price_list_id?: number;
      /**
       * @description The variant with which this price set is associated. Either variant_id or sku is required.
       *
       * @example 325
       */
      variant_id?: number;
      /** @description The variant with which this price set is associated. Either sku or variant_id is required. */
      sku?: string;
      /**
       * Format: ISO-4217
       * @description The 3-letter currency code with which this price set is associated.
       *
       * @example usd
       */
      currency?: string;
    } & {
      /**
       * Format: double
       * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
       *
       * @example 3.99
       */
      price?: number;
      /**
       * Format: double
       * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
       */
      sale_price?: number;
      /**
       * Format: double
       * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
       */
      retail_price?: number;
      /**
       * Format: double
       * @description The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
       */
      map_price?: number;
      bulk_pricing_tiers?: {
        /**
         * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
         *
         * @example 1
         */
        quantity_min?: number;
        /**
         * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
         *
         * @example 10
         */
        quantity_max?: number;
        /**
         * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
         *
         * @example price
         */
        type?: 'fixed' | 'price' | 'percent';
        /**
         * Format: double
         * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
         *
         * @example 3
         */
        amount?: number;
      }[];
      /**
       * @description The SKU code associated with this `Price Record` if requested and it exists.
       *
       * @example SMB-123
       */
      sku?: string;
    })[];
    /**
     * Collection Meta
     * @description Data about the response, including pagination and collection totals.
     */
    meta?: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
    };
  };
  /**
   * Price Record Response
   * @description Response payload for the BigCommerce API.
   */
  PriceRecordResponse: {
    /**
     * Price Record
     * @description The Price Record object.
     */
    data?: {
      /**
       * Format: double
       * @description The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only.
       *
       * @example 24.64
       */
      calculated_price?: number;
      /**
       * Format: date-time
       * @description The date on which the Price entry was created.
       *
       * @example 2018-08-23T19:59:23Z
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description The date on which the Price entry was created.
       *
       * @example 2018-08-23T19:59:23Z
       */
      date_modified?: string;
      /**
       * @description The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only.
       *
       * @example 158
       */
      product_id?: number;
    } & {
      /**
       * @description The Price List with which this price set is associated.
       *
       * @example 2
       */
      price_list_id?: number;
      /**
       * @description The variant with which this price set is associated. Either variant_id or sku is required.
       *
       * @example 325
       */
      variant_id?: number;
      /** @description The variant with which this price set is associated. Either sku or variant_id is required. */
      sku?: string;
      /**
       * Format: ISO-4217
       * @description The 3-letter currency code with which this price set is associated.
       *
       * @example usd
       */
      currency?: string;
    } & {
      /**
       * Format: double
       * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
       *
       * @example 3.99
       */
      price?: number;
      /**
       * Format: double
       * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
       */
      sale_price?: number;
      /**
       * Format: double
       * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
       */
      retail_price?: number;
      /**
       * Format: double
       * @description The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
       */
      map_price?: number;
      bulk_pricing_tiers?: {
        /**
         * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
         *
         * @example 1
         */
        quantity_min?: number;
        /**
         * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
         *
         * @example 10
         */
        quantity_max?: number;
        /**
         * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
         *
         * @example price
         */
        type?: 'fixed' | 'price' | 'percent';
        /**
         * Format: double
         * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
         *
         * @example 3
         */
        amount?: number;
      }[];
      /**
       * @description The SKU code associated with this `Price Record` if requested and it exists.
       *
       * @example SMB-123
       */
      sku?: string;
    };
    /**
     * Meta
     * @description Empty meta object; may be used later.
     */
    meta?: { [key: string]: unknown };
  };
  /**
   * PriceRecord Base
   * @description Common Price Record properties.
   */
  PriceRecordBase: {
    /**
     * Format: double
     * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
     *
     * @example 3.99
     */
    price?: number;
    /**
     * Format: double
     * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
     */
    sale_price?: number;
    /**
     * Format: double
     * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
     */
    retail_price?: number;
    /**
     * Format: double
     * @description The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
     */
    map_price?: number;
    bulk_pricing_tiers?: {
      /**
       * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
       *
       * @example 1
       */
      quantity_min?: number;
      /**
       * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
       *
       * @example 10
       */
      quantity_max?: number;
      /**
       * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
       *
       * @example price
       */
      type?: 'fixed' | 'price' | 'percent';
      /**
       * Format: double
       * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
       *
       * @example 3
       */
      amount?: number;
    }[];
    /**
     * @description The SKU code associated with this `Price Record` if requested and it exists.
     *
     * @example SMB-123
     */
    sku?: string;
  };
  /**
   * Price Record
   * @description The Price Record object.
   */
  PriceRecord: {
    /**
     * Format: double
     * @description The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only.
     *
     * @example 24.64
     */
    calculated_price?: number;
    /**
     * Format: date-time
     * @description The date on which the Price entry was created.
     *
     * @example 2018-08-23T19:59:23Z
     */
    date_created?: string;
    /**
     * Format: date-time
     * @description The date on which the Price entry was created.
     *
     * @example 2018-08-23T19:59:23Z
     */
    date_modified?: string;
    /**
     * @description The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only.
     *
     * @example 158
     */
    product_id?: number;
  } & {
    /**
     * @description The Price List with which this price set is associated.
     *
     * @example 2
     */
    price_list_id?: number;
    /**
     * @description The variant with which this price set is associated. Either variant_id or sku is required.
     *
     * @example 325
     */
    variant_id?: number;
    /** @description The variant with which this price set is associated. Either sku or variant_id is required. */
    sku?: string;
    /**
     * Format: ISO-4217
     * @description The 3-letter currency code with which this price set is associated.
     *
     * @example usd
     */
    currency?: string;
  } & {
    /**
     * Format: double
     * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
     *
     * @example 3.99
     */
    price?: number;
    /**
     * Format: double
     * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
     */
    sale_price?: number;
    /**
     * Format: double
     * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
     */
    retail_price?: number;
    /**
     * Format: double
     * @description The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
     */
    map_price?: number;
    bulk_pricing_tiers?: {
      /**
       * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
       *
       * @example 1
       */
      quantity_min?: number;
      /**
       * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
       *
       * @example 10
       */
      quantity_max?: number;
      /**
       * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
       *
       * @example price
       */
      type?: 'fixed' | 'price' | 'percent';
      /**
       * Format: double
       * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
       *
       * @example 3
       */
      amount?: number;
    }[];
    /**
     * @description The SKU code associated with this `Price Record` if requested and it exists.
     *
     * @example SMB-123
     */
    sku?: string;
  };
  /** Bulk Pricing Tier */
  BulkPricingTier: {
    /**
     * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
     *
     * @example 1
     */
    quantity_min?: number;
    /**
     * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
     *
     * @example 10
     */
    quantity_max?: number;
    /**
     * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
     *
     * @example price
     */
    type?: 'fixed' | 'price' | 'percent';
    /**
     * Format: double
     * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
     *
     * @example 3
     */
    amount?: number;
  };
  /** Price Record Put */
  PriceRecordPut: {
    /**
     * Format: double
     * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
     *
     * @example 3.99
     */
    price?: number;
    /**
     * Format: double
     * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
     */
    sale_price?: number;
    /**
     * Format: double
     * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
     */
    retail_price?: number;
    /**
     * Format: double
     * @description The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
     */
    map_price?: number;
    bulk_pricing_tiers?: {
      /**
       * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
       *
       * @example 1
       */
      quantity_min?: number;
      /**
       * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
       *
       * @example 10
       */
      quantity_max?: number;
      /**
       * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
       *
       * @example price
       */
      type?: 'fixed' | 'price' | 'percent';
      /**
       * Format: double
       * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
       *
       * @example 3
       */
      amount?: number;
    }[];
    /**
     * @description The SKU code associated with this `Price Record` if requested and it exists.
     *
     * @example SMB-123
     */
    sku?: string;
  };
  /** Price Record Collection Put */
  PriceRecordCollectionPut: ({
    /**
     * @description The variant with which this price set is associated. Either variant_id or sku is required.
     *
     * @example 331
     */
    variant_id?: number;
    /**
     * @description The sku for the variant with which this price set is associated.  Either sku or variant_id is required.
     *
     * @example SMB-123
     */
    sku?: string;
    /**
     * Format: ISO-4217
     * @description The 3-letter currency code with which this price set is associated.
     *
     * @example usd
     */
    currency?: string;
  } & {
    /**
     * Format: double
     * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
     *
     * @example 3.99
     */
    price?: number;
    /**
     * Format: double
     * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
     */
    sale_price?: number;
    /**
     * Format: double
     * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
     */
    retail_price?: number;
    /**
     * Format: double
     * @description The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
     */
    map_price?: number;
    bulk_pricing_tiers?: {
      /**
       * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
       *
       * @example 1
       */
      quantity_min?: number;
      /**
       * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
       *
       * @example 10
       */
      quantity_max?: number;
      /**
       * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
       *
       * @example price
       */
      type?: 'fixed' | 'price' | 'percent';
      /**
       * Format: double
       * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
       *
       * @example 3
       */
      amount?: number;
    }[];
    /**
     * @description The SKU code associated with this `Price Record` if requested and it exists.
     *
     * @example SMB-123
     */
    sku?: string;
  })[];
  /**
   * PriceRecord Batch Item
   * @description Price Record object used in batch create or update.
   */
  PriceRecordBatchItem: {
    /**
     * @description The variant with which this price set is associated. Either variant_id or sku is required.
     *
     * @example 331
     */
    variant_id?: number;
    /**
     * @description The sku for the variant with which this price set is associated.  Either sku or variant_id is required.
     *
     * @example SMB-123
     */
    sku?: string;
    /**
     * Format: ISO-4217
     * @description The 3-letter currency code with which this price set is associated.
     *
     * @example usd
     */
    currency?: string;
  } & {
    /**
     * Format: double
     * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
     *
     * @example 3.99
     */
    price?: number;
    /**
     * Format: double
     * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
     */
    sale_price?: number;
    /**
     * Format: double
     * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
     */
    retail_price?: number;
    /**
     * Format: double
     * @description The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
     */
    map_price?: number;
    bulk_pricing_tiers?: {
      /**
       * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
       *
       * @example 1
       */
      quantity_min?: number;
      /**
       * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
       *
       * @example 10
       */
      quantity_max?: number;
      /**
       * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
       *
       * @example price
       */
      type?: 'fixed' | 'price' | 'percent';
      /**
       * Format: double
       * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
       *
       * @example 3
       */
      amount?: number;
    }[];
    /**
     * @description The SKU code associated with this `Price Record` if requested and it exists.
     *
     * @example SMB-123
     */
    sku?: string;
  };
  /**
   * Price Record Identifiers
   * @description Price Record object used in batch create or update.
   */
  PriceRecordIdentifiers: {
    /**
     * @description The Price List with which this price set is associated.
     *
     * @example 2
     */
    price_list_id?: number;
    /**
     * @description The variant with which this price set is associated. Either variant_id or sku is required.
     *
     * @example 325
     */
    variant_id?: number;
    /** @description The variant with which this price set is associated. Either sku or variant_id is required. */
    sku?: string;
    /**
     * Format: ISO-4217
     * @description The 3-letter currency code with which this price set is associated.
     *
     * @example usd
     */
    currency?: string;
  };
  /**
   * Success Batch Response
   * @description Empty object for Success case for Batch API.
   */
  SuccessBatchResponse: { [key: string]: unknown };
  /**
   * PriceRecord Batch Error Response
   * @description Errors during batch usage for the BigCommerce API.
   */
  PriceRecordBatchErrorResponse: {
    batch_errors?: {
      /**
       * Price Record Identifiers
       * @description Price Record object used in batch create or update.
       */
      data?: {
        /**
         * @description The Price List with which this price set is associated.
         *
         * @example 2
         */
        price_list_id?: number;
        /**
         * @description The variant with which this price set is associated. Either variant_id or sku is required.
         *
         * @example 325
         */
        variant_id?: number;
        /** @description The variant with which this price set is associated. Either sku or variant_id is required. */
        sku?: string;
        /**
         * Format: ISO-4217
         * @description The 3-letter currency code with which this price set is associated.
         *
         * @example usd
         */
        currency?: string;
      };
      /** Detailed Errors */
      field_errors?: { [key: string]: string };
    }[];
  };
  /** @description No-content response for the BigCommerce API. */
  NoContent: {
    /** @description 204 HTTP status code. */
    status?: number;
    /** @description The error title describing the situation. */
    title?: string;
    type?: string;
    instance?: string;
  };
  /**
   * PriceRecord Batch Error Set
   * @description Error during Price Record batch PUT.  Includes data sent in the request and errors.
   */
  PriceRecordBatchErrorSet: {
    /**
     * Price Record Identifiers
     * @description Price Record object used in batch create or update.
     */
    data?: {
      /**
       * @description The Price List with which this price set is associated.
       *
       * @example 2
       */
      price_list_id?: number;
      /**
       * @description The variant with which this price set is associated. Either variant_id or sku is required.
       *
       * @example 325
       */
      variant_id?: number;
      /** @description The variant with which this price set is associated. Either sku or variant_id is required. */
      sku?: string;
      /**
       * Format: ISO-4217
       * @description The 3-letter currency code with which this price set is associated.
       *
       * @example usd
       */
      currency?: string;
    };
    /** Detailed Errors */
    field_errors?: { [key: string]: string };
  };
  /**
   * Collection Meta
   * @description Data about the response, including pagination and collection totals.
   */
  CollectionMeta: {
    /**
     * Pagination
     * @description Data about the response, including pagination and collection totals.
     */
    pagination?: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 36
       */
      total?: number;
      /**
       * @description Total number of items in the collection response.
       *
       * @example 36
       */
      count?: number;
      /**
       * @description The amount of items returned in the collection per page, controlled by the limit parameter.
       *
       * @example 50
       */
      per_page?: number;
      /**
       * @description The page you are currently on within the collection.
       *
       * @example 1
       */
      current_page?: number;
      /**
       * @description The total number of pages in the collection.
       *
       * @example 1
       */
      total_pages?: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /**
         * @description Link to the current page returned in the response.
         *
         * @example ?page=1&limit=50
         */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
  };
  /**
   * Pagination
   * @description Data about the response, including pagination and collection totals.
   */
  Pagination: {
    /**
     * @description Total number of items in the result set.
     *
     * @example 36
     */
    total?: number;
    /**
     * @description Total number of items in the collection response.
     *
     * @example 36
     */
    count?: number;
    /**
     * @description The amount of items returned in the collection per page, controlled by the limit parameter.
     *
     * @example 50
     */
    per_page?: number;
    /**
     * @description The page you are currently on within the collection.
     *
     * @example 1
     */
    current_page?: number;
    /**
     * @description The total number of pages in the collection.
     *
     * @example 1
     */
    total_pages?: number;
    /** @description Pagination links for the previous and next parts of the whole collection. */
    links?: {
      /** @description Link to the previous page returned in the response. */
      previous?: string;
      /**
       * @description Link to the current page returned in the response.
       *
       * @example ?page=1&limit=50
       */
      current?: string;
      /** @description Link to the next page returned in the response. */
      next?: string;
    };
  };
  /**
   * Meta
   * @description Empty meta object; may be used later.
   */
  Meta: { [key: string]: unknown };
  /** Error Response */
  ErrorResponse: {
    /** @description The HTTP status code. */
    status?: number;
    /** @description The error title describing the particular error. */
    title?: string;
    type?: string;
    instance?: string;
  } & {
    /** Detailed Errors */
    errors?: { [key: string]: string };
  };
  /**
   * Base Error
   * @description Error payload for the BigCommerce API.
   */
  BaseError: {
    /** @description The HTTP status code. */
    status?: number;
    /** @description The error title describing the particular error. */
    title?: string;
    type?: string;
    instance?: string;
  };
  /** Detailed Errors */
  DetailedErrors: { [key: string]: string };
  /**
   * Not Found
   * @description Error payload for the BigCommerce API.
   */
  NotFound: {
    /** @description 404 HTTP status code. */
    status?: number;
    /** @description The error title describing the particular error. */
    title?: string;
    type?: string;
    instance?: string;
  };
  /** @description Batch of price list assignments. */
  CreateBatchPriceListAssignmentsRequest: definitions['AssignmentsForRequest'][];
}

export interface parameters {
  /** @description Filter items by id. */
  FilterIdParam: number;
  /** @description Filter items by sku. */
  FilterSkuParam: string;
  /** @description A comma-separated list of ids of `Product`s whose prices were requested. */
  FilterProductIdParam: string;
  /** @description Filter items by name. */
  FilterNameParam: string;
  /** @description Filter items by price. */
  FilterPriceParam: number;
  /** @description Filter items by sale_price. */
  FilterSalePriceParam: number;
  /** @description Filter items by retail_price. */
  FilterRetailPriceParam: number;
  /** @description Filter items by map_price. */
  FilterMapPriceParam: number;
  /** @description Filter items by calculated_price. */
  FilterCalculatedPriceParam: number;
  /** @description ID of the variant on a product, or on an associated Price List Record. */
  VariantIdParam: number;
  /**
   * Format: date-time
   * @description Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15`
   */
  FilterDateModifiedParam: string;
  /**
   * Format: date-time
   * @description Filter items by date_created.
   */
  FilterDateCreatedParam: string;
  /** @description Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`.  Other valies will be ignored. */
  FilterIncludePriceRecordParam: 'bulk_pricing_tiers' | 'sku';
  /**
   * Format: ISO-4217
   * @description Filter items by currency.
   */
  FilterCurrencyParam: string;
  /** @description Specifies the page number in a limited (paginated) list of products. */
  PageParam: number;
  /** @description Controls the number of items per page in a limited (paginated) list of products. */
  LimitParam: number;
  /** @description The ID of the `Price List` requested. */
  PriceListIdParam: number;
  /**
   * Format: ISO-4217
   * @description The currency code associated with the price record being acted upon.
   */
  PriceRecordCurrencyParam: string;
  /** @description The ID of the `Variant` whose prices were requested. */
  FilterVariantIdParam: number;
  /** @default application/json */
  Accept: string;
  /** @default application/json */
  'Content-Type': string;
  /** @description The ID of the `Price List Assignment`. */
  FilterAssignmentIdParam: number;
  /** @description The ID of the `Price List`. */
  FilterPriceListIdParam: number;
  /** @description The ID of the `Customer Group`. */
  FilterCustomerGroupIdParam: number;
  /** @description The ID of the `Channel`. */
  FilterChannelIdParam: number;
}

export interface operations {
  /** Returns a list of *Price Lists*. Optional parameters can be passed in. */
  getPriceListCollection: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** Filter items by id. */
        id?: number;
        /** Filter items by name. */
        name?: string;
        /** Filter items by date_created. */
        date_created?: string;
        /** Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
        date_modified?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        'id:in'?: number[];
        'name:like'?: string[];
        'date_created:max'?: string;
        'date_created:min'?: string;
        'date_modified:max'?: string;
        'date_modified:min'?: string;
      };
      header: {
        'Content-Type'?: string;
        Accept?: string;
      };
    };
    responses: {
      200: {
        schema: {
          data?: ({
            /**
             * @description The unique numeric ID of the `Price List`; increments sequentially.
             *
             * @example 3
             */
            id?: number;
            /**
             * Format: date-time
             * @description The date on which the `Price List` was created.
             *
             * @example 2018-04-05T16:05:12Z
             */
            date_created?: string;
            /**
             * Format: date-time
             * @description The date on which the `Price List` was created.
             *
             * @example 2018-04-05T16:05:12Z
             */
            date_modified?: string;
          } & {
            /**
             * @description The unique name of the Price List. Required in /POST.
             *
             * @example Wholesale
             */
            name: string;
            /**
             * @description Whether or not this `Price List` and its prices are active.  Defaults to `true`.
             *
             * @example true
             */
            active?: boolean;
          })[];
          /**
           * Collection Meta
           * @description Data about the response, including pagination and collection totals.
           */
          meta?: {
            /**
             * Pagination
             * @description Data about the response, including pagination and collection totals.
             */
            pagination?: {
              /**
               * @description Total number of items in the result set.
               *
               * @example 36
               */
              total?: number;
              /**
               * @description Total number of items in the collection response.
               *
               * @example 36
               */
              count?: number;
              /**
               * @description The amount of items returned in the collection per page, controlled by the limit parameter.
               *
               * @example 50
               */
              per_page?: number;
              /**
               * @description The page you are currently on within the collection.
               *
               * @example 1
               */
              current_page?: number;
              /**
               * @description The total number of pages in the collection.
               *
               * @example 1
               */
              total_pages?: number;
              /** @description Pagination links for the previous and next parts of the whole collection. */
              links?: {
                /** @description Link to the previous page returned in the response. */
                previous?: string;
                /**
                 * @description Link to the current page returned in the response.
                 *
                 * @example ?page=1&limit=50
                 */
                current?: string;
                /** @description Link to the next page returned in the response. */
                next?: string;
              };
            };
          };
        };
      };
    };
  };
  /**
   * Creates a *Price List*.
   *
   * **Required Fields**
   * * name
   */
  createPriceList: {
    parameters: {
      path: {
        store_hash: string;
      };
      body: {
        PriceList: {
          /**
           * @description The unique name of the Price List. Required in /POST.
           *
           * @example Wholesale
           */
          name: string;
          /**
           * @description Whether or not this `Price List` and its prices are active.  Defaults to `true`.
           *
           * @example true
           */
          active?: boolean;
        } & {
          name: unknown;
        };
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      200: {
        schema: {
          /** Price List */
          data?: {
            /**
             * @description The unique numeric ID of the `Price List`; increments sequentially.
             *
             * @example 3
             */
            id?: number;
            /**
             * Format: date-time
             * @description The date on which the `Price List` was created.
             *
             * @example 2018-04-05T16:05:12Z
             */
            date_created?: string;
            /**
             * Format: date-time
             * @description The date on which the `Price List` was created.
             *
             * @example 2018-04-05T16:05:12Z
             */
            date_modified?: string;
          } & {
            /**
             * @description The unique name of the Price List. Required in /POST.
             *
             * @example Wholesale
             */
            name: string;
            /**
             * @description Whether or not this `Price List` and its prices are active.  Defaults to `true`.
             *
             * @example true
             */
            active?: boolean;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
      /** `Price List` was in conflict with another Price List. This is the result of duplicate unique values, such as `name`. */
      409: {
        schema: {
          /** @description The HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
        } & {
          /** Detailed Errors */
          errors?: { [key: string]: string };
        };
      };
      /** `Price List` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        schema: {
          /** @description The HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
        } & {
          /** Detailed Errors */
          errors?: { [key: string]: string };
        };
      };
    };
  };
  /** Deletes a *Price List*. All associated price records are also removed. Optional parameters can be passed in. */
  deletePriceListsByFilter: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** Filter items by id. */
        id?: number;
        /** Filter items by name. */
        name?: string;
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      /** `204 No Content`. Action has been enacted and no further information is to be supplied. `null` is returned. */
      204: {
        schema: unknown;
      };
    };
  };
  /** Returns a single *Price List*. */
  getPriceList: {
    parameters: {
      path: {
        /** The ID of the `Price List` requested. */
        price_list_id: number;
        store_hash: string;
      };
      query: {
        /** Filter items by id. */
        id?: number;
        /** Filter items by name. */
        name?: string;
        /** Filter items by date_created. */
        date_created?: string;
        /** Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
        date_modified?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
    };
    responses: {
      200: {
        schema: {
          /**
           * Price List
           * @description Common Price List properties.
           */
          data?: {
            /**
             * @description The unique numeric ID of the `Price List`; increments sequentially.
             *
             * @example 3
             */
            id?: number;
            /**
             * Format: date-time
             * @description The date on which the `Price List` was created.
             *
             * @example 2018-04-05T16:05:12Z
             */
            date_created?: string;
            /**
             * Format: date-time
             * @description The date on which the `Price List` was created.
             *
             * @example 2018-04-05T16:05:12Z
             */
            date_modified?: string;
            /**
             * @description The unique name of the Price List. Required in /POST.
             *
             * @example Wholesale
             */
            name: string;
            /**
             * @description Whether or not this `Price List` and its prices are active.  Defaults to `true`.
             *
             * @example true
             */
            active?: boolean;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Updates a *Price List*. */
  updatePriceList: {
    parameters: {
      path: {
        /** The ID of the `Price List` requested. */
        price_list_id: number;
        store_hash: string;
      };
      body: {
        PriceList: {
          /**
           * @description The unique name of the Price List. Required in /POST.
           *
           * @example Wholesale
           */
          name: string;
          /**
           * @description Whether or not this `Price List` and its prices are active.  Defaults to `true`.
           *
           * @example true
           */
          active?: boolean;
        };
      };
    };
    responses: {
      200: {
        schema: {
          /** Price List */
          data?: {
            /**
             * @description The unique numeric ID of the `Price List`; increments sequentially.
             *
             * @example 3
             */
            id?: number;
            /**
             * Format: date-time
             * @description The date on which the `Price List` was created.
             *
             * @example 2018-04-05T16:05:12Z
             */
            date_created?: string;
            /**
             * Format: date-time
             * @description The date on which the `Price List` was created.
             *
             * @example 2018-04-05T16:05:12Z
             */
            date_modified?: string;
          } & {
            /**
             * @description The unique name of the Price List. Required in /POST.
             *
             * @example Wholesale
             */
            name: string;
            /**
             * @description Whether or not this `Price List` and its prices are active.  Defaults to `true`.
             *
             * @example true
             */
            active?: boolean;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
      /** The resource was not found. */
      404: {
        schema: {
          /** @description 404 HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
        };
      };
      /** `Price List` was in conflict with another Price List. This is the result of duplicate unique values, such as `name`. */
      409: {
        schema: {
          /** @description The HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
        } & {
          /** Detailed Errors */
          errors?: { [key: string]: string };
        };
      };
      /** `Price List` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        schema: {
          /** @description The HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
        } & {
          /** Detailed Errors */
          errors?: { [key: string]: string };
        };
      };
    };
  };
  /**
   * Deletes a *Price List*. All associated price records are also removed.
   *
   * **Limits**
   * * Limit of 1 concurrent request.
   */
  deletePriceList: {
    parameters: {
      path: {
        /** The ID of the `Price List` requested. */
        price_list_id: number;
        store_hash: string;
      };
    };
    responses: {
      /** `204 No Content`. Action has been enacted and no further information is to be supplied. `null` is returned. */
      204: {
        schema: unknown;
      };
    };
  };
  /** Returns a list of *Price List Records* associated with a *Price List*. */
  getPriceListRecordCollection: {
    parameters: {
      path: {
        /** The ID of the `Price List` requested. */
        price_list_id: number;
        store_hash: string;
      };
      query: {
        /** The ID of the `Variant` whose prices were requested. */
        'variant_id:in'?: parameters['FilterVariantIdParam'];
        /** A comma-separated list of ids of `Product`s whose prices were requested. */
        'product_id:in'?: parameters['FilterProductIdParam'];
        /** Filter items by currency. */
        currency?: string;
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`.  Other valies will be ignored. */
        include?: 'bulk_pricing_tiers' | 'sku';
        /** Filter items by price. */
        price?: number;
        /** Filter items by sale_price. */
        sale_price?: number;
        /** Filter items by retail_price. */
        retail_price?: number;
        /** Filter items by map_price. */
        map_price?: number;
        /** Filter items by calculated_price. */
        calculated_price?: number;
        /** Filter items by date_created. */
        date_created?: string;
        /** Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
        date_modified?: string;
        /** Filter items by sku. */
        sku?: string;
        'sku:in'?: string[];
        'currency:in'?: string[];
        'price:max'?: number;
        'price:min'?: number;
        'sale_price:max'?: number;
        'sale_price:min'?: number;
        'retail_price:max'?: number;
        'retail_price:min'?: number;
        'map_price:max'?: number;
        'map_price:min'?: number;
        'calculated_price:max'?: number;
        'calculated_price:min'?: number;
        'date_created:max'?: string;
        'date_created:min'?: string;
        'date_modified:max'?: string;
        'date_modified:min'?: string;
      };
      header: {
        'Content-Type'?: string;
        Accept?: string;
      };
    };
    responses: {
      200: {
        schema: {
          data?: ({
            /**
             * Format: double
             * @description The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only.
             *
             * @example 24.64
             */
            calculated_price?: number;
            /**
             * Format: date-time
             * @description The date on which the Price entry was created.
             *
             * @example 2018-08-23T19:59:23Z
             */
            date_created?: string;
            /**
             * Format: date-time
             * @description The date on which the Price entry was created.
             *
             * @example 2018-08-23T19:59:23Z
             */
            date_modified?: string;
            /**
             * @description The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only.
             *
             * @example 158
             */
            product_id?: number;
          } & {
            /**
             * @description The Price List with which this price set is associated.
             *
             * @example 2
             */
            price_list_id?: number;
            /**
             * @description The variant with which this price set is associated. Either variant_id or sku is required.
             *
             * @example 325
             */
            variant_id?: number;
            /** @description The variant with which this price set is associated. Either sku or variant_id is required. */
            sku?: string;
            /**
             * Format: ISO-4217
             * @description The 3-letter currency code with which this price set is associated.
             *
             * @example usd
             */
            currency?: string;
          } & {
            /**
             * Format: double
             * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
             *
             * @example 3.99
             */
            price?: number;
            /**
             * Format: double
             * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
             */
            sale_price?: number;
            /**
             * Format: double
             * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
             */
            retail_price?: number;
            /**
             * Format: double
             * @description The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
             */
            map_price?: number;
            bulk_pricing_tiers?: {
              /**
               * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
               *
               * @example 1
               */
              quantity_min?: number;
              /**
               * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
               *
               * @example 10
               */
              quantity_max?: number;
              /**
               * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
               *
               * @example price
               */
              type?: 'fixed' | 'price' | 'percent';
              /**
               * Format: double
               * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
               *
               * @example 3
               */
              amount?: number;
            }[];
            /**
             * @description The SKU code associated with this `Price Record` if requested and it exists.
             *
             * @example SMB-123
             */
            sku?: string;
          })[];
          /**
           * Collection Meta
           * @description Data about the response, including pagination and collection totals.
           */
          meta?: {
            /**
             * Pagination
             * @description Data about the response, including pagination and collection totals.
             */
            pagination?: {
              /**
               * @description Total number of items in the result set.
               *
               * @example 36
               */
              total?: number;
              /**
               * @description Total number of items in the collection response.
               *
               * @example 36
               */
              count?: number;
              /**
               * @description The amount of items returned in the collection per page, controlled by the limit parameter.
               *
               * @example 50
               */
              per_page?: number;
              /**
               * @description The page you are currently on within the collection.
               *
               * @example 1
               */
              current_page?: number;
              /**
               * @description The total number of pages in the collection.
               *
               * @example 1
               */
              total_pages?: number;
              /** @description Pagination links for the previous and next parts of the whole collection. */
              links?: {
                /** @description Link to the previous page returned in the response. */
                previous?: string;
                /**
                 * @description Link to the current page returned in the response.
                 *
                 * @example ?page=1&limit=50
                 */
                current?: string;
                /** @description Link to the next page returned in the response. */
                next?: string;
              };
            };
          };
        };
      };
    };
  };
  /**
   * Creates or updates *Price List Records*.
   *
   * **Required Fields**
   * * currency
   *
   * **Notes**
   *
   * * Batch updates are supported by this endpoint, meaning that several price objects can be updated in one request. This allows you to do the same work as many individual requests to singleton endpoints
   * * Batch requests support up to 1,000 items per request.
   * * Up to 2 concurrent batch upsert requests are supported with this API. Running more than the allowed concurrent requests in parallel on the **same store** will cause a 429 error and your additional requests will fail. You are encouraged to run requests sequentially with as many records per request as possible, in order to maximize performance.
   */
  setPriceListRecordCollection: {
    parameters: {
      path: {
        /** The ID of the `Price List` requested. */
        price_list_id: number;
        store_hash: string;
      };
      header: {
        /** Header that determines whether the Batch API operates in strict mode or not.  Strict mode will reject the entire request if any item in the batch has an error. */
        'X-Strict-Mode'?: number;
        Accept?: string;
        'Content-Type'?: string;
      };
      body: {
        PriceRecordBatch: ({
          /**
           * @description The variant with which this price set is associated. Either variant_id or sku is required.
           *
           * @example 331
           */
          variant_id?: number;
          /**
           * @description The sku for the variant with which this price set is associated.  Either sku or variant_id is required.
           *
           * @example SMB-123
           */
          sku?: string;
          /**
           * Format: ISO-4217
           * @description The 3-letter currency code with which this price set is associated.
           *
           * @example usd
           */
          currency?: string;
        } & {
          /**
           * Format: double
           * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
           *
           * @example 3.99
           */
          price?: number;
          /**
           * Format: double
           * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
           */
          sale_price?: number;
          /**
           * Format: double
           * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
           */
          retail_price?: number;
          /**
           * Format: double
           * @description The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
           */
          map_price?: number;
          bulk_pricing_tiers?: {
            /**
             * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
             *
             * @example 1
             */
            quantity_min?: number;
            /**
             * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
             *
             * @example 10
             */
            quantity_max?: number;
            /**
             * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
             *
             * @example price
             */
            type?: 'fixed' | 'price' | 'percent';
            /**
             * Format: double
             * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
             *
             * @example 3
             */
            amount?: number;
          }[];
          /**
           * @description The SKU code associated with this `Price Record` if requested and it exists.
           *
           * @example SMB-123
           */
          sku?: string;
        })[];
      };
    };
    responses: {
      /** Success response for batch PUT of `Price Records`. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** Error response for batch PUT of `Price Records`.  May include errors during partial update in non-strict mode. */
      422: {
        schema: {
          batch_errors?: {
            /**
             * Price Record Identifiers
             * @description Price Record object used in batch create or update.
             */
            data?: {
              /**
               * @description The Price List with which this price set is associated.
               *
               * @example 2
               */
              price_list_id?: number;
              /**
               * @description The variant with which this price set is associated. Either variant_id or sku is required.
               *
               * @example 325
               */
              variant_id?: number;
              /** @description The variant with which this price set is associated. Either sku or variant_id is required. */
              sku?: string;
              /**
               * Format: ISO-4217
               * @description The 3-letter currency code with which this price set is associated.
               *
               * @example usd
               */
              currency?: string;
            };
            /** Detailed Errors */
            field_errors?: { [key: string]: string };
          }[];
        };
      };
    };
  };
  /** Deletes a *Price List Record*. Deleting the records does not delete the Price List. Optional parameters can be passed in. */
  deletePriceListRecordsByFilter: {
    parameters: {
      path: {
        /** The ID of the `Price List` requested. */
        price_list_id: number;
        store_hash: string;
      };
      query: {
        /** The ID of the `Variant` whose prices were requested. */
        'variant_id:in'?: parameters['FilterVariantIdParam'];
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      204: {
        schema: {
          /** @description 204 HTTP status code. */
          status?: number;
          /** @description The error title describing the situation. */
          title?: string;
          type?: string;
          instance?: string;
        };
      };
    };
  };
  /** Returns *Price List Records* using the variant ID. Will also contain currency records. */
  getPriceListRecordsByVariantId: {
    parameters: {
      path: {
        /** The ID of the `Price List` requested. */
        price_list_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
        store_hash: string;
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      200: {
        schema: {
          data?: ({
            /**
             * Format: double
             * @description The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only.
             *
             * @example 24.64
             */
            calculated_price?: number;
            /**
             * Format: date-time
             * @description The date on which the Price entry was created.
             *
             * @example 2018-08-23T19:59:23Z
             */
            date_created?: string;
            /**
             * Format: date-time
             * @description The date on which the Price entry was created.
             *
             * @example 2018-08-23T19:59:23Z
             */
            date_modified?: string;
            /**
             * @description The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only.
             *
             * @example 158
             */
            product_id?: number;
          } & {
            /**
             * @description The Price List with which this price set is associated.
             *
             * @example 2
             */
            price_list_id?: number;
            /**
             * @description The variant with which this price set is associated. Either variant_id or sku is required.
             *
             * @example 325
             */
            variant_id?: number;
            /** @description The variant with which this price set is associated. Either sku or variant_id is required. */
            sku?: string;
            /**
             * Format: ISO-4217
             * @description The 3-letter currency code with which this price set is associated.
             *
             * @example usd
             */
            currency?: string;
          } & {
            /**
             * Format: double
             * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
             *
             * @example 3.99
             */
            price?: number;
            /**
             * Format: double
             * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
             */
            sale_price?: number;
            /**
             * Format: double
             * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
             */
            retail_price?: number;
            /**
             * Format: double
             * @description The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
             */
            map_price?: number;
            bulk_pricing_tiers?: {
              /**
               * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
               *
               * @example 1
               */
              quantity_min?: number;
              /**
               * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
               *
               * @example 10
               */
              quantity_max?: number;
              /**
               * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
               *
               * @example price
               */
              type?: 'fixed' | 'price' | 'percent';
              /**
               * Format: double
               * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
               *
               * @example 3
               */
              amount?: number;
            }[];
            /**
             * @description The SKU code associated with this `Price Record` if requested and it exists.
             *
             * @example SMB-123
             */
            sku?: string;
          })[];
          /**
           * Collection Meta
           * @description Data about the response, including pagination and collection totals.
           */
          meta?: {
            /**
             * Pagination
             * @description Data about the response, including pagination and collection totals.
             */
            pagination?: {
              /**
               * @description Total number of items in the result set.
               *
               * @example 36
               */
              total?: number;
              /**
               * @description Total number of items in the collection response.
               *
               * @example 36
               */
              count?: number;
              /**
               * @description The amount of items returned in the collection per page, controlled by the limit parameter.
               *
               * @example 50
               */
              per_page?: number;
              /**
               * @description The page you are currently on within the collection.
               *
               * @example 1
               */
              current_page?: number;
              /**
               * @description The total number of pages in the collection.
               *
               * @example 1
               */
              total_pages?: number;
              /** @description Pagination links for the previous and next parts of the whole collection. */
              links?: {
                /** @description Link to the previous page returned in the response. */
                previous?: string;
                /**
                 * @description Link to the current page returned in the response.
                 *
                 * @example ?page=1&limit=50
                 */
                current?: string;
                /** @description Link to the next page returned in the response. */
                next?: string;
              };
            };
          };
        };
      };
    };
  };
  /** Returns a *Price List Record* using the currency code. Optional parameters can be used. */
  getPriceListRecord: {
    parameters: {
      path: {
        /** The ID of the `Price List` requested. */
        price_list_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
        /** The currency code associated with the price record being acted upon. */
        currency_code: string;
        store_hash: string;
      };
      query: {
        /** Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`.  Other valies will be ignored. */
        include?: 'bulk_pricing_tiers' | 'sku';
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      200: {
        schema: {
          /**
           * Price Record
           * @description The Price Record object.
           */
          data?: {
            /**
             * Format: double
             * @description The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only.
             *
             * @example 24.64
             */
            calculated_price?: number;
            /**
             * Format: date-time
             * @description The date on which the Price entry was created.
             *
             * @example 2018-08-23T19:59:23Z
             */
            date_created?: string;
            /**
             * Format: date-time
             * @description The date on which the Price entry was created.
             *
             * @example 2018-08-23T19:59:23Z
             */
            date_modified?: string;
            /**
             * @description The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only.
             *
             * @example 158
             */
            product_id?: number;
          } & {
            /**
             * @description The Price List with which this price set is associated.
             *
             * @example 2
             */
            price_list_id?: number;
            /**
             * @description The variant with which this price set is associated. Either variant_id or sku is required.
             *
             * @example 325
             */
            variant_id?: number;
            /** @description The variant with which this price set is associated. Either sku or variant_id is required. */
            sku?: string;
            /**
             * Format: ISO-4217
             * @description The 3-letter currency code with which this price set is associated.
             *
             * @example usd
             */
            currency?: string;
          } & {
            /**
             * Format: double
             * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
             *
             * @example 3.99
             */
            price?: number;
            /**
             * Format: double
             * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
             */
            sale_price?: number;
            /**
             * Format: double
             * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
             */
            retail_price?: number;
            /**
             * Format: double
             * @description The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
             */
            map_price?: number;
            bulk_pricing_tiers?: {
              /**
               * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
               *
               * @example 1
               */
              quantity_min?: number;
              /**
               * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
               *
               * @example 10
               */
              quantity_max?: number;
              /**
               * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
               *
               * @example price
               */
              type?: 'fixed' | 'price' | 'percent';
              /**
               * Format: double
               * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
               *
               * @example 3
               */
              amount?: number;
            }[];
            /**
             * @description The SKU code associated with this `Price Record` if requested and it exists.
             *
             * @example SMB-123
             */
            sku?: string;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Creates or updates a*Price List Record* using the currency code. */
  setPriceListRecord: {
    parameters: {
      path: {
        /** The ID of the `Price List` requested. */
        price_list_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
        /** The currency code associated with the price record being acted upon. */
        currency_code: string;
        store_hash: string;
      };
      body: {
        PriceRecord: {
          /**
           * Format: double
           * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
           *
           * @example 3.99
           */
          price?: number;
          /**
           * Format: double
           * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
           */
          sale_price?: number;
          /**
           * Format: double
           * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
           */
          retail_price?: number;
          /**
           * Format: double
           * @description The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
           */
          map_price?: number;
          bulk_pricing_tiers?: {
            /**
             * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
             *
             * @example 1
             */
            quantity_min?: number;
            /**
             * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
             *
             * @example 10
             */
            quantity_max?: number;
            /**
             * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
             *
             * @example price
             */
            type?: 'fixed' | 'price' | 'percent';
            /**
             * Format: double
             * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
             *
             * @example 3
             */
            amount?: number;
          }[];
          /**
           * @description The SKU code associated with this `Price Record` if requested and it exists.
           *
           * @example SMB-123
           */
          sku?: string;
        };
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      200: {
        schema: {
          /**
           * Price Record
           * @description The Price Record object.
           */
          data?: {
            /**
             * Format: double
             * @description The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only.
             *
             * @example 24.64
             */
            calculated_price?: number;
            /**
             * Format: date-time
             * @description The date on which the Price entry was created.
             *
             * @example 2018-08-23T19:59:23Z
             */
            date_created?: string;
            /**
             * Format: date-time
             * @description The date on which the Price entry was created.
             *
             * @example 2018-08-23T19:59:23Z
             */
            date_modified?: string;
            /**
             * @description The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only.
             *
             * @example 158
             */
            product_id?: number;
          } & {
            /**
             * @description The Price List with which this price set is associated.
             *
             * @example 2
             */
            price_list_id?: number;
            /**
             * @description The variant with which this price set is associated. Either variant_id or sku is required.
             *
             * @example 325
             */
            variant_id?: number;
            /** @description The variant with which this price set is associated. Either sku or variant_id is required. */
            sku?: string;
            /**
             * Format: ISO-4217
             * @description The 3-letter currency code with which this price set is associated.
             *
             * @example usd
             */
            currency?: string;
          } & {
            /**
             * Format: double
             * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
             *
             * @example 3.99
             */
            price?: number;
            /**
             * Format: double
             * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
             */
            sale_price?: number;
            /**
             * Format: double
             * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
             */
            retail_price?: number;
            /**
             * Format: double
             * @description The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
             */
            map_price?: number;
            bulk_pricing_tiers?: {
              /**
               * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
               *
               * @example 1
               */
              quantity_min?: number;
              /**
               * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
               *
               * @example 10
               */
              quantity_max?: number;
              /**
               * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
               *
               * @example price
               */
              type?: 'fixed' | 'price' | 'percent';
              /**
               * Format: double
               * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
               *
               * @example 3
               */
              amount?: number;
            }[];
            /**
             * @description The SKU code associated with this `Price Record` if requested and it exists.
             *
             * @example SMB-123
             */
            sku?: string;
          };
          /**
           * Meta
           * @description Empty meta object; may be used later.
           */
          meta?: { [key: string]: unknown };
        };
      };
      /** The resource was not found. */
      404: {
        schema: {
          /** @description 404 HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
        };
      };
      /** `Price Record` was in conflict with another price record. This is the result of duplicate unique values. */
      409: {
        schema: {
          /** @description The HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
        } & {
          /** Detailed Errors */
          errors?: { [key: string]: string };
        };
      };
      /** `Price Record` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        schema: {
          /** @description The HTTP status code. */
          status?: number;
          /** @description The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
        } & {
          /** Detailed Errors */
          errors?: { [key: string]: string };
        };
      };
    };
  };
  /** Deletes a *Price List Record* using the currency code. */
  deletePriceListRecord: {
    parameters: {
      path: {
        /** The ID of the `Price List` requested. */
        price_list_id: number;
        /** ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
        /** The currency code associated with the price record being acted upon. */
        currency_code: string;
        store_hash: string;
      };
      header: {
        'Content-Type'?: string;
        Accept?: string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Fetches an array of `Price List Assignments` matching a particular Customer Group and Price List and Channel. */
  GetListOfPriceListAssignments: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** The ID of the `Price List Assignment`. */
        id?: parameters['FilterAssignmentIdParam'];
        /** The ID of the `Price List`. */
        price_list_id?: parameters['FilterPriceListIdParam'];
        /** The ID of the `Customer Group`. */
        customer_group_id?: parameters['FilterCustomerGroupIdParam'];
        /** The ID of the `Channel`. */
        channel_id?: parameters['FilterChannelIdParam'];
        /** Filter items by a comma-separated list of `id`s. */
        'id:in'?: number[];
        /** Filter items by a comma-separated list of `customer_group_id`s. */
        'customer_group_id:in'?: number[];
        /** Filter items by a comma-separated list of `price_list_id`s. */
        'price_list_id:in'?: number[];
        /** Filter items by a comma-separated list of `channel_id`s. */
        'channel_id:in'?: number[];
        /** Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
    };
    responses: {
      /** An array of price list assignments and metadata. */
      200: {
        schema: definitions['AssignmentsForGetResponse'];
      };
    };
  };
  /** Creates a batch of `Price List Assignments`. */
  CreatePriceListAssignments: {
    parameters: {
      path: {
        store_hash: string;
      };
      body: {
        /** A BigCommerce `Price List Assignments` request. */
        PriceListAssignmentBatch: definitions['CreateBatchPriceListAssignmentsRequest'];
      };
    };
    responses: {
      /** Success response for batch POST of `Price List Assignments`. */
      200: {
        schema: definitions['SuccessBatchResponse'];
      };
      /** Error response for batch POST of `Price List Assignments`. Includes the errors for each reference id. */
      422: {
        schema: definitions['PriceListAssignmentsBatchErrorResponse'];
      };
    };
  };
  /** Deletes one or more `Price List Assignments` objects from BigCommerce using a filter. */
  deletePriceListAssignmentsByFilter: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        /** The ID of the `Price List Assignment`. */
        id?: parameters['FilterAssignmentIdParam'];
        /** The ID of the `Price List`. */
        price_list_id?: parameters['FilterPriceListIdParam'];
        /** The ID of the `Customer Group`. */
        customer_group_id?: parameters['FilterCustomerGroupIdParam'];
        /** The ID of the `Channel`. */
        channel_id?: parameters['FilterChannelIdParam'];
        /** Filter results by a comma-separated list of `channel_id`s. */
        'channel_id:in'?: number[];
      };
    };
    responses: {
      /** An empty response. */
      204: {
        schema: definitions['NoContent'];
      };
    };
  };
}

export interface external {}
