/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v2/currencies': {
    /** Returns a list of all store *Currency*. */
    get: {
      parameters: {
        path: {
          store_hash: string;
        };
        header: {
          Accept: string;
          'Content-Type': string;
        };
      };
      responses: {
        200: responses['currencyCollection_Resp'];
      };
    };
    /**
     * Creates *Currency*.
     *
     * **Required Fields**
     *
     * * name
     * * currency_code
     * * currency_exchange_rate
     * * token_location
     * * token
     * * decimal_token
     * * thousands_token
     * * decimal_places
     *
     * **Read-Only Fields**
     *
     * * id
     * * date_created
     * * date_modified
     *
     *
     * The `is_default` property can only be set to true. The value of `is_default` cannot be unset, only overridden. To change the store's default currency via the BigCommerce control panel, please see [Managing Currencies](https://support.bigcommerce.com/articles/Public/Managing-Currencies/?q=currency&l=en_US&fs=Search&pn=1#default).
     */
    post: {
      parameters: {
        path: {
          store_hash: string;
        };
        header: {
          Accept: string;
          'Content-Type': string;
        };
        body: {
          body?: definitions['currency_Post'];
        };
      };
      responses: {
        200: responses['currency_Resp'];
      };
    };
    /** Deletes all non-default store currencies. */
    delete: {
      parameters: {
        path: {
          store_hash: string;
        };
        header: {
          'Content-Type': string;
          Accepts: string;
        };
      };
      responses: {
        204: {
          schema: { [key: string]: unknown };
        };
      };
    };
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/currencies/{id}': {
    /** Returns a single *Currency*. */
    get: operations['getACurrency'];
    /**
     * Updates a *Currency*.
     *
     * **Read-Only Fields**
     *
     * * id
     * * date_created
     * * date_modified
     * * currency_code
     *
     *
     * The `is_default` property can only be set to true. The value of `is_default` cannot be unset, only overridden.
     */
    put: operations['updateACurrency'];
    /**
     * Deletes a *Currency*.
     *
     * If a currency's `is_default` property is set to true, this currency cannot be deleted.
     */
    delete: operations['deleteACurrency'];
    parameters: {
      path: {
        /** Currency Id */
        id: string;
        store_hash: string;
      };
    };
  };
}

export interface definitions {
  /** currency_Post */
  currency_Post: definitions['currency_Base'];
  /**
   * currency_Base
   * @description Currency Object
   * @example [object Object]
   */
  currency_Base: {
    /** @description Specifies the store’s default currency display format. For write operations, only true value is accepted. When set to true, it cannot be unset, only overridden. */
    is_default?: boolean;
    /**
     * @description 2-letter ISO Alpha-2 code for this currency’s country.
     * @example EU
     */
    country_iso2?: string;
    /**
     * @description 3-letter ISO 4217 code for this currency.
     * @example EUR
     */
    currency_code: string;
    /**
     * @description Amount of this currency that is equivalent to one U.S. dollar.(Float, Float as String, Integer)
     * @example 0.849
     */
    currency_exchange_rate: string;
    /**
     * @description Specifies whether to use the Open Exchange Rates service to update the currency conversion. A value of false specifies a static conversion value. auto_update only applies to non-transactional currencies.
     * @example true
     */
    auto_update?: boolean;
    /**
     * @description Specifies whether this currency’s symbol appears to the “left” or “right” of the numeric amount.
     * @example left
     */
    token_location: string;
    /**
     * @description Symbol for this currency.
     * @example €
     */
    token: string;
    /**
     * @description Symbol used as the decimal separator in this currency.
     * @example .
     */
    decimal_token: string;
    /**
     * @description Symbol used as the thousands separator in this currency.
     * @example ,
     */
    thousands_token: string;
    /**
     * @description Number of decimal places to show for this currency.
     * @example 2
     */
    decimal_places: number;
    /**
     * @description Name of the currency.
     * @example Euro
     */
    name: string;
    /** @description If the currency is active on the store. */
    enabled?: boolean;
    /** @description Indicates if the currency is set as transactional or not. False means display only currency */
    is_transactional?: boolean;
  };
  /** currency_Put */
  currency_Put: definitions['currency_Post'];
  /** currency_Full */
  currency_Full: definitions['currency_Base'] & {
    /**
     * @description Id of the currency. READ-ONLY.
     * @example 2
     */
    id?: number;
    /**
     * Format: date-time
     * @description Date the currency was last updated, created or modified.
     */
    last_updated?: string;
  };
}

export interface parameters {
  /** @default application/json */
  Accept: string;
  /** @default application/json */
  'Content-Type': string;
}

export interface responses {
  currencyCollection_Resp: {
    schema: definitions['currency_Full'][];
  };
  currency_Resp: {
    schema: definitions['currency_Full'];
  };
}

export interface operations {
  /** Returns a single *Currency*. */
  getACurrency: {
    parameters: {
      path: {
        /** Currency Id */
        id: string;
        store_hash: string;
      };
      header: {
        'Content-Type': string;
        Accept: string;
      };
    };
    responses: {
      200: responses['currency_Resp'];
    };
  };
  /**
   * Updates a *Currency*.
   *
   * **Read-Only Fields**
   *
   * * id
   * * date_created
   * * date_modified
   * * currency_code
   *
   *
   * The `is_default` property can only be set to true. The value of `is_default` cannot be unset, only overridden.
   */
  updateACurrency: {
    parameters: {
      path: {
        /** Currency Id */
        id: string;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body?: definitions['currency_Put'];
      };
    };
    responses: {
      200: responses['currency_Resp'];
    };
  };
  /**
   * Deletes a *Currency*.
   *
   * If a currency's `is_default` property is set to true, this currency cannot be deleted.
   */
  deleteACurrency: {
    parameters: {
      path: {
        /** Currency Id */
        id: string;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: {
        schema: { [key: string]: unknown };
      };
    };
  };
}

export interface external {}
