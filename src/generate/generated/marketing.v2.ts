/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stores/{store_hash}/v2/coupons': {
    /**
     * Returns a list of *Coupons*. Default sorting is by coupon/discount id, from lowest to highest. Optional filter parameters can be passed in.
     *
     * ## Usage Notes
     *
     * Available types for `type` and `exclude_type` filters:
     *
     * |Type|
     * |-|
     * |`per_item_discount`|
     * |`percentage_discount`|
     * |`per_total_discount`|
     * |`shipping_discount`|
     * |`free_shipping`|
     * |`promotion`|
     *
     * Coupons with `type=promotion` will not populate usable data for the following fields but instead be set to the following default values:
     *
     * ```json
     * ...
     * amount : 0.0000
     * min_purchase: 0.0000
     * applies_to
     * restricted_to: []
     * shipping_methods : null
     * ...
     * ```
     */
    get: operations['getAllCoupons'];
    /**
     * Creates a *Coupon*.
     *
     * **Required Fields**
     * *   `name`
     * *   `code`
     * *   `type`
     * *   `amount`
     * *   `applies_to`
     *
     * **Read Only Fields**
     * *   `id`
     * *   `num_uses`
     *
     * **Notes**
     *
     * The coupon type can be one of the following:
     *
     * *   `per_item_discount`
     * *   `per_total_discount`
     * *   `shipping_discount`
     * *   `free_shipping`
     * *   `percentage_discount`
     *
     * Legacy coupon codes only work with the store's default currency. Applying a coupon with any other currency other than the store's default will result in the error: "Coupons only apply to default currency."
     */
    post: {
      parameters: {
        path: {
          store_hash: string;
        };
        header: {
          Accept: string;
          'Content-Type': string;
        };
        body: {
          body: definitions['coupon_Base'];
        };
      };
      responses: {
        201: responses['coupon_Resp'];
      };
    };
    /**
     * By default, it deletes a page of *Coupons*.
     *
     * ## Usage Notes
     * * Deleting a coupon via this endpoint will delete the coupon but not the promotion it is attached to
     */
    delete: operations['deleteAllCoupons'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/coupons/count': {
    /** Returns a count of all *Coupons* in the store. */
    get: operations['getACountOfCoupons'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/coupons/{id}': {
    /**
     * Updates a *Coupon*.
     *
     *
     * **Read Only Fields**
     *
     * * `id`
     * * `num_uses`
     * * `date_created`
     *
     * **Notes**
     *
     * If the `applies_to` value is cleared, you can restore it to the coupon by reapplying the `applies_to` value in a new `PUT` request.
     */
    put: operations['updateACoupon'];
    /** Deletes a *Coupon*. */
    delete: operations['deleteACoupon'];
    parameters: {
      path: {
        id: string;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/banners': {
    /** Returns a list of *Banners*. Default sorting is by banner id, from lowest to highest. */
    get: operations['getAllBanners'];
    /**
     * Creates a *Banner*.
     *
     * **Required Fields**
     * * name
     * * content
     * * page
     * * location
     * * date_type
     *
     * **Read Only Fields**
     * * date_created
     * * id
     */
    post: operations['createABanner'];
    /** By default, it deletes all *Banners*. */
    delete: operations['deleteAllBanners'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/banners/{id}': {
    /** Returns a single *Banner* */
    get: operations['getABanner'];
    /**
     * Updates a *Banner*.
     *
     * **Read Only Fields**
     * * date_created
     * * id
     */
    put: operations['updateABanner'];
    /** Deletes a *Banner*. */
    delete: operations['deleteABanner'];
    parameters: {
      path: {
        id: string;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/banners/count': {
    /** Returns a count of *Banners*. */
    get: operations['getACountOfBanners'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/gift_certificates/{id}': {
    /** Returns a single *Gift Certificate*. */
    get: operations['getAGiftCertificate'];
    /**
     * Updates a *Gift Certificate*.
     *
     * **Read Only Fields**
     * * id
     * * order_id
     */
    put: operations['updateAGiftCertificate'];
    /** Deletes a *Gift Certificate*. */
    delete: operations['deleteAGiftCertificate'];
    parameters: {
      path: {
        id: string;
        store_hash: string;
      };
    };
  };
  '/stores/{store_hash}/v2/gift_certificates': {
    /**
     * Returns a list of *Gift Certificates*. Optional filter parameters can be passed in.
     *
     * Default sorting is by gift-certificate id, from lowest to highest.
     *
     * The maximum limit is 250. If a limit isn’t provided, up to 50 gift_certificates are returned by default.
     */
    get: operations['getAllGiftCertificates'];
    /**
     * Creates a *Gift Certificate*.
     *
     *
     * **Required Fields**
     * * to_name
     * * to_email
     * * from_name
     * * from_email
     * * amount
     *
     * **Read Only Fields**
     * * id
     * * order_id
     *
     * **Notes**
     *
     * When a gift certificate is created through the API, no email notification is triggered to the specified recipient.
     */
    post: operations['createAGiftCertificate'];
    /** By default, it deletes all *Gift Certificates*. */
    delete: operations['deleteAllGiftCertificates'];
    parameters: {
      path: {
        store_hash: string;
      };
    };
  };
}

export interface definitions {
  /** Coupon Resource */
  CouponsResource: {
    /**
     * @description URL of the coupons for api requests
     * @example https://api.bigcommerce.com/stores/{store_hash}/v2/orders/129/coupons
     */
    url?: string;
    /**
     * @description resource of the coupons
     * @example /orders/129/coupons
     */
    resource?: string;
  };
  /** coupon_Full */
  coupon_Full: {
    /**
     * @description The coupon's ID. This is a read-only field; do not set or modify its value in a POST or PUT request.
     * @example 2
     */
    id: number;
    /**
     * @description Date Created
     * @example Tue, 13 Mar 2018 16:18:59 +0000
     */
    date_created?: string;
    /** @description Number of times this coupon has been used. This is a read-only field; do not set or modify its value in a POST or PUT request. */
    num_uses?: number;
  } & definitions['coupon_Base'];
  /**
   * coupon_Base
   * @example [object Object]
   */
  coupon_Base: {
    /**
     * @description The name of the coupon.
     * @example Australia Customers Discount
     */
    name: string;
    type:
      | 'per_item_discount'
      | 'per_total_discount'
      | 'shipping_discount'
      | 'free_shipping'
      | 'percentage_discount'
      | 'promotion';
    /**
     * @description The discount to apply to an order, as either an amount or a percentage. This field’s usage is determined by the coupon `type`. For example, a `type` of + `percentage_discount` would determine a percentage here.
     * @example 5
     */
    amount: string;
    /**
     * @description Specifies a minimum value that an order must have before the coupon can be applied to it.
     * @example 25
     */
    min_purchase?: string;
    /** @description Specifies when a coupon expires. Coupons need not have an expiry date – you can also control expiry via + `max_uses` or `max_uses_per_customer`. If you do use this date field, the value must be in <a href="http://tools.ietf.org/html/rfc2822#section-3.3" target="_blank">RFC 2822</a> format. */
    expires?: string;
    /**
     * @description If the coupon is enabled, this field’s value is `true`; otherwise, `false`.
     * @example true
     */
    enabled?: boolean;
    /**
     * @description The coupon code that customers will use to receive their discounts. Value must be unique. Only letters, numbers, white space, underscores, and hyphens are allowed.
     * @example S2549JM0Y
     */
    code: string;
    /** @description If it is not included in the PUT request, its existing value on the coupon will be cleared. Also required to be set on the POST request */
    applies_to: {
      /** @description ID of either the products or categories */
      ids?: number[];
      /** @description What the discount applies to. Can be products or categories. */
      entity?: string;
    };
    /**
     * @description Maximum number of times this coupon can be used.
     * @example 25
     */
    max_uses?: number;
    /** @description Maximum number of times each customer can use this coupon. */
    max_uses_per_customer?: number;
    restricted_to?: {
      countries?: string;
      ''?: string;
    };
    /** @description This is a list of shipping-method names. A shipping method must be enabled on the store to use it with a coupon. To check which shipping methods are enabled, please use the [List Shipping Methods](/api/v2#list-shipping-methods) endpoint. */
    shipping_methods?: string[];
  };
  /** banner_Base */
  banner_Base: {
    /**
     * @description Name of the banner.
     * @example Sale Banner
     */
    name: string;
    /**
     * @description Contains the banner content. Returned as a string and includes HTML formatting.
     * @example <p> Sale! Tuesday at 9am! </p>
     */
    content: string;
    /** @description Page the Banner is located on. */
    page: 'home_page' | 'category_page' | 'brand_page' | 'search_page';
    /**
     * @description Location on the page.
     * @example top
     */
    location: 'top' | 'bottom';
    /** @description This specifies whether the banner should be visible during a specific date range. */
    date_type: 'always' | 'custom';
    /**
     * @description If the datetype is set as 'custom’, this field specifies the date when the banner should become visible on the storefront.
     * @example 0
     */
    date_from?: string;
    /**
     * @description If the datetype is set as 'custom’, this field specifies the date when the banner should stop being visible on the storefront.
     * @example 0
     */
    date_to?: string;
    /**
     * @description Integer value denoting whether or not the banner is visible on the storefront: 1 = visible; 0 = not visible
     * @example 1
     */
    visible?: string;
  };
  /** banner_Full */
  banner_Full: {
    /**
     * @description Id of the banner.
     * This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     *
     * @example 1
     */
    id?: number;
    /**
     * Format: date-time
     * @description Date the banner is created.
     * @example 1522169082
     */
    date_created?: string;
    /**
     * @description If the banner is on a specific category or brand page then the `item_id` will correspond the category or brand id.
     * @example 0
     */
    item_id?: string;
  } & definitions['banner_Base'];
  /** banner_Put */
  banner_Put: {
    /**
     * @description If the banner is on a specific category or brand page then the `item_id` will correspond the category or brand id.
     * @example 0
     */
    item_id?: string;
  } & definitions['banner_Base'];
  /** giftCertificate_Base */
  giftCertificate_Base: {
    /**
     * @description Name of the recipient.
     * @example John Doe
     */
    to_name: string;
    /**
     * @description Email of the recipient.
     * @example johndoe@example.com
     */
    to_email: string;
    /**
     * @description Name of the customer who purchased the gift certificate.
     * @example Jane Doe
     */
    from_name: string;
    /**
     * @description Email of the customer who purchased the gift certificate.
     * @example janedoe@example.com
     */
    from_email: string;
    /**
     * @description Value of the gift certificate.
     * @example 10
     */
    amount: string;
  };
  /** giftCertificate_Full */
  giftCertificate_Full: definitions['giftCertificate_Base'] & {
    /**
     * @description The ID of the gift certificate.This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     * @example 1
     */
    id?: number;
    /**
     * @description The ID of the customer placing the order.
     * @example 5
     */
    customer_id?: number;
    /**
     * @description The ID of the order.
     * @example 116
     */
    order_id?: number;
    /**
     * @description Remaining value of the gift certificate. If not set, will default to the amount.
     * @example 0
     */
    balance?: string;
    /**
     * @description Date the gift certificate was purchased. If not assigned, this will be set to today’s date. Date displays in Unix timestamp format.
     * @example 1454432829
     */
    purchase_date?: string;
    /** @description Date on which the gift certificate is set to expire. */
    expiry_date?: string;
    /**
     * @description The email theme to use in the message sent to the recipient.
     * @example Celebration
     */
    template?: 'Birthday' | 'Girl' | 'Boy' | 'Celebration' | 'Christmas' | 'General';
    /**
     * @description Text that will be sent to the recipient, such as “Congratulations.”
     * @example Congratulations!
     */
    message?: string;
    /**
     * @description A unique string that a customer can input to redeem a gift certificate. Values greater than 20 characters will be trimmed down to the first 20 characters and returned in the response.
     * If this field is not set, a value will be autogenerated.
     * @example FFZ-5N4-C7M-S78
     */
    code?: string;
    /** @example active */
    status?: 'active' | 'pending' | 'disabled' | 'expired';
  };
  /** giftCertificate_Put */
  giftCertificate_Put: definitions['giftCertificate_Base'] & {
    /**
     * @description Remaining value of the gift certificate. If not set, will default to the amount.
     * @example 0
     */
    balance?: string;
    /**
     * @description Date the gift certificate was purchased. If not assigned, this will be set to today’s date. Enter date in RFC-2822 format.
     * @example Mon, 19 Jan 1970 07:21:46 CST
     */
    purchase_date?: string;
    /**
     * @description Date on which the gift certificate is set to expire.
     * @example 1622583106
     */
    expiry_date?: string;
    /**
     * @description The ID of the customer placing the order.
     * @example 5
     */
    customer_id?: number;
    /**
     * @description The email theme to use in the message sent to the recipient.
     * @example Celebration
     */
    template?: 'Birthday' | 'Boy' | 'Girl' | 'Celebration' | 'Christmas' | 'General';
    /**
     * @description Text that will be sent to the recipient, such as “Congratulations.”
     * @example Congratulations!
     */
    message?: string;
    /**
     * @description A unique string that a customer can input to redeem a gift certificate. Values greater than 20 characters will be trimmed down to the first 20 characters and returned in the response.
     * If this field is not set, a value will be autogenerated.
     * @example FFZ-5N4-C7M-S78
     */
    code?: string;
    /** @example active */
    status?: 'active' | 'pending' | 'expired' | 'disabled';
  };
  /** giftCertificate_Post */
  giftCertificate_Post: definitions['giftCertificate_Base'] & {
    /**
     * @description Remaining value of the gift certificate. If not set, will default to the amount.
     * @example 0
     */
    balance?: string;
    /**
     * @description Date the gift certificate was purchased. If not assigned, this will be set to today’s date. Enter date in RFC-2822 format.
     * @example Mon, 19 Jan 1970 07:21:46 CST
     */
    purchase_date?: string;
    /**
     * @description Date on which the gift certificate is set to expire.
     * @example 1622583106
     */
    expiry_date?: string;
    /**
     * @description The ID of the customer placing the order.
     * @example 5
     */
    customer_id?: number;
    /**
     * @description The email theme to use in the message sent to the recipient.
     * @example Celebration
     */
    template?: 'Birthday' | 'Boy' | 'Girl' | 'Celebration' | 'Christmas' | 'General';
    /**
     * @description Text that will be sent to the recipient, such as “Congratulations.”
     * @example Congratulations!
     */
    message?: string;
    /**
     * @description A unique string that a customer can input to redeem a gift certificate. Values greater than 20 characters will be trimmed down to the first 20 characters and returned in the response.
     * If this field is not set, a value will be autogenerated.
     * @example FFZ-5N4-C7M-S78
     */
    code?: string;
    /** @example active */
    status?: 'active' | 'pending' | 'expired' | 'disabled';
    /**
     * @description A currency code, following the ISO 4217 standard. The currency has to exists in the store first.
     *
     * Gift Certificates can only be used if the transactional currency of the cart is the same to the one defined in the gift certificate. If this value is not provided, the gift certificate is created using the store's default transactional currency
     * @example USD
     */
    currency_code?: string;
  };
}

export interface responses {
  coupon_Resp: {
    schema: definitions['coupon_Full'];
  };
  coupon_Resp_Collection: {
    schema: definitions['coupon_Full'][];
  };
  bannerCollection_Resp: {
    schema: definitions['banner_Full'][];
  };
  banner_Resp: {
    schema: definitions['banner_Full'];
  };
  count_Resp: {
    schema: {
      count?: number;
    };
  };
  giftCertificate_Resp: {
    schema: definitions['giftCertificate_Full'];
  };
  giftCertificateCollection_Resp: {
    schema: definitions['giftCertificate_Full'][];
  };
}

export interface operations {
  /**
   * Returns a list of *Coupons*. Default sorting is by coupon/discount id, from lowest to highest. Optional filter parameters can be passed in.
   *
   * ## Usage Notes
   *
   * Available types for `type` and `exclude_type` filters:
   *
   * |Type|
   * |-|
   * |`per_item_discount`|
   * |`percentage_discount`|
   * |`per_total_discount`|
   * |`shipping_discount`|
   * |`free_shipping`|
   * |`promotion`|
   *
   * Coupons with `type=promotion` will not populate usable data for the following fields but instead be set to the following default values:
   *
   * ```json
   * ...
   * amount : 0.0000
   * min_purchase: 0.0000
   * applies_to
   * restricted_to: []
   * shipping_methods : null
   * ...
   * ```
   */
  getAllCoupons: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** Optional filter param. `/api/v2/coupons?id={value}` */
        id?: string;
        /** Optional filter param `/api/v2/coupons?code={value}` */
        code?: string;
        /** Optional filter param `/api/v2/coupons?name={value}` */
        name?: string;
        /**
         * |Type|
         * |-|
         * |`per_item_discount`|
         * |`percentage_discount`|
         * |`per_total_discount`|
         * |`shipping_discount`|
         * |`free_shipping`|
         * |`promotion`|
         */
        type?: string;
        /** Optional filter param `/api/v2/coupons?min_id={value}` */
        min_id?: number;
        /** Optional filter param`/api/v2/coupons?max_id={value}` */
        max_id?: number;
        /** Number of pages `/api/v2/coupons?page={number}` */
        page?: number;
        /** Count per page `/api/v2/coupons?limit={count}` */
        limit?: number;
        /**
         * |Type|
         * |-|
         * |`per_item_discount`|
         * |`percentage_discount`|
         * |`per_total_discount`|
         * |`shipping_discount`|
         * |`free_shipping`|
         * |`promotion`|
         */
        exclude_type?: string;
      };
    };
    responses: {
      200: responses['coupon_Resp_Collection'];
    };
  };
  /**
   * By default, it deletes a page of *Coupons*.
   *
   * ## Usage Notes
   * * Deleting a coupon via this endpoint will delete the coupon but not the promotion it is attached to
   */
  deleteAllCoupons: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a count of all *Coupons* in the store. */
  getACountOfCoupons: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: responses['count_Resp'];
    };
  };
  /**
   * Updates a *Coupon*.
   *
   *
   * **Read Only Fields**
   *
   * * `id`
   * * `num_uses`
   * * `date_created`
   *
   * **Notes**
   *
   * If the `applies_to` value is cleared, you can restore it to the coupon by reapplying the `applies_to` value in a new `PUT` request.
   */
  updateACoupon: {
    parameters: {
      path: {
        /** Id of the coupon. */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: definitions['coupon_Base'];
      };
    };
    responses: {
      200: responses['coupon_Resp'];
    };
  };
  /** Deletes a *Coupon*. */
  deleteACoupon: {
    parameters: {
      path: {
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of *Banners*. Default sorting is by banner id, from lowest to highest. */
  getAllBanners: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      query: {
        /** Optional filter param `/api/v2/banners?min_id={value}` */
        min_id?: number;
        /** Optional filter param `/api/v2/banners?max_id={value}` */
        max_id?: number;
        /** Optional filter param `/api/v2/banners?page={number}` */
        page?: number;
        /** Optional filter param `/api/v2/banners?limit={count}` */
        limit?: number;
      };
    };
    responses: {
      200: responses['bannerCollection_Resp'];
    };
  };
  /**
   * Creates a *Banner*.
   *
   * **Required Fields**
   * * name
   * * content
   * * page
   * * location
   * * date_type
   *
   * **Read Only Fields**
   * * date_created
   * * id
   */
  createABanner: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: definitions['banner_Base'];
      };
    };
    responses: {
      200: responses['banner_Resp'];
    };
  };
  /** By default, it deletes all *Banners*. */
  deleteAllBanners: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a single *Banner* */
  getABanner: {
    parameters: {
      path: {
        /** Id of the banner. */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: responses['banner_Resp'];
    };
  };
  /**
   * Updates a *Banner*.
   *
   * **Read Only Fields**
   * * date_created
   * * id
   */
  updateABanner: {
    parameters: {
      path: {
        /** Id of the banner. */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body: definitions['banner_Put'];
      };
    };
    responses: {
      200: responses['banner_Resp'];
    };
  };
  /** Deletes a *Banner*. */
  deleteABanner: {
    parameters: {
      path: {
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a count of *Banners*. */
  getACountOfBanners: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: responses['count_Resp'];
    };
  };
  /** Returns a single *Gift Certificate*. */
  getAGiftCertificate: {
    parameters: {
      path: {
        /** Id of the gift certificate. */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: responses['giftCertificate_Resp'];
    };
  };
  /**
   * Updates a *Gift Certificate*.
   *
   * **Read Only Fields**
   * * id
   * * order_id
   */
  updateAGiftCertificate: {
    parameters: {
      path: {
        id: string;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body?: definitions['giftCertificate_Put'];
      };
    };
    responses: {
      200: responses['giftCertificate_Resp'];
    };
  };
  /** Deletes a *Gift Certificate*. */
  deleteAGiftCertificate: {
    parameters: {
      path: {
        /** Id of the gift certificate. */
        id: number;
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      204: never;
    };
  };
  /**
   * Returns a list of *Gift Certificates*. Optional filter parameters can be passed in.
   *
   * Default sorting is by gift-certificate id, from lowest to highest.
   *
   * The maximum limit is 250. If a limit isn’t provided, up to 50 gift_certificates are returned by default.
   */
  getAllGiftCertificates: {
    parameters: {
      path: {
        store_hash: string;
      };
      query: {
        min_id?: number;
        max_id?: number;
        code?: string;
        order_id?: number;
        to_name?: string;
        to_email?: string;
        from_name?: string;
        from_email?: string;
        page?: number;
        limit?: number;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
    };
    responses: {
      200: responses['giftCertificateCollection_Resp'];
    };
  };
  /**
   * Creates a *Gift Certificate*.
   *
   *
   * **Required Fields**
   * * to_name
   * * to_email
   * * from_name
   * * from_email
   * * amount
   *
   * **Read Only Fields**
   * * id
   * * order_id
   *
   * **Notes**
   *
   * When a gift certificate is created through the API, no email notification is triggered to the specified recipient.
   */
  createAGiftCertificate: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept: string;
        'Content-Type': string;
      };
      body: {
        body?: definitions['giftCertificate_Post'];
      };
    };
    responses: {
      200: responses['giftCertificate_Resp'];
    };
  };
  /** By default, it deletes all *Gift Certificates*. */
  deleteAllGiftCertificates: {
    parameters: {
      path: {
        store_hash: string;
      };
      header: {
        Accept?: string;
        'Content-Type'?: string;
      };
    };
    responses: {
      204: {
        schema: { [key: string]: unknown };
      };
    };
  };
}

export interface external {}
